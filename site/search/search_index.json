{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Room-Management-moichuelo-registro---DeepWiki","text":""},{"location":"index.html#content-index","title":"Content Index","text":"<ul> <li>Overview</li> <li>Getting-Started</li> <li>Architecture-Overview</li> <li>System-Components</li> <li>Technology-Stack</li> <li>Request-Processing-Pipeline</li> <li>Application-Bootstrap</li> <li>Routing-System</li> <li>Public-Routes</li> <li>Protected-Routes</li> <li>API-Endpoints</li> <li>Authentication-&amp;-Authorization</li> <li>User-Registration-&amp;-Login</li> <li>JWT-Token-Management</li> <li>verifyToken-Middleware</li> <li>verifyAdmin-Middleware</li> <li>Security-Measures</li> <li>Real-time-Communication-System</li> <li>Socket.IO-Server-Setup</li> <li>WebSocket-Authentication</li> <li>Room-Management</li> <li>Message-Handling</li> <li>Product-Management</li> <li>Support-Chat-System</li> <li>User-Chat-Interface</li> <li>Admin-Chat-Interface</li> <li>PDF-Generation</li> <li>Puppeteer-PDF-Generation</li> <li>PDFKit-PDF-Generation</li> <li>Internationalization-(i18n)</li> <li>Template-Structure</li> <li>Partial-Components</li> <li>Page-Views</li> <li>Static-Assets-&amp;-Styling</li> <li>Database-Schema</li> <li>usuarios-Table</li> <li>productos-Table</li> <li>mensajes-Table</li> <li>API-Reference</li> <li>HTTP-Endpoints</li> <li>WebSocket-Events</li> <li>Deployment-&amp;-Configuration</li> </ul>"},{"location":"API-Endpoints.html","title":"API Endpoints","text":"<p>Relevant source files * src/middlewares/verifyAdmin.js * src/router.js</p>"},{"location":"API-Endpoints.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the RESTful API endpoints in the registro-sesiones application that return JSON data for programmatic consumption. These endpoints primarily support the real-time chat system by providing message history and conversation management functionality.</p> <p>For HTTP routes that render HTML views, see Public Routes and Protected Routes. For WebSocket-based real-time messaging events, see WebSocket Events.</p>"},{"location":"API-Endpoints.html#overview","title":"Overview","text":"<p>The application exposes three JSON API endpoints, all located in src/router.js</p> <p>and protected by authentication middleware:</p> Endpoint Method Authentication Purpose <code>/api/mensajes</code> GET Admin only (<code>verifyAdmin</code>) Retrieve message history for a specific user <code>/api/mensajes/mios</code> GET Authenticated user (<code>verifyToken</code>) Retrieve all messages for the current user <code>/api/usuarios-conversaciones</code> GET Admin only (<code>verifyAdmin</code>) List all users with active conversations <p>All endpoints return JSON responses and query the <code>mensajes</code> table in the MySQL database.</p> <p>Sources: src/router.js L229-L315</p>"},{"location":"API-Endpoints.html#api-architecture","title":"API Architecture","text":"<pre><code>flowchart TD\n\nAdminUI[\"Admin UI&lt;br&gt;(views/soporte.ejs)\"]\nUserUI[\"User UI&lt;br&gt;(views/soporte.ejs)\"]\nGetMessages[\"GET /api/mensajes&lt;br&gt;Line 229\"]\nGetMyMessages[\"GET /api/mensajes/mios&lt;br&gt;Line 256\"]\nGetConversations[\"GET /api/usuarios-conversaciones&lt;br&gt;Line 283\"]\nVerifyToken[\"verifyToken&lt;br&gt;src/middlewares/verifyToken.js\"]\nVerifyAdmin[\"verifyAdmin&lt;br&gt;src/middlewares/verifyAdmin.js\"]\nMensajesTable[\"mensajes table&lt;br&gt;(de_usuario, para_usuario, mensaje, fecha)\"]\nUsuariosTable[\"usuarios table&lt;br&gt;(usuario, rol)\"]\nQueryDB[\"db.query()\"]\n\nAdminUI --&gt; GetMessages\nAdminUI --&gt; GetConversations\nUserUI --&gt; GetMyMessages\nGetMessages --&gt; VerifyAdmin\nGetConversations --&gt; VerifyAdmin\nGetMyMessages --&gt; VerifyToken\nVerifyToken --&gt; QueryDB\nQueryDB --&gt; MensajesTable\nQueryDB --&gt; UsuariosTable\nMensajesTable --&gt; AdminUI\nMensajesTable --&gt; UserUI\nUsuariosTable --&gt; AdminUI\n\nsubgraph subGraph3 [\"Database Layer\"]\n    MensajesTable\n    UsuariosTable\nend\n\nsubgraph subGraph2 [\"Middleware Stack\"]\n    VerifyToken\n    VerifyAdmin\n    VerifyAdmin --&gt; VerifyToken\nend\n\nsubgraph subGraph1 [\"API Endpoints - src/router.js\"]\n    GetMessages\n    GetMyMessages\n    GetConversations\nend\n\nsubgraph subGraph0 [\"Client Layer\"]\n    AdminUI\n    UserUI\nend</code></pre> <p>Sources: src/router.js L229-L315</p> <p>src/middlewares/verifyAdmin.js L1-L45</p>"},{"location":"API-Endpoints.html#message-retrieval-endpoints","title":"Message Retrieval Endpoints","text":""},{"location":"API-Endpoints.html#get-apimensajes-admin","title":"GET /api/mensajes (Admin)","text":"<p>Retrieves the complete message history for a conversation with a specific user. This endpoint is restricted to administrators and requires a query parameter to specify the target user.</p> <p>Authentication: Requires <code>verifyAdmin</code> middleware src/middlewares/verifyAdmin.js L24-L42</p> <p>Request Format:</p> <pre><code>GET /api/mensajes?con=username\n</code></pre> <p>Query Parameters:</p> Parameter Type Required Description <code>con</code> string Yes Username of the conversation participant <p>Implementation Details:</p> <p>The endpoint executes a SQL query that retrieves all messages where the specified user is either the sender or recipient, ordered chronologically:</p> <p>src/router.js L236-L242</p> <pre><code>SELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <p>Response Format:</p> <pre><code>[\n  {\n    \"de_usuario\": \"user1\",\n    \"para_usuario\": \"admin1\",\n    \"mensaje\": \"Hello, I need help\",\n    \"fecha\": \"2024-01-15T10:30:00.000Z\"\n  },\n  {\n    \"de_usuario\": \"admin1\",\n    \"para_usuario\": \"user1\",\n    \"mensaje\": \"How can I help you?\",\n    \"fecha\": \"2024-01-15T10:31:00.000Z\"\n  }\n]\n</code></pre> <p>Error Responses:</p> Status Code Condition Response Body 400 Missing <code>con</code> parameter <code>{\"error\": \"Falta el par\u00e1metro ?con=usuario\"}</code> 403 Not an admin <code>{\"error\": \"Acceso solo para administradores\"}</code> 500 Database error <code>{\"error\": \"Error al obtener mensajes\"}</code> <p>Sources: src/router.js L229-L253</p>"},{"location":"API-Endpoints.html#get-apimensajesmios-user","title":"GET /api/mensajes/mios (User)","text":"<p>Retrieves all messages for the currently authenticated user. This endpoint is accessible to any authenticated user and automatically uses the username from the JWT token.</p> <p>Authentication: Requires <code>verifyToken</code> middleware src/middlewares/verifyToken.js</p> <p>Request Format:</p> <pre><code>GET /api/mensajes/mios\n</code></pre> <p>Query Parameters: None (user identity extracted from JWT)</p> <p>Implementation Details:</p> <p>The endpoint extracts the username from <code>req.user.user</code> (populated by <code>verifyToken</code>) and queries for all messages involving that user:</p> <p>src/router.js L256-L269</p> <p>The SQL query is identical in structure to the admin endpoint but uses the authenticated user's identity:</p> <pre><code>SELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <p>Response Format:</p> <pre><code>[\n  {\n    \"de_usuario\": \"currentUser\",\n    \"para_usuario\": \"admin1\",\n    \"mensaje\": \"I have a question\",\n    \"fecha\": \"2024-01-15T14:20:00.000Z\"\n  },\n  {\n    \"de_usuario\": \"admin1\",\n    \"para_usuario\": \"currentUser\",\n    \"mensaje\": \"Sure, ask away\",\n    \"fecha\": \"2024-01-15T14:21:00.000Z\"\n  }\n]\n</code></pre> <p>Error Responses:</p> Status Code Condition Response Body 403 No valid token or user not found <code>{\"error\": \"No autorizado\"}</code> 500 Database error <code>{\"error\": \"Error interno\"}</code> <p>Sources: src/router.js L256-L280</p>"},{"location":"API-Endpoints.html#conversation-management-endpoint","title":"Conversation Management Endpoint","text":""},{"location":"API-Endpoints.html#get-apiusuarios-conversaciones-admin","title":"GET /api/usuarios-conversaciones (Admin)","text":"<p>Returns a list of all non-admin users who have active conversations with administrators. This endpoint supports the admin UI's conversation list feature.</p> <p>Authentication: Requires <code>verifyAdmin</code> middleware src/middlewares/verifyAdmin.js L24-L42</p> <p>Request Format:</p> <pre><code>GET /api/usuarios-conversaciones\n</code></pre> <p>Query Parameters: None</p> <p>Implementation Details:</p> <p>The endpoint uses a complex SQL query with <code>UNION</code> to find all distinct users who have either sent messages to admins or received messages from admins:</p> <p>src/router.js L292-L304</p> <pre><code>SELECT DISTINCT usuario\nFROM (\n  SELECT de_usuario AS usuario FROM mensajes\n  WHERE para_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n\n  UNION\n\n  SELECT para_usuario AS usuario FROM mensajes\n  WHERE de_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n) AS conversaciones\nWHERE usuario NOT IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n</code></pre> <p>The query:</p> <ol> <li>Finds users who sent messages to admins (<code>de_usuario</code>)</li> <li>Finds users who received messages from admins (<code>para_usuario</code>)</li> <li>Combines both sets with <code>UNION</code> (eliminating duplicates)</li> <li>Filters out admin users themselves</li> <li>Returns distinct usernames</li> </ol> <p>The results are then transformed into a simple array of usernames:</p> <p>src/router.js L312-L313</p> <p>Response Format:</p> <pre><code>[\n  \"user1\",\n  \"user2\",\n  \"user3\"\n]\n</code></pre> <p>Error Responses:</p> Status Code Condition Response Body 403 Not an admin <code>{\"error\": \"Acceso solo para administradores\"}</code> 500 Database error <code>{\"error\": \"Error interno\"}</code> <p>Sources: src/router.js L283-L315</p>"},{"location":"API-Endpoints.html#authentication-flow-diagram","title":"Authentication Flow Diagram","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant src/router.js\n  participant verifyAdmin MW\n  participant verifyToken MW\n  participant jsonwebtoken\n  participant MySQL database/db.js\n\n  Client-&gt;&gt;src/router.js: GET /api/mensajes?con=user1\n  src/router.js-&gt;&gt;verifyAdmin MW: Execute middleware\n  verifyAdmin MW-&gt;&gt;verifyAdmin MW: Extract token from req.cookies.token\n  loop [No token present]\n    verifyAdmin MW--&gt;&gt;Client: 403 Acceso denegado\n    verifyAdmin MW-&gt;&gt;jsonwebtoken: jwt.verify(token, JWT_SECRET)\n    jsonwebtoken--&gt;&gt;verifyAdmin MW: Error\n    verifyAdmin MW--&gt;&gt;Client: 403 Token inv\u00e1lido\n    jsonwebtoken--&gt;&gt;verifyAdmin MW: decoded payload\n    verifyAdmin MW-&gt;&gt;verifyAdmin MW: Check decoded.rol !== \"admin\"\n    verifyAdmin MW--&gt;&gt;Client: 403 Acceso solo para administradores\n    jsonwebtoken--&gt;&gt;verifyAdmin MW: Valid admin token\n    verifyAdmin MW-&gt;&gt;verifyAdmin MW: Set req.user = decoded\n    verifyAdmin MW-&gt;&gt;src/router.js: next()\n    src/router.js-&gt;&gt;src/router.js: Extract req.query.con\n    src/router.js--&gt;&gt;Client: 400 Falta el par\u00e1metro ?con=usuario\n  end\n  src/router.js-&gt;&gt;MySQL database/db.js: SELECT * FROM mensajes WHERE...\n  MySQL database/db.js--&gt;&gt;src/router.js: results array\n  src/router.js-&gt;&gt;src/router.js: res.json(results)\n  src/router.js--&gt;&gt;Client: 200 JSON response</code></pre> <p>Sources: src/router.js L229-L253</p> <p>src/middlewares/verifyAdmin.js L24-L42</p>"},{"location":"API-Endpoints.html#api-request-response-flow","title":"API Request-Response Flow","text":"<pre><code>flowchart TD\n\nStart[\"API Request\"]\nAuthCheck[\"Authentication&lt;br&gt;Required?\"]\nAdminMW[\"verifyAdmin MW&lt;br&gt;Line 229, 283\"]\nTokenMW[\"verifyToken MW&lt;br&gt;Line 256\"]\nTokenValidation[\"Validate JWT&lt;br&gt;from cookie\"]\nRoleCheck[\"Admin role?\"]\nReturn403[\"403 Forbidden&lt;br&gt;Acceso solo para&lt;br&gt;administradores\"]\nParamCheck[\"Required&lt;br&gt;Parameters?\"]\nReturn400[\"400 Bad Request&lt;br&gt;Falta el par\u00e1metro\"]\nDBQuery[\"db.query()&lt;br&gt;Execute SQL\"]\nDBError[\"Database&lt;br&gt;Error?\"]\nReturn500[\"500 Internal Error&lt;br&gt;Error al obtener mensajes\"]\nTransform[\"Transform results&lt;br&gt;to JSON\"]\nReturn200[\"200 OK&lt;br&gt;res.json(results)\"]\nEnd[\"Send Response\"]\n\nStart --&gt; AuthCheck\nAuthCheck --&gt; AdminMW\nAuthCheck --&gt; TokenMW\nAdminMW --&gt; TokenValidation\nTokenMW --&gt; TokenValidation\nTokenValidation --&gt; RoleCheck\nRoleCheck --&gt; Return403\nRoleCheck --&gt; ParamCheck\nParamCheck --&gt; Return400\nParamCheck --&gt; DBQuery\nDBQuery --&gt; DBError\nDBError --&gt; Return500\nDBError --&gt; Transform\nTransform --&gt; Return200\nReturn403 --&gt; End\nReturn400 --&gt; End\nReturn500 --&gt; End\nReturn200 --&gt; End</code></pre> <p>Sources: src/router.js L229-L315</p>"},{"location":"API-Endpoints.html#database-queries","title":"Database Queries","text":""},{"location":"API-Endpoints.html#message-query-pattern","title":"Message Query Pattern","text":"<p>Both <code>/api/mensajes</code> and <code>/api/mensajes/mios</code> use the same SQL query structure:</p> Field Purpose <code>de_usuario</code> Message sender username (FK to <code>usuarios.usuario</code>) <code>para_usuario</code> Message recipient username (FK to <code>usuarios.usuario</code>) <code>mensaje</code> Message content (TEXT) <code>fecha</code> Message timestamp (DATETIME) <p>The query retrieves messages bidirectionally:</p> <ul> <li>Where the user is the sender (<code>de_usuario = ?</code>)</li> <li>OR where the user is the recipient (<code>para_usuario = ?</code>)</li> </ul> <p>Results are ordered by <code>fecha ASC</code> to maintain chronological order.</p> <p>Sources: src/router.js L236-L242</p> <p>src/router.js L263-L269</p>"},{"location":"API-Endpoints.html#conversation-list-query","title":"Conversation List Query","text":"<p>The <code>/api/usuarios-conversaciones</code> endpoint uses a more complex query strategy:</p> <ol> <li>Subquery 1: Find users who sent messages to any admin <code>sql SELECT de_usuario AS usuario FROM mensajes WHERE para_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')</code></li> <li>Subquery 2: Find users who received messages from any admin <code>sql SELECT para_usuario AS usuario FROM mensajes WHERE de_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')</code></li> <li>Union: Combine both result sets and eliminate duplicates</li> <li>Filter: Exclude admin users from the final list <code>sql WHERE usuario NOT IN (SELECT usuario FROM usuarios WHERE rol = 'admin')</code></li> </ol> <p>This ensures the endpoint returns only regular users who have had any interaction with the admin team.</p> <p>Sources: src/router.js L292-L304</p>"},{"location":"API-Endpoints.html#error-handling","title":"Error Handling","text":"<p>All API endpoints implement consistent error handling patterns:</p>"},{"location":"API-Endpoints.html#error-response-structure","title":"Error Response Structure","text":"<pre><code>{\n  \"error\": \"Error message in Spanish\"\n}\n</code></pre>"},{"location":"API-Endpoints.html#common-error-scenarios","title":"Common Error Scenarios","text":"Error Type Status Code Handling Location Missing JWT token 403 <code>verifyToken</code> / <code>verifyAdmin</code> middleware Invalid JWT token 403 <code>verifyToken</code> / <code>verifyAdmin</code> middleware Insufficient permissions 403 <code>verifyAdmin</code> middleware Missing query parameter 400 Route handler validation Database query failure 500 Route handler catch block"},{"location":"API-Endpoints.html#database-error-handling","title":"Database Error Handling","text":"<p>All endpoints use the same pattern for database error handling:</p> <p>src/router.js L244-L248</p> <pre><code>db.query(sql, [params], (err, results) =&gt; {\n    if (err) {\n        console.error(\"\u274c Error al consultar mensajes:\", err);\n        return res.status(500).json({ error: \"Error al obtener mensajes\" });\n    }\n    res.json(results);\n});\n</code></pre> <p>The pattern:</p> <ol> <li>Logs the error to console with emoji prefix for visibility</li> <li>Returns a 500 status code</li> <li>Sends a generic error message (does not leak internal details)</li> <li>Prevents further execution with <code>return</code></li> </ol> <p>Sources: src/router.js L244-L252</p> <p>src/router.js L271-L279</p> <p>src/router.js L306-L314</p>"},{"location":"API-Endpoints.html#integration-with-socketio","title":"Integration with Socket.IO","text":"<p>These API endpoints complement the real-time WebSocket messaging system by providing historical message data:</p> <pre><code>flowchart TD\n\nSocketIO[\"Socket.IO&lt;br&gt;src/sockets/socketHandler.js\"]\nMensajePrivado[\"mensaje_privado event\"]\nGetMessages[\"GET /api/mensajes\"]\nGetMyMessages[\"GET /api/mensajes/mios\"]\nGetConversations[\"GET /api/usuarios-conversaciones\"]\nMensajesDB[\"mensajes table\"]\n\nMensajePrivado --&gt; MensajesDB\nGetMessages --&gt; MensajesDB\nGetMyMessages --&gt; MensajesDB\nGetConversations --&gt; MensajesDB\nMensajesDB --&gt; GetMessages\nMensajesDB --&gt; GetMyMessages\nMensajesDB --&gt; GetConversations\n\nsubgraph Database [\"Database\"]\n    MensajesDB\nend\n\nsubgraph subGraph1 [\"API Layer\"]\n    GetMessages\n    GetMyMessages\n    GetConversations\nend\n\nsubgraph subGraph0 [\"Real-time Layer\"]\n    SocketIO\n    MensajePrivado\n    SocketIO --&gt; MensajePrivado\nend</code></pre> <p>Workflow:</p> <ol> <li>New messages are sent via WebSocket <code>mensaje_privado</code> event</li> <li>Socket handler persists messages to <code>mensajes</code> table</li> <li>When user loads chat UI, API endpoints retrieve message history</li> <li>Subsequent messages arrive in real-time via WebSocket</li> <li>Admin can switch conversations using <code>/api/usuarios-conversaciones</code> list</li> </ol> <p>Sources: src/router.js L229-L315</p> <p>src/sockets/socketHandler.js</p>"},{"location":"API-Endpoints.html#usage-examples","title":"Usage Examples","text":""},{"location":"API-Endpoints.html#admin-loading-conversation-list","title":"Admin Loading Conversation List","text":"<pre><code>// Called when admin opens support chat interface\nfetch('/api/usuarios-conversaciones', {\n    credentials: 'include'  // Include JWT cookie\n})\n.then(res =&gt; res.json())\n.then(users =&gt; {\n    // users = [\"user1\", \"user2\", \"user3\"]\n    // Populate conversation list in UI\n});\n</code></pre>"},{"location":"API-Endpoints.html#admin-loading-specific-conversation","title":"Admin Loading Specific Conversation","text":"<pre><code>// Called when admin clicks on a user in the conversation list\nfunction loadConversation(username) {\n    fetch(`/api/mensajes?con=${username}`, {\n        credentials: 'include'\n    })\n    .then(res =&gt; res.json())\n    .then(messages =&gt; {\n        // messages = [{de_usuario, para_usuario, mensaje, fecha}, ...]\n        // Display message history in chat window\n    });\n}\n</code></pre>"},{"location":"API-Endpoints.html#user-loading-own-messages","title":"User Loading Own Messages","text":"<pre><code>// Called when regular user opens support chat\nfetch('/api/mensajes/mios', {\n    credentials: 'include'\n})\n.then(res =&gt; res.json())\n.then(messages =&gt; {\n    // Display all messages with admin(s)\n});\n</code></pre> <p>Sources: src/router.js L229-L315</p>"},{"location":"API-Reference.html","title":"API Reference","text":"<p>Relevant source files * src/router.js * src/sockets/socketHandler.js</p> <p>This document provides a comprehensive reference for all API endpoints and real-time communication events in the registro-sesiones system. The API consists of two primary communication channels: traditional HTTP REST endpoints for request-response operations and WebSocket events for real-time bidirectional messaging.</p> <p>For detailed documentation of individual HTTP endpoints with request/response schemas, see HTTP Endpoints. For WebSocket event specifications, see WebSocket Events.</p>"},{"location":"API-Reference.html#authentication","title":"Authentication","text":"<p>Both HTTP and WebSocket APIs use JWT (JSON Web Token) authentication. Tokens are stored in HTTP-only cookies named <code>token</code> and are validated on each request.</p> <p>Token Structure:</p> <ul> <li>Signing Algorithm: HS256 (HMAC with SHA-256)</li> <li>Secret: <code>process.env.JWT_SECRET</code></li> <li>Expiration: 1 hour (3600 seconds)</li> <li>Storage: HTTP-only cookie with <code>maxAge: 3600000</code> milliseconds</li> <li>Cookie Name: <code>token</code></li> </ul> <p>Token Payload:</p> <pre><code>{\n  user: \"username\",      // usuario field from database\n  name: \"display name\",  // nombre field from database\n  rol: \"admin|user\",     // rol field from database\n  imagen: \"filename.jpg\" // imagen field from database\n}\n</code></pre> <p>HTTP Authentication Flow:</p> <pre><code>sequenceDiagram\n  participant Client\n  participant src/router.js\n  participant verifyToken Middleware\n  participant verifyAdmin Middleware\n  participant Route Handler\n  participant MySQL Database\n\n  Client-&gt;&gt;src/router.js: POST /auth (credentials)\n  src/router.js-&gt;&gt;MySQL Database: SELECT FROM usuarios\n  MySQL Database--&gt;&gt;src/router.js: User record\n  src/router.js-&gt;&gt;src/router.js: bcrypt.compare(password)\n  src/router.js-&gt;&gt;src/router.js: jwt.sign(payload)\n  src/router.js--&gt;&gt;Client: Set-Cookie: token=JWT\n  note over Client,Route Handler: Subsequent authenticated request\n  Client-&gt;&gt;src/router.js: GET /admin (with cookie)\n  src/router.js-&gt;&gt;verifyToken Middleware: Check token\n  verifyToken Middleware-&gt;&gt;verifyToken Middleware: jwt.verify(token)\n  verifyToken Middleware-&gt;&gt;Route Handler: req.user = payload\n  Route Handler-&gt;&gt;MySQL Database: Query data\n  MySQL Database--&gt;&gt;Route Handler: Results\n  Route Handler--&gt;&gt;Client: Response</code></pre> <p>WebSocket Authentication Flow:</p> <pre><code>sequenceDiagram\n  participant Socket.IO Client\n  participant io.use() Middleware\n  participant setupSocket Handler\n  participant Socket Rooms\n\n  Socket.IO Client-&gt;&gt;io.use() Middleware: Connect (HTTP handshake with cookie)\n  io.use() Middleware-&gt;&gt;io.use() Middleware: Extract token from cookie\n  io.use() Middleware-&gt;&gt;io.use() Middleware: jwt.verify(token, JWT_SECRET)\n  loop [User is Admin]\n    io.use() Middleware-&gt;&gt;setupSocket Handler: socket.request.user = decoded\n    setupSocket Handler-&gt;&gt;Socket Rooms: socket.join(\"user:username\")\n    setupSocket Handler-&gt;&gt;Socket Rooms: socket.join(\"admins\")\n    setupSocket Handler--&gt;&gt;Socket.IO Client: Connection established\n    io.use() Middleware--&gt;&gt;Socket.IO Client: Error(\"Token inv\u00e1lido\")\n  end</code></pre> <p>Sources: src/router.js L532-L601</p> <p>src/router.js L61-L63</p> <p>src/sockets/socketHandler.js L6-L32</p>"},{"location":"API-Reference.html#http-api-overview","title":"HTTP API Overview","text":"<p>The HTTP API is organized into distinct functional areas. All routes are defined in src/router.js</p> <p>and use Express.js routing.</p>"},{"location":"API-Reference.html#endpoint-categories","title":"Endpoint Categories","text":"Category Routes Authentication Description Public Pages <code>GET /</code>, <code>GET /login</code>, <code>GET /registro</code> None Landing page and authentication forms Authentication <code>POST /auth</code>, <code>POST /register</code> None (creates token) User login and registration Product Management <code>GET /admin</code>, <code>GET /create</code>, <code>GET /edit/:id</code>, <code>GET /delete/:id</code>, <code>POST /save</code>, <code>POST /update</code> <code>verifyToken</code> CRUD operations for products Support Chat <code>GET /soporte</code> <code>verifyToken</code> Real-time chat interface Message APIs <code>GET /api/mensajes</code>, <code>GET /api/mensajes/mios</code>, <code>GET /api/usuarios-conversaciones</code> <code>verifyToken</code> or <code>verifyAdmin</code> Message history retrieval PDF Generation <code>GET /pdf/descargar</code>, <code>GET /pdfkit/descargar</code> <code>verifyToken</code> Product list export as PDF Localization <code>GET /set-lang/:lang</code> None Language switching Session <code>GET /logout</code> None Token removal"},{"location":"API-Reference.html#api-endpoint-structure","title":"API Endpoint Structure","text":"<pre><code>flowchart TD\n\nHome[\"GET /&lt;br&gt;src/router.js:59-74\"]\nLogin[\"GET /login&lt;br&gt;src/router.js:75-77\"]\nRegister[\"GET /registro&lt;br&gt;src/router.js:78-80\"]\nSetLang[\"GET /set-lang/:lang&lt;br&gt;src/router.js:398-407\"]\nAuthPost[\"POST /auth&lt;br&gt;src/router.js:532-601&lt;br&gt;limiter middleware\"]\nRegisterPost[\"POST /register&lt;br&gt;src/router.js:414-484&lt;br&gt;upload.single + validators\"]\nLogout[\"GET /logout&lt;br&gt;src/router.js:215-218\"]\nAdmin[\"GET /admin&lt;br&gt;src/router.js:119-134\"]\nSoporte[\"GET /soporte&lt;br&gt;src/router.js:220-227\"]\nCreate[\"GET /create&lt;br&gt;src/router.js:153-155\"]\nEdit[\"GET /edit/:id&lt;br&gt;src/router.js:186-196\"]\nDelete[\"GET /delete/:id&lt;br&gt;src/router.js:198-208\"]\nPDFAdmin[\"GET /pdfAdmin&lt;br&gt;src/router.js:136-151\"]\nPDFPuppeteer[\"GET /pdf/descargar&lt;br&gt;src/router.js:317-353\"]\nPDFKit[\"GET /pdfkit/descargar&lt;br&gt;src/router.js:355-396\"]\nSavePost[\"POST /save&lt;br&gt;src/router.js:603&lt;br&gt;calls crud.save\"]\nUpdatePost[\"POST /update&lt;br&gt;src/router.js:604&lt;br&gt;calls crud.update\"]\nMensajesMios[\"GET /api/mensajes/mios&lt;br&gt;src/router.js:256-280\"]\nAPIMensajes[\"GET /api/mensajes?con=user&lt;br&gt;src/router.js:229-253\"]\nAPIConversaciones[\"GET /api/usuarios-conversaciones&lt;br&gt;src/router.js:283-315\"]\nProductosDB[\"productos table\"]\nMensajesDB[\"mensajes table\"]\nUsuariosDB[\"usuarios table\"]\n\nAuthPost --&gt; UsuariosDB\nRegisterPost --&gt; UsuariosDB\nAdmin --&gt; ProductosDB\nPDFAdmin --&gt; ProductosDB\nPDFPuppeteer --&gt; ProductosDB\nPDFKit --&gt; ProductosDB\nSavePost --&gt; ProductosDB\nUpdatePost --&gt; ProductosDB\nEdit --&gt; ProductosDB\nDelete --&gt; ProductosDB\nMensajesMios --&gt; MensajesDB\nAPIMensajes --&gt; MensajesDB\nAPIConversaciones --&gt; MensajesDB\nAPIConversaciones --&gt; UsuariosDB\n\nsubgraph subGraph4 [\"Database Operations\"]\n    ProductosDB\n    MensajesDB\n    UsuariosDB\nend\n\nsubgraph subGraph3 [\"Admin-Only Routes (verifyAdmin)\"]\n    APIMensajes\n    APIConversaciones\nend\n\nsubgraph subGraph2 [\"Protected Routes (verifyToken)\"]\n    Admin\n    Soporte\n    Create\n    Edit\n    Delete\n    PDFAdmin\n    PDFPuppeteer\n    PDFKit\n    SavePost\n    UpdatePost\n    MensajesMios\nend\n\nsubgraph subGraph1 [\"Authentication Routes\"]\n    AuthPost\n    RegisterPost\n    Logout\nend\n\nsubgraph subGraph0 [\"Public Routes (No Auth)\"]\n    Home\n    Login\n    Register\n    SetLang\nend</code></pre> <p>Sources: src/router.js L1-L607</p>"},{"location":"API-Reference.html#middleware-stack-by-route-type","title":"Middleware Stack by Route Type","text":"<pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nHelmet[\"helmet\"]\nRateLimit[\"express-rate-limit\"]\nCookieParser[\"cookie-parser\"]\nBodyParsers[\"urlencoded + json\"]\nSession[\"express-session\"]\nI18n[\"i18n.init\"]\nAuthLimiter[\"authLimiter&lt;br&gt;POST /auth\"]\nUpload[\"multer.single&lt;br&gt;POST /register\"]\nValidators[\"express-validator&lt;br&gt;POST /register\"]\nVerifyToken[\"verifyToken&lt;br&gt;Protected routes\"]\nVerifyAdmin[\"verifyAdmin&lt;br&gt;Admin routes\"]\nPublicHandler[\"Public Route Handler\"]\nAuthHandler[\"Authentication Handler\"]\nProtectedHandler[\"Protected Route Handler\"]\nAdminHandler[\"Admin Route Handler\"]\nRouteMatch[\"Route Type?\"]\n\nRequest --&gt; Helmet\nI18n --&gt; RouteMatch\nRouteMatch --&gt; PublicHandler\nRouteMatch --&gt; AuthLimiter\nRouteMatch --&gt; Upload\nRouteMatch --&gt; VerifyToken\nRouteMatch --&gt; VerifyToken\nAuthLimiter --&gt; AuthHandler\nValidators --&gt; AuthHandler\nVerifyToken --&gt; ProtectedHandler\nVerifyAdmin --&gt; AdminHandler\n\nsubgraph subGraph2 [\"Route Handlers\"]\n    PublicHandler\n    AuthHandler\n    ProtectedHandler\n    AdminHandler\nend\n\nsubgraph subGraph1 [\"Route-Specific Middleware\"]\n    AuthLimiter\n    Upload\n    Validators\n    VerifyToken\n    VerifyAdmin\n    Upload --&gt; Validators\n    VerifyToken --&gt; VerifyAdmin\nend\n\nsubgraph subGraph0 [\"Global Middleware (index.js)\"]\n    Helmet\n    RateLimit\n    CookieParser\n    BodyParsers\n    Session\n    I18n\n    Helmet --&gt; RateLimit\n    RateLimit --&gt; CookieParser\n    CookieParser --&gt; BodyParsers\n    BodyParsers --&gt; Session\n    Session --&gt; I18n\nend</code></pre> <p>Sources: src/router.js L16-L21</p> <p>src/router.js L414-L428</p> <p>src/router.js L532</p> <p>src/router.js L119</p> <p>src/router.js L229</p>"},{"location":"API-Reference.html#websocket-api-overview","title":"WebSocket API Overview","text":"<p>The WebSocket API provides real-time bidirectional communication for the support chat system. The implementation uses Socket.IO library and is configured in src/sockets/socketHandler.js</p>"},{"location":"API-Reference.html#websocket-event-types","title":"WebSocket Event Types","text":"Event Name Direction Auth Required Description <code>connection</code> Server \u2192 Handler Yes (JWT via cookie) Initial socket connection established <code>mensaje_privado</code> Client \u2192 Server Yes User sends a private message <code>mensaje_recibido</code> Server \u2192 Client Yes Server broadcasts received message to recipients <code>disconnect</code> Client \u2192 Server Yes Socket connection closed"},{"location":"API-Reference.html#room-based-routing-architecture","title":"Room-Based Routing Architecture","text":"<pre><code>flowchart TD\n\nUserA[\"User: alice&lt;br&gt;Socket Connection\"]\nUserB[\"User: bob&lt;br&gt;Socket Connection\"]\nAdminX[\"Admin: admin1&lt;br&gt;Socket Connection\"]\nAdminY[\"Admin: admin2&lt;br&gt;Socket Connection\"]\nPersonalA[\"user:alice&lt;br&gt;Personal Room\"]\nPersonalB[\"user:bob&lt;br&gt;Personal Room\"]\nPersonalX[\"user:admin1&lt;br&gt;Personal Room\"]\nPersonalY[\"user:admin2&lt;br&gt;Personal Room\"]\nAdminRoom[\"admins&lt;br&gt;Collective Room\"]\nConnection[\"connection event&lt;br&gt;src/sockets/socketHandler.js:36\"]\nMensajePrivado[\"mensaje_privado event&lt;br&gt;src/sockets/socketHandler.js:45\"]\nDisconnect[\"disconnect event&lt;br&gt;src/sockets/socketHandler.js:65\"]\nMensajesTable[\"mensajes table\"]\n\nUserA --&gt; PersonalA\nUserB --&gt; PersonalB\nAdminX --&gt; PersonalX\nAdminX --&gt; AdminRoom\nAdminY --&gt; PersonalY\nAdminY --&gt; AdminRoom\nConnection --&gt; PersonalA\nConnection --&gt; AdminRoom\nMensajePrivado --&gt; PersonalA\nMensajePrivado --&gt; PersonalB\nMensajePrivado --&gt; AdminRoom\nMensajePrivado --&gt; MensajesTable\nUserA --&gt; MensajePrivado\nAdminX --&gt; MensajePrivado\n\nsubgraph Database [\"Database\"]\n    MensajesTable\nend\n\nsubgraph subGraph2 [\"setupSocket Handler\"]\n    Connection\n    MensajePrivado\n    Disconnect\nend\n\nsubgraph subGraph1 [\"Socket Rooms (io.to)\"]\n    PersonalA\n    PersonalB\n    PersonalX\n    PersonalY\n    AdminRoom\nend\n\nsubgraph subGraph0 [\"Client Connections\"]\n    UserA\n    UserB\n    AdminX\n    AdminY\nend</code></pre> <p>Sources: src/sockets/socketHandler.js L4-L69</p>"},{"location":"API-Reference.html#event-flow-mensaje_privado","title":"Event Flow: mensaje_privado","text":"<p>When a user sends a message via <code>socket.emit(\"mensaje_privado\", {para, mensaje})</code>, the following sequence occurs:</p> <ol> <li>Server receives event src/sockets/socketHandler.js L45-L63</li> <li>Extracts sender from <code>socket.request.user.user</code> (JWT payload)</li> <li>Emits to recipient's room via <code>io.to(</code>user:${para}<code>).emit(\"mensaje_recibido\", ...)</code></li> <li>Emits to admins room if sender is not admin via <code>io.to(\"admins\").emit(...)</code> src/sockets/socketHandler.js L50-L52</li> <li>Persists to database via <code>INSERT INTO mensajes</code> src/sockets/socketHandler.js L55-L62</li> </ol> <pre><code>sequenceDiagram\n  participant User Socket\n  participant (username: bob)\n  participant socketHandler.js\n  participant mensaje_privado\n  participant Socket.IO Rooms\n  participant mensajes table\n  participant Admin Socket\n  participant (in 'admins' room)\n  participant Recipient Socket\n  participant (username: alice)\n\n  User Socket-&gt;&gt;socketHandler.js: emit(\"mensaje_privado\", {para: \"alice\", mensaje: \"Hello\"})\n  socketHandler.js-&gt;&gt;socketHandler.js: Extract de = bob from JWT\n  socketHandler.js-&gt;&gt;Socket.IO Rooms: io.to(\"user:alice\")\n  Socket.IO Rooms-&gt;&gt;Recipient Socket: emit(\"mensaje_recibido\", {de: \"bob\", mensaje: \"Hello\"})\n  socketHandler.js-&gt;&gt;Socket.IO Rooms: io.to(\"admins\")\n  Socket.IO Rooms-&gt;&gt;Admin Socket: emit(\"mensaje_recibido\", {de: \"bob\", mensaje: \"Hello\"})\n  socketHandler.js-&gt;&gt;mensajes table: INSERT (bob, alice, Hello)\n  mensajes table--&gt;&gt;socketHandler.js: Success</code></pre> <p>Sources: src/sockets/socketHandler.js L45-L63</p>"},{"location":"API-Reference.html#response-formats","title":"Response Formats","text":""},{"location":"API-Reference.html#http-json-responses","title":"HTTP JSON Responses","text":"<p>API endpoints under <code>/api/*</code> return JSON data:</p> <p>Success Response Structure:</p> <pre><code>[\n  {\n    \"de_usuario\": \"username\",\n    \"para_usuario\": \"recipient\",\n    \"mensaje\": \"message text\",\n    \"fecha\": \"2024-01-01 12:00:00\"\n  }\n]\n</code></pre> <p>Error Response Structure:</p> <pre><code>{\n  \"error\": \"Error description message\"\n}\n</code></pre> <p>Sources: src/router.js L251</p> <p>src/router.js L233</p> <p>src/router.js L247</p>"},{"location":"API-Reference.html#http-view-responses","title":"HTTP View Responses","text":"<p>Most GET routes render EJS templates and return HTML:</p> <ul> <li>Content-Type: <code>text/html</code></li> <li>Variables passed via <code>res.render(view, data)</code></li> <li>Common data includes: <code>user</code>, <code>login</code>, <code>rol</code>, <code>productos</code>, <code>mensajes</code></li> </ul> <p>Sources: src/router.js L64-L73</p> <p>src/router.js L126-L132</p>"},{"location":"API-Reference.html#pdf-responses","title":"PDF Responses","text":"<p>PDF generation endpoints return binary PDF data:</p> <ul> <li>Content-Type: <code>application/pdf</code></li> <li>Content-Disposition: <code>attachment; filename=\"productos.pdf\"</code></li> <li>Response body: PDF binary buffer</li> </ul> <p>Sources: src/router.js L344-L346</p> <p>src/router.js L364-L365</p>"},{"location":"API-Reference.html#websocket-event-payloads","title":"WebSocket Event Payloads","text":"<p>Client to Server (<code>mensaje_privado</code>):</p> <pre><code>{\n  para: \"recipient_username\",\n  mensaje: \"message text\"\n}\n</code></pre> <p>Server to Client (<code>mensaje_recibido</code>):</p> <pre><code>{\n  de: \"sender_username\",\n  mensaje: \"message text\"\n}\n</code></pre> <p>Sources: src/sockets/socketHandler.js L45</p> <p>src/sockets/socketHandler.js L48</p>"},{"location":"API-Reference.html#error-handling","title":"Error Handling","text":""},{"location":"API-Reference.html#http-error-responses","title":"HTTP Error Responses","text":"Status Code Condition Example Endpoint 400 Missing required parameters <code>GET /api/mensajes</code> without <code>?con=</code> parameter 401 Invalid or missing JWT token Any route with <code>verifyToken</code> middleware 403 Valid token but insufficient permissions <code>GET /api/mensajes</code> without admin role 404 Route not found Non-existent URL path 500 Database query error or server error Any route if database connection fails <p>Sources: src/router.js L233</p> <p>src/router.js L247</p> <p>src/router.js L260</p> <p>src/router.js L274</p> <p>src/router.js L309</p>"},{"location":"API-Reference.html#websocket-error-handling","title":"WebSocket Error Handling","text":"<p>Connection Rejection:</p> <p>If JWT validation fails during WebSocket handshake, the connection is rejected with an error:</p> <pre><code>Error: \"No autenticado\"      // No cookies present\nError: \"Token no proporcionado\"  // Cookie exists but no token\nError: \"Token inv\u00e1lido\"      // Token verification failed\n</code></pre> <p>Event-Level Errors:</p> <p>Message persistence errors are logged but do not interrupt message delivery:</p> <pre><code>console.error(\"\u274c Error al guardar mensaje:\", err);\n</code></pre> <p>Sources: src/sockets/socketHandler.js L12</p> <p>src/sockets/socketHandler.js L21</p> <p>src/sockets/socketHandler.js L30</p> <p>src/sockets/socketHandler.js L58</p>"},{"location":"API-Reference.html#rate-limiting","title":"Rate Limiting","text":"<p>The <code>/auth</code> endpoint (POST login) implements rate limiting via the <code>authLimiter</code> middleware to prevent brute-force attacks:</p> <ul> <li>Window: 15 minutes</li> <li>Max Requests: 5 attempts per IP</li> <li>Implementation: <code>express-rate-limit</code> library</li> <li>Applied at: src/router.js L532</li> </ul> <p>Sources: src/router.js L21</p> <p>src/router.js L532</p>"},{"location":"API-Reference.html#cors-and-security-headers","title":"CORS and Security Headers","text":"<p>Security middleware is configured globally in index.js</p> <p>:</p> <ul> <li>helmet: Sets various HTTP security headers</li> <li>HttpOnly Cookies: JWT token stored in HTTP-only cookies prevents XSS attacks</li> <li>Secure Flag: Can be enabled for HTTPS (currently set to <code>false</code> at src/router.js L572 )</li> </ul> <p>Sources: src/router.js L570-L574</p>"},{"location":"API-Reference.html#api-versioning","title":"API Versioning","text":"<p>The current API has no explicit versioning. All endpoints are accessed directly without version prefixes (e.g., <code>/api/mensajes</code> not <code>/v1/api/mensajes</code>).</p>"},{"location":"API-Reference.html#testing-the-api","title":"Testing the API","text":"<p>For interactive API documentation and testing, the application includes Swagger UI (if configured). Access it at <code>/api-docs</code> when the server is running.</p> <p>For detailed endpoint specifications including request parameters, response schemas, and example payloads, see:</p> <ul> <li>HTTP Endpoints - Complete HTTP API reference</li> <li>WebSocket Events - Complete WebSocket event reference</li> </ul>"},{"location":"Admin-Chat-Interface.html","title":"Admin Chat Interface","text":"<p>Relevant source files * src/router.js * views/soporte.ejs</p>"},{"location":"Admin-Chat-Interface.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the administrator chat interface for the support system. This interface allows administrators to view and manage multiple user conversations simultaneously through a multi-conversation UI with user selection, message history, and real-time notifications.</p> <p>For the regular user chat interface, see User Chat Interface. For the underlying real-time communication infrastructure and WebSocket event handling, see Real-time Communication System. For the HTTP API endpoints that support the chat functionality, see API Endpoints.</p> <p>Sources: views/soporte.ejs L8-L24</p> <p>views/soporte.ejs L62-L163</p>"},{"location":"Admin-Chat-Interface.html#interface-layout","title":"Interface Layout","text":"<p>The admin chat interface is rendered when <code>user.role === 'admin'</code> in the <code>/soporte</code> route. The layout consists of a two-column structure implemented using Bootstrap's grid system:</p> Column Width Purpose User List <code>col-md-3</code> Displays list of users with active conversations Chat Area <code>col-md-9</code> Shows message history and input form for selected conversation <p>The interface includes the following DOM elements:</p> <ul> <li><code>#lista-usuarios</code> - Unordered list (<code>&lt;ul&gt;</code>) containing user entries</li> <li><code>#chat</code> - Scrollable container displaying messages for the selected user</li> <li><code>#formulario</code> - Form for sending messages</li> <li><code>#usuarioActual</code> - Hidden input storing the currently selected username</li> <li><code>#mensaje</code> - Text input for composing messages</li> </ul> <p>Diagram: Admin Interface DOM Structure</p> <pre><code>flowchart TD\n\nContainer[\"Container div.mt-4\"]\nUserListHeader[\"h5: 'Usuarios'\"]\nListaUsuarios[\"ul#lista-usuarios.list-group\"]\nUserItem1[\"li.list-group-item#user-{username}&lt;br&gt;data-nuevo, cursor:pointer\"]\nUserItemN[\"li.list-group-item...\"]\nChatDiv[\"div#chat.border.rounded&lt;br&gt;height:400px, overflow-y:auto\"]\nMessageP[\"p elements&lt;br&gt;strong user /strong: message span.text-muted fecha /span\"]\nFormDiv[\"form#formulario.row.g-2\"]\nHiddenInput[\"input#usuarioActual type=hidden\"]\nMessageInput[\"input#mensaje.form-control col-10\"]\nSubmitBtn[\"button.btn.btn-primary col-2\"]\n\nContainer --&gt; UserListHeader\nContainer --&gt; ListaUsuarios\nContainer --&gt; ChatDiv\nContainer --&gt; FormDiv\n\nsubgraph subGraph1 [\"Right Column col-md-9\"]\n    ChatDiv\n    MessageP\n    FormDiv\n    HiddenInput\n    MessageInput\n    SubmitBtn\n    ChatDiv --&gt; MessageP\n    FormDiv --&gt; HiddenInput\n    FormDiv --&gt; MessageInput\n    FormDiv --&gt; SubmitBtn\nend\n\nsubgraph subGraph0 [\"Left Column col-md-3\"]\n    UserListHeader\n    ListaUsuarios\n    UserItem1\n    UserItemN\n    ListaUsuarios --&gt; UserItem1\n    ListaUsuarios --&gt; UserItemN\nend</code></pre> <p>Sources: views/soporte.ejs L8-L24</p> <p>views/soporte.ejs L54-L60</p>"},{"location":"Admin-Chat-Interface.html#user-list-management","title":"User List Management","text":"<p>The admin interface maintains a dynamically updated list of users who have active conversations. This list is populated on page load and updated when new messages arrive.</p>"},{"location":"Admin-Chat-Interface.html#initial-user-list-loading","title":"Initial User List Loading","text":"<p>On page load, the interface fetches the list of users via the <code>/api/usuarios-conversaciones</code> endpoint:</p> <pre><code>fetch(\"/api/usuarios-conversaciones\")\n    .then(res =&gt; res.json())\n    .then(usuarios =&gt; {\n        usuarios.forEach(usuario =&gt; {\n            agregarUsuarioLista(usuario);\n            cargarHistorial(usuario);\n        });\n    });\n</code></pre> <p>The <code>/api/usuarios-conversaciones</code> endpoint src/router.js L283-L315</p> <p>executes a SQL query that:</p> <ol> <li>Finds all messages where the recipient is an admin (<code>para_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')</code>)</li> <li>Finds all messages where the sender is an admin (<code>de_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')</code>)</li> <li>Combines both result sets with <code>UNION</code></li> <li>Filters out admin usernames from the final list</li> <li>Returns a distinct array of non-admin usernames</li> </ol>"},{"location":"Admin-Chat-Interface.html#adding-users-to-the-list","title":"Adding Users to the List","text":"<p>The <code>agregarUsuarioLista(usuario)</code> function views/soporte.ejs L89-L102</p> <p>creates list items with the following attributes:</p> <ul> <li><code>id</code>: <code>\"user-\" + usuario</code> for unique identification</li> <li><code>className</code>: <code>\"list-group-item\"</code></li> <li><code>dataset.nuevo</code>: Tracks whether the conversation has unread messages</li> <li><code>style.cursor</code>: <code>\"pointer\"</code> for visual feedback</li> <li>Click event handler: Calls <code>renderConversacion(usuario)</code> to display the conversation</li> </ul> <p>Diagram: User List Population Flow</p> <pre><code>flowchart TD\n\nPageLoad[\"Page Load&lt;br&gt;user.role === 'admin'\"]\nFetchAPI[\"fetch /api/usuarios-conversaciones\"]\nQueryDB[\"SQL Query&lt;br&gt;usuarios table + mensajes table&lt;br&gt;UNION de_usuario and para_usuario\"]\nReturnArray[\"Return JSON array&lt;br&gt;[usuario1, usuario2, ...]\"]\nForEach[\"forEach usuario\"]\nAgregarFunc[\"agregarUsuarioLista usuario\"]\nCreateLI[\"Create li element&lt;br&gt;id='user-'+usuario&lt;br&gt;dataset.nuevo=''\"]\nAttachClick[\"Add click handler&lt;br&gt;renderConversacion usuario\"]\nAppendList[\"Append to #lista-usuarios\"]\nCargarHist[\"cargarHistorial usuario\"]\n\nPageLoad --&gt; FetchAPI\nFetchAPI --&gt; QueryDB\nQueryDB --&gt; ReturnArray\nReturnArray --&gt; ForEach\nForEach --&gt; AgregarFunc\nAgregarFunc --&gt; CreateLI\nCreateLI --&gt; AttachClick\nAttachClick --&gt; AppendList\nForEach --&gt; CargarHist</code></pre> <p>Sources: views/soporte.ejs L105-L112</p> <p>views/soporte.ejs L89-L102</p> <p>src/router.js L283-L315</p>"},{"location":"Admin-Chat-Interface.html#conversation-switching-and-history-loading","title":"Conversation Switching and History Loading","text":"<p>When an administrator clicks on a user in the list, the interface switches to that conversation by calling <code>renderConversacion(usuario)</code>.</p>"},{"location":"Admin-Chat-Interface.html#conversation-rendering","title":"Conversation Rendering","text":"<p>The <code>renderConversacion(usuario)</code> function views/soporte.ejs L69-L86</p> <p>performs the following operations:</p> <ol> <li>Clear chat area: <code>chat.innerHTML = ''</code></li> <li>Retrieve messages: Access <code>conversaciones[usuario]</code> array</li> <li>Render messages: Call <code>agregarMensaje(de, mensaje, fecha)</code> for each message</li> <li>Update hidden input: Set <code>usuarioActual.value = usuario</code></li> <li>Update visual state: * Remove all styling from list items * Mark selected user with <code>\"bg-light\"</code>, <code>\"text-success\"</code>, <code>\"fw-bold\"</code> classes * Set <code>dataset.nuevo = \"false\"</code> to mark as viewed</li> </ol>"},{"location":"Admin-Chat-Interface.html#message-history-loading","title":"Message History Loading","text":"<p>The <code>cargarHistorial(usuario)</code> function views/soporte.ejs L115-L125</p> <p>retrieves historical messages for a specific user:</p> <pre><code>async function cargarHistorial(usuario) {\n    const res = await fetch(`/api/mensajes?con=${usuario}`);\n    const data = await res.json();\n    conversaciones[usuario] = data.map(m =&gt; ({\n        de: m.de_usuario,\n        mensaje: m.mensaje,\n        fecha: m.fecha\n    }));\n    renderConversacion(usuario);\n    agregarUsuarioLista(usuario);\n}\n</code></pre> <p>The <code>/api/mensajes</code> endpoint src/router.js L229-L253</p> <p>requires the <code>?con=usuario</code> query parameter and executes a SQL query:</p> <pre><code>SELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <p>This retrieves all messages where the specified user is either sender or recipient, ordered chronologically.</p>"},{"location":"Admin-Chat-Interface.html#conversation-data-structure","title":"Conversation Data Structure","text":"<p>The <code>conversaciones</code> object views/soporte.ejs L65</p> <p>stores all loaded conversations in memory:</p> <pre><code>conversaciones = {\n    \"usuario1\": [\n        { de: \"usuario1\", mensaje: \"Hello\", fecha: \"2024-01-01T10:00:00Z\" },\n        { de: \"admin1\", mensaje: \"Hi there\", fecha: \"2024-01-01T10:01:00Z\" }\n    ],\n    \"usuario2\": [ ... ]\n}\n</code></pre> <p>Diagram: Conversation Switching Data Flow</p> <pre><code>sequenceDiagram\n  participant User List Item li\n  participant renderConversacion usuario\n  participant conversaciones[usuario]\n  participant div\n  participant input\n\n  User List Item li-&gt;&gt;renderConversacion usuario: click event\n  renderConversacion usuario-&gt;&gt;div: innerHTML = ''\n  renderConversacion usuario-&gt;&gt;conversaciones[usuario]: retrieve message array\n  loop [each message]\n    conversaciones[usuario]-&gt;&gt;renderConversacion usuario: {de, mensaje, fecha}\n    renderConversacion usuario-&gt;&gt;div: agregarMensaje(de, mensaje, fecha)\n  end\n  renderConversacion usuario-&gt;&gt;input: value = usuario\n  renderConversacion usuario-&gt;&gt;User List Item li: update classList (bg-light, text-success, fw-bold)\n  renderConversacion usuario-&gt;&gt;User List Item li: dataset.nuevo = \"false\"</code></pre> <p>Sources: views/soporte.ejs L69-L86</p> <p>views/soporte.ejs L115-L125</p> <p>src/router.js L229-L253</p>"},{"location":"Admin-Chat-Interface.html#notification-system","title":"Notification System","text":"<p>The admin interface implements a visual notification system to alert administrators of new messages in conversations they are not currently viewing.</p>"},{"location":"Admin-Chat-Interface.html#notification-states","title":"Notification States","text":"<p>Each user list item (<code>&lt;li&gt;</code>) can be in one of three visual states:</p> State CSS Classes Meaning <code>dataset.nuevo</code> Unread <code>fw-bold text-danger</code> New message received, not viewed <code>\"true\"</code> Active <code>bg-light text-success fw-bold</code> Currently viewing this conversation <code>\"false\"</code> Read (none) Previously viewed, no new messages <code>\"false\"</code> or <code>\"\"</code>"},{"location":"Admin-Chat-Interface.html#notification-logic","title":"Notification Logic","text":"<p>When a <code>mensaje_recibido</code> event is received views/soporte.ejs L128-L147</p> <p>the interface:</p> <ol> <li>Adds the message to <code>conversaciones[de]</code> array</li> <li>Ensures the user appears in the list via <code>agregarUsuarioLista(de)</code></li> <li>Checks if the message is for the currently active conversation: * If active (<code>usuarioActual.value === de</code>): Calls <code>renderConversacion(de)</code> to display immediately and mark as viewed * If not active (<code>usuarioActual.value !== de</code>): Updates visual state: * Removes <code>\"text-success\"</code> class if present * Adds <code>\"fw-bold\"</code> and <code>\"text-danger\"</code> classes * Sets <code>dataset.nuevo = \"true\"</code></li> </ol> <p>Diagram: Notification State Machine</p> <pre><code>\n</code></pre> <p>Sources: views/soporte.ejs L128-L147</p> <p>views/soporte.ejs L77-L85</p>"},{"location":"Admin-Chat-Interface.html#message-sending-and-receiving","title":"Message Sending and Receiving","text":""},{"location":"Admin-Chat-Interface.html#sending-messages","title":"Sending Messages","text":"<p>The admin form submission handler views/soporte.ejs L150-L162</p> <p>processes outgoing messages:</p> <ol> <li>Prevent default: <code>e.preventDefault()</code> cancels form submission</li> <li>Validate: Checks that <code>para</code> (from <code>usuarioActual.value</code>) and <code>mensaje</code> are not empty</li> <li>Emit WebSocket event: <code>socket.emit(\"mensaje_privado\", { para, mensaje })</code></li> <li>Update local state: * Adds message to <code>conversaciones[para]</code> with current timestamp * Uses admin's username from EJS template: <code>\"&lt;%= user.username %&gt;\"</code></li> <li>Re-render: Calls <code>renderConversacion(para)</code> to display the new message</li> <li>Clear input: <code>inputMensaje.value = ''</code></li> </ol> <p>The <code>mensaje_privado</code> event is handled by the Socket.IO server in src/sockets/socketHandler.js</p> <p>(see Message Handling).</p>"},{"location":"Admin-Chat-Interface.html#receiving-messages","title":"Receiving Messages","text":"<p>The <code>mensaje_recibido</code> event listener views/soporte.ejs L128-L147</p> <p>handles incoming messages:</p> <pre><code>socket.on(\"mensaje_recibido\", ({ de, mensaje }) =&gt; {\n    const fecha = new Date();\n    conversaciones[de] = conversaciones[de] || [];\n    conversaciones[de].push({ de, mensaje, fecha });\n\n    agregarUsuarioLista(de);\n\n    if (usuarioActual.value !== de) {\n        // Visual notification logic\n    } else {\n        renderConversacion(de);\n    }\n});\n</code></pre> <p>The server emits <code>mensaje_recibido</code> events to the <code>admins</code> room when non-admin users send messages, and to specific user rooms for direct admin-to-user messages.</p> <p>Diagram: Admin Message Send/Receive Flow</p> <pre><code>sequenceDiagram\n  participant form\n  participant socket.emit/on\n  participant socketHandler.js\n  participant conversaciones object\n  participant UI (chat, lista-usuarios)\n\n  form-&gt;&gt;form: submit event\n  form-&gt;&gt;socket.emit/on: emit mensaje_privado\n  socket.emit/on-&gt;&gt;socketHandler.js: {para: usuario, mensaje: text}\n  socketHandler.js-&gt;&gt;socketHandler.js: Event received in setupSocket\n  socketHandler.js-&gt;&gt;socket.emit/on: Save to mensajes table\n  form-&gt;&gt;conversaciones object: emit mensaje_recibido to recipient room\n  form-&gt;&gt;UI (chat, lista-usuarios): conversaciones[para].push(...)\n  socket.emit/on-&gt;&gt;conversaciones object: renderConversacion(para)\n  conversaciones object-&gt;&gt;conversaciones object: on mensaje_recibido\n  conversaciones object-&gt;&gt;UI (chat, lista-usuarios): {de: sender, mensaje: text}\n  loop [usuarioActual.value ===\n    conversaciones object-&gt;&gt;UI (chat, lista-usuarios): conversaciones[de].push(...)\n    conversaciones object-&gt;&gt;UI (chat, lista-usuarios): agregarUsuarioLista(de)\n  end</code></pre> <p>Sources: views/soporte.ejs L150-L162</p> <p>views/soporte.ejs L128-L147</p>"},{"location":"Admin-Chat-Interface.html#api-endpoints","title":"API Endpoints","text":"<p>The admin chat interface relies on two protected HTTP API endpoints, both requiring the <code>verifyAdmin</code> middleware.</p>"},{"location":"Admin-Chat-Interface.html#get-apiusuarios-conversaciones","title":"GET /api/usuarios-conversaciones","text":"<p>Purpose: Retrieve a list of all non-admin users who have active conversations with administrators.</p> <p>Authorization: Requires <code>verifyAdmin</code> middleware src/router.js L283</p> <p>SQL Query src/router.js L292-L304</p> <p>:</p> <pre><code>SELECT DISTINCT usuario\nFROM (\n    SELECT de_usuario AS usuario FROM mensajes\n    WHERE para_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n\n    UNION\n\n    SELECT para_usuario AS usuario FROM mensajes\n    WHERE de_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n) AS conversaciones\nWHERE usuario NOT IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n</code></pre> <p>Response Format:</p> <pre><code>[\"usuario1\", \"usuario2\", \"usuario3\"]\n</code></pre> <p>Usage: Called once on page load views/soporte.ejs L105</p> <p>to populate the user list.</p>"},{"location":"Admin-Chat-Interface.html#get-apimensajesconusuario","title":"GET /api/mensajes?con={usuario}","text":"<p>Purpose: Retrieve all messages between the specified user and any administrator.</p> <p>Authorization: Requires <code>verifyAdmin</code> middleware src/router.js L229</p> <p>Query Parameter: <code>con</code> - Username of the user whose conversation to retrieve</p> <p>SQL Query src/router.js L236-L242</p> <p>:</p> <pre><code>SELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <p>Response Format:</p> <pre><code>[\n    {\n        \"de_usuario\": \"usuario1\",\n        \"para_usuario\": \"admin1\",\n        \"mensaje\": \"Hello\",\n        \"fecha\": \"2024-01-01T10:00:00.000Z\"\n    },\n    {\n        \"de_usuario\": \"admin1\",\n        \"para_usuario\": \"usuario1\",\n        \"mensaje\": \"Hi there\",\n        \"fecha\": \"2024-01-01T10:01:00.000Z\"\n    }\n]\n</code></pre> <p>Usage: Called by <code>cargarHistorial(usuario)</code> views/soporte.ejs L116</p> <p>when loading a user's conversation history.</p> <p>Error Handling:</p> <ul> <li>Returns 400 if <code>?con=</code> parameter is missing src/router.js L232-L234</li> <li>Returns 500 on database errors src/router.js L245-L248</li> </ul> <p>Sources: src/router.js L229-L253</p> <p>src/router.js L283-L315</p>"},{"location":"Admin-Chat-Interface.html#implementation-details","title":"Implementation Details","text":""},{"location":"Admin-Chat-Interface.html#client-side-state-management","title":"Client-Side State Management","text":"<p>The admin interface maintains several JavaScript variables in the page scope views/soporte.ejs L63-L66</p> <p>:</p> Variable Type Purpose <code>socket</code> Socket.IO client WebSocket connection to server <code>chat</code> HTMLElement Reference to <code>#chat</code> div <code>inputMensaje</code> HTMLElement Reference to <code>#mensaje</code> input <code>formulario</code> HTMLElement Reference to <code>#formulario</code> form <code>listaUsuarios</code> HTMLElement Reference to <code>#lista-usuarios</code> ul <code>usuarioActual</code> HTMLElement Reference to <code>#usuarioActual</code> hidden input <code>conversaciones</code> Object Map of username \u2192 message array <code>notificaciones</code> Object (Declared but unused in current implementation)"},{"location":"Admin-Chat-Interface.html#message-formatting","title":"Message Formatting","text":"<p>The <code>formatearFecha(isoString)</code> function views/soporte.ejs L44-L52</p> <p>converts ISO 8601 timestamps to a human-readable format:</p> <ul> <li>Input: <code>\"2024-01-01T10:00:00.000Z\"</code></li> <li>Output: <code>\"01/01/2024 10:00\"</code></li> <li>Format: <code>DD/MM/YYYY HH:MM</code></li> </ul> <p>The <code>agregarMensaje(de, mensaje, fecha)</code> function views/soporte.ejs L54-L60</p> <p>creates message elements:</p> <pre><code>&lt;p&gt;\n    &lt;strong&gt;username:&lt;/strong&gt; message text \n    &lt;span class=\"text-muted\" style=\"font-size: 0.8em;\"&gt; (01/01/2024 10:00)&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>"},{"location":"Admin-Chat-Interface.html#conditional-rendering","title":"Conditional Rendering","text":"<p>The interface is conditionally rendered based on <code>user.role</code> in the EJS template views/soporte.ejs L8</p> <p>:</p> <pre><code>&lt;% if (user.role === 'admin') { %&gt;\n    &lt;!-- Admin interface with user list --&gt;\n&lt;% } else { %&gt;\n    &lt;!-- User interface without user list --&gt;\n&lt;% } %&gt;\n</code></pre> <p>The JavaScript logic is also conditionally included views/soporte.ejs L62</p> <p>and views/soporte.ejs L164</p> <p>:</p> <pre><code>&lt;% if (user.role === 'admin') { %&gt;\n    // Admin-specific JavaScript\n&lt;% } else { %&gt;\n    // User-specific JavaScript\n&lt;% } %&gt;\n</code></pre> <p>This ensures that admin-specific code (user list management, conversation switching) is only sent to authenticated administrators.</p>"},{"location":"Admin-Chat-Interface.html#authorization-flow","title":"Authorization Flow","text":"<p>The <code>/soporte</code> route src/router.js L220-L227</p> <p>applies the <code>verifyToken</code> middleware, which:</p> <ol> <li>Validates the JWT token in the <code>token</code> cookie</li> <li>Decodes the user information</li> <li>Attaches <code>req.user</code> with <code>user</code>, <code>name</code>, <code>rol</code>, and <code>imagen</code> fields</li> <li>Passes <code>user.username</code> and <code>user.role</code> to the EJS template</li> </ol> <p>The API endpoints further restrict access with <code>verifyAdmin</code> src/middlewares/verifyAdmin.js</p> <p>(see verifyAdmin Middleware).</p> <p>Sources: views/soporte.ejs L44-L60</p> <p>views/soporte.ejs L63-L66</p> <p>src/router.js L220-L227</p> <p>views/soporte.ejs L8</p> <p>views/soporte.ejs L62</p> <p>views/soporte.ejs L164</p>"},{"location":"Application-Bootstrap.html","title":"Application Bootstrap","text":"<p>Relevant source files * index.js * package.json</p>"},{"location":"Application-Bootstrap.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the application's entry point and initialization sequence as defined in index.js</p> <p>It covers the server creation process, middleware stack configuration, view engine setup, and the complete bootstrap sequence from process start to listening for connections.</p> <p>For information about specific middleware behaviors and request processing flow, see Request Processing Pipeline. For routing configuration, see Routing System. For WebSocket setup details, see Real-time Communication System.</p>"},{"location":"Application-Bootstrap.html#bootstrap-sequence-overview","title":"Bootstrap Sequence Overview","text":"<p>The application follows a strict initialization order to ensure all dependencies are configured before the server begins accepting requests. The bootstrap process occurs synchronously from top to bottom in index.js L1-L65</p> <p>Diagram: Application Bootstrap Sequence</p> <pre><code>sequenceDiagram\n  participant Process\n  participant index.js\n  participant Express\n  participant HTTP\n  participant SocketIO\n  participant Middleware\n  participant Router\n  participant Server\n\n  Process-&gt;&gt;index.js: Start Node.js Process\n  index.js-&gt;&gt;Express: require(\"express\")\n  index.js-&gt;&gt;Express: const app = express()\n  index.js-&gt;&gt;index.js: require(\"dotenv\").config()\n  index.js-&gt;&gt;HTTP: http.createServer(app)\n  note over HTTP: HTTP server wraps Express app\n  index.js-&gt;&gt;SocketIO: socketIO(server)\n  note over SocketIO: Socket.IO attaches to HTTP server\n  index.js-&gt;&gt;index.js: Configure i18n (lines 23-31)\n  index.js-&gt;&gt;Middleware: app.use(cookieParser())\n  index.js-&gt;&gt;Middleware: app.use(express.urlencoded())\n  index.js-&gt;&gt;Middleware: app.use(express.json())\n  index.js-&gt;&gt;Middleware: app.use(express.static())\n  index.js-&gt;&gt;Middleware: app.use(securityMiddleware)\n  index.js-&gt;&gt;Middleware: app.use(i18n.init)\n  index.js-&gt;&gt;Middleware: app.use(setGlobals)\n  index.js-&gt;&gt;Router: app.use(\"/\", require(\"./src/router\"))\n  index.js-&gt;&gt;Express: app.set(\"view engine\", \"ejs\")\n  index.js-&gt;&gt;SocketIO: setupSocket(io)\n  note over SocketIO: Configure WebSocket event handlers\n  index.js-&gt;&gt;Server: server.listen(3000)\n  Server--&gt;&gt;Process: Server Ready on Port 3000</code></pre> <p>Sources: index.js L1-L65</p>"},{"location":"Application-Bootstrap.html#dependency-loading-and-environment-configuration","title":"Dependency Loading and Environment Configuration","text":"<p>The bootstrap process begins with loading required Node.js modules and environment configuration.</p>"},{"location":"Application-Bootstrap.html#core-dependencies","title":"Core Dependencies","text":"<p>The application loads dependencies in the following order index.js L2-L19</p> <p>:</p> Module Variable Purpose <code>express</code> <code>app</code> HTTP framework for routing and middleware <code>dotenv</code> - Load environment variables from <code>./env/.env</code> <code>jsonwebtoken</code> <code>jwt</code> JWT token operations (imported but used elsewhere) <code>cookie-parser</code> <code>cookieParser</code> Parse cookies from request headers <code>http</code> <code>server</code> Create HTTP server that wraps Express <code>socket.io</code> <code>io</code> Real-time bidirectional communication <code>./database/db</code> <code>db</code> Database connection pool <code>./src/sockets/socketHandler</code> <code>setupSocket</code> WebSocket event handler configuration <code>./src/middlewares/security</code> <code>securityMiddleware</code> Security headers and protections <code>i18n</code> <code>i18n</code> Internationalization support <code>path</code> <code>path</code> File path utilities <code>./src/middlewares/setGlobals</code> <code>setGlobals</code> Global template variables <code>./swagger</code> <code>{ swaggerUi, swaggerSpec }</code> API documentation"},{"location":"Application-Bootstrap.html#environment-variable-loading","title":"Environment Variable Loading","text":"<p>Environment configuration is loaded immediately after Express initialization index.js L4</p> <p>:</p> <pre><code>require(\"dotenv\").config({ path: \"./env/.env\" });\n</code></pre> <p>This loads variables such as database credentials, JWT secrets, and port configuration. The <code>.env</code> file must exist before server startup or the application will fail to connect to MySQL.</p> <p>Sources: index.js L2-L19</p>"},{"location":"Application-Bootstrap.html#server-architecture","title":"Server Architecture","text":"<p>The application uses a three-layer server architecture where a single HTTP server hosts both Express and Socket.IO.</p> <p>Diagram: Server Layer Architecture</p> <pre><code>flowchart TD\n\nNodeProcess[\"Node.js Process\"]\nHTTPServer[\"http.Server&lt;br&gt;(created at line 10)\"]\nExpressApp[\"express() app&lt;br&gt;(created at line 3)\"]\nSocketIOServer[\"socketIO(server) io&lt;br&gt;(created at line 12)\"]\nExpressMiddleware[\"Express Middleware Stack\"]\nExpressRouter[\"Router from ./src/router\"]\nSocketHandlers[\"setupSocket(io)&lt;br&gt;WebSocket Event Handlers\"]\n\nNodeProcess --&gt; HTTPServer\nHTTPServer --&gt; ExpressApp\nHTTPServer --&gt; SocketIOServer\nExpressApp --&gt; ExpressMiddleware\nSocketIOServer --&gt; SocketHandlers\nHTTPServer --&gt; NodeProcess\n\nsubgraph subGraph3 [\"Request Handling\"]\n    ExpressMiddleware\n    ExpressRouter\n    SocketHandlers\n    ExpressMiddleware --&gt; ExpressRouter\nend\n\nsubgraph subGraph2 [\"Application Layer\"]\n    ExpressApp\n    SocketIOServer\nend\n\nsubgraph subGraph1 [\"Server Layer\"]\n    HTTPServer\nend\n\nsubgraph subGraph0 [\"Process Layer\"]\n    NodeProcess\nend</code></pre>"},{"location":"Application-Bootstrap.html#http-server-creation","title":"HTTP Server Creation","text":"<p>The HTTP server is created by wrapping the Express application index.js L10</p> <p>:</p> <pre><code>const server = http.createServer(app);\n</code></pre> <p>This pattern is necessary because Socket.IO requires a raw HTTP server instance to attach its WebSocket upgrade handlers. Using <code>app.listen()</code> directly would not provide access to the underlying HTTP server needed for Socket.IO.</p>"},{"location":"Application-Bootstrap.html#socketio-server-attachment","title":"Socket.IO Server Attachment","text":"<p>Socket.IO is attached to the HTTP server after creation index.js L12</p> <p>:</p> <pre><code>const io = socketIO(server);\n</code></pre> <p>This allows Socket.IO to intercept WebSocket upgrade requests on the same port as HTTP requests. When a client attempts a WebSocket connection, the HTTP server delegates to Socket.IO's upgrade handler.</p> <p>Sources: index.js L8-L12</p>"},{"location":"Application-Bootstrap.html#i18n-configuration","title":"i18n Configuration","text":"<p>The internationalization system is configured before middleware setup index.js L23-L31</p> <p>Configuration Parameters:</p> Parameter Value Description <code>locales</code> <code>['en', 'es']</code> Supported languages: English and Spanish <code>directory</code> <code>path.join(__dirname, 'locales')</code> Translation file location <code>defaultLocale</code> <code>'es'</code> Default language is Spanish <code>cookie</code> <code>'lang'</code> Read language preference from <code>lang</code> cookie <code>queryParameter</code> <code>'lang'</code> Allow language switch via <code>?lang=en</code> query param <code>autoReload</code> <code>true</code> Reload translation files when changed (development) <code>syncFiles</code> <code>true</code> Synchronize missing keys across locale files <p>The <code>i18n.init</code> middleware is registered later in the middleware stack index.js L46</p> <p>to attach translation functions to each request.</p> <p>Sources: index.js L22-L31</p> <p>index.js L46</p>"},{"location":"Application-Bootstrap.html#middleware-stack-configuration","title":"Middleware Stack Configuration","text":"<p>The middleware stack is configured in a specific order that determines request processing flow. Each middleware is registered using <code>app.use()</code>.</p> <p>Diagram: Middleware Registration Order</p> <pre><code>flowchart TD\n\nIncomingRequest[\"Incoming HTTP Request\"]\nM1[\"cookieParser()&lt;br&gt;(line 37)\"]\nM2[\"express.urlencoded({extended:true})&lt;br&gt;(line 41)\"]\nM3[\"express.json()&lt;br&gt;(line 42)\"]\nM4[\"express.static('/resources')&lt;br&gt;(line 43)\"]\nM5[\"swaggerUi middleware&lt;br&gt;(line 44)\"]\nM6[\"securityMiddleware&lt;br&gt;(line 45)\"]\nM7[\"i18n.init&lt;br&gt;(line 46)\"]\nM8[\"setGlobals&lt;br&gt;(line 47)\"]\nM9[\"require('./src/router')&lt;br&gt;(line 48)\"]\nResponseSent[\"Response Sent to Client\"]\n\nIncomingRequest --&gt; M1\nM1 --&gt; M2\nM2 --&gt; M3\nM3 --&gt; M4\nM4 --&gt; M5\nM5 --&gt; M6\nM6 --&gt; M7\nM7 --&gt; M8\nM8 --&gt; M9\nM9 --&gt; ResponseSent</code></pre>"},{"location":"Application-Bootstrap.html#middleware-registration-details","title":"Middleware Registration Details","text":"<p>1. Cookie Parser index.js L37</p> <pre><code>app.use(cookieParser());\n</code></pre> <p>Parses cookies from <code>Cookie</code> header and populates <code>req.cookies</code> object. Required for JWT authentication which stores tokens in HTTP-only cookies.</p> <p>2. URL-Encoded Body Parser index.js L41</p> <pre><code>app.use(express.urlencoded({ extended: true }));\n</code></pre> <p>Parses <code>application/x-www-form-urlencoded</code> request bodies (HTML form submissions). The <code>extended: true</code> option enables rich objects and arrays to be encoded.</p> <p>3. JSON Body Parser index.js L42</p> <pre><code>app.use(express.json());\n</code></pre> <p>Parses <code>application/json</code> request bodies for API endpoints.</p> <p>4. Static File Server index.js L43</p> <pre><code>app.use(\"/resources\", express.static(__dirname + \"/public\"));\n</code></pre> <p>Serves static files from <code>public/</code> directory under the <code>/resources</code> URL path. Files like CSS, images, and fonts are accessible at <code>/resources/css/style.css</code>, etc.</p> <p>5. Swagger API Documentation index.js L44</p> <pre><code>app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n</code></pre> <p>Mounts Swagger UI at <code>/api-docs</code> for interactive API documentation.</p> <p>6. Security Middleware index.js L45</p> <pre><code>app.use(securityMiddleware);\n</code></pre> <p>Applies security headers and protections. See Security Measures for details on what protections are included.</p> <p>7. i18n Middleware index.js L46</p> <pre><code>app.use(i18n.init);\n</code></pre> <p>Attaches internationalization functions to request and response objects. Detects user language from cookie or query parameter.</p> <p>8. Global Variables Middleware index.js L47</p> <pre><code>app.use(setGlobals);\n</code></pre> <p>Sets global variables available in all EJS templates, such as user information from JWT tokens.</p> <p>9. Application Router index.js L48</p> <pre><code>app.use(\"/\", require(\"./src/router\"));\n</code></pre> <p>Mounts the main application router which handles all route definitions. See Routing System for complete route documentation.</p> <p>Sources: index.js L37-L48</p>"},{"location":"Application-Bootstrap.html#view-engine-setup","title":"View Engine Setup","text":"<p>The EJS templating engine is configured for server-side rendering index.js L52</p> <p>:</p> <pre><code>app.set(\"view engine\", \"ejs\");\n</code></pre> <p>This configuration:</p> <ul> <li>Sets EJS as the default template engine</li> <li>Allows <code>res.render(\"viewName\")</code> calls without specifying file extensions</li> <li>Defaults to looking for templates in the <code>views/</code> directory</li> </ul> <p>The application does not use <code>express-ejs-layouts</code> (it is commented out index.js L34</p> <p>index.js L53</p> <p>), so layouts are handled manually through EJS includes.</p> <p>Sources: index.js L51-L54</p>"},{"location":"Application-Bootstrap.html#websocket-handler-setup","title":"WebSocket Handler Setup","text":"<p>After all HTTP middleware is configured, the WebSocket event handlers are initialized index.js L57</p> <p>:</p> <pre><code>setupSocket(io);\n</code></pre> <p>This function, imported from src/sockets/socketHandler.js</p> <p>configures:</p> <ul> <li>Socket.IO authentication middleware</li> <li>Event handlers for <code>mensaje_privado</code> and <code>disconnect</code></li> <li>Room management for user-specific and admin rooms</li> </ul> <p>The Socket.IO server operates independently of the Express middleware stack but shares authentication mechanisms through JWT tokens. See Real-time Communication System for complete WebSocket documentation.</p> <p>Sources: index.js L57</p> <p>index.js L14</p>"},{"location":"Application-Bootstrap.html#server-startup-and-listening","title":"Server Startup and Listening","text":"<p>The final bootstrap step starts the HTTP server listening for connections index.js L62-L65</p> <p>:</p> <pre><code>server.listen(3000, () =&gt; {\n    console.log(\"Servidor corriendo en http://localhost:3000\");\n    console.log('Swagger disponible en http://localhost:3000/api-docs');\n});\n</code></pre>"},{"location":"Application-Bootstrap.html#port-configuration","title":"Port Configuration","text":"<p>The server is hardcoded to listen on port 3000. For production deployments, this should be changed to read from an environment variable:</p> <pre><code>const PORT = process.env.PORT || 3000;\nserver.listen(PORT, () =&gt; { ... });\n</code></pre>"},{"location":"Application-Bootstrap.html#server-ready-state","title":"Server Ready State","text":"<p>When the callback executes, the server is ready to:</p> <ul> <li>Accept HTTP requests on all configured routes</li> <li>Upgrade HTTP connections to WebSocket for Socket.IO clients</li> <li>Serve static files from the <code>public/</code> directory</li> <li>Render EJS templates with i18n support</li> </ul> <p>Sources: index.js L62-L65</p>"},{"location":"Application-Bootstrap.html#bootstrap-sequence-summary","title":"Bootstrap Sequence Summary","text":"<p>Diagram: Complete Bootstrap Flow</p> <pre><code>stateDiagram-v2\n    [*] --&gt; LoadModules : \"Process Start\"\n    LoadModules --&gt; CreateExpress : \"require() calls\"\n    CreateExpress --&gt; LoadEnv : \"express()\"\n    LoadEnv --&gt; CreateHTTP : \"dotenv.config()\"\n    CreateHTTP --&gt; CreateSocketIO : \"http.createServer(app)\"\n    CreateSocketIO --&gt; ConfigureI18n : \"socketIO(server)\"\n    ConfigureI18n --&gt; RegisterMiddleware : \"i18n.configure()\"\n    RegisterMiddleware --&gt; SetViewEngine : \"app.use() calls\"\n    SetViewEngine --&gt; SetupWebSocket : \"app.set(\"view engine\")\"\n    SetupWebSocket --&gt; StartServer : \"setupSocket(io)\"\n    StartServer --&gt; [*] : \"server.listen(3000)\"</code></pre> <p>The bootstrap sequence ensures:</p> <ol> <li>Dependencies are available before they are used</li> <li>HTTP server exists before Socket.IO attachment</li> <li>Middleware executes in the correct order</li> <li>All configurations are complete before accepting connections</li> </ol> <p>Sources: index.js L1-L65</p>"},{"location":"Architecture-Overview.html","title":"Architecture Overview","text":"<p>Relevant source files * index.js * package-lock.json * proyecto.zip * src/router.js</p> <p>Esto es una prueba: This document provides a high-level overview of the <code>registro-sesiones</code> system architecture, including its major components, technology stack, and how data and requests flow through the system. This page focuses on the structural organization and component interactions at a conceptual level.</p> <p>For detailed information about specific subsystems, see:</p> <ul> <li>Routing and endpoints: Routing System</li> <li>Authentication mechanisms: Authentication &amp; Authorization</li> <li>Real-time messaging: Real-time Communication System</li> <li>View rendering: View Layer &amp; Templates</li> </ul>"},{"location":"Architecture-Overview.html#system-overview","title":"System Overview","text":"<p>The <code>registro-sesiones</code> application is a dual-protocol server application that combines traditional HTTP request-response patterns with real-time WebSocket communication. The system is built on Node.js using Express for HTTP routing and Socket.IO for bidirectional real-time messaging.</p> <p>Primary Capabilities:</p> <ul> <li>User authentication and role-based authorization (admin/user)</li> <li>Product management (CRUD operations)</li> <li>Real-time support chat system</li> <li>PDF report generation</li> <li>Multi-language support (English/Spanish)</li> <li>Session management with JWT tokens</li> </ul>"},{"location":"Architecture-Overview.html#application-entry-point-and-server-initialization","title":"Application Entry Point and Server Initialization","text":""},{"location":"Architecture-Overview.html#server-bootstrap-flow","title":"Server Bootstrap Flow","text":"<pre><code>flowchart TD\n\nStart[\"index.js:1\"]\nLoadLibs[\"Load Dependencies&lt;br&gt;express, socket.io, dotenv\"]\nCreateHTTP[\"http.createServer(app)&lt;br&gt;index.js:10\"]\nAttachSocketIO[\"socketIO(server)&lt;br&gt;index.js:12\"]\nConfigI18n[\"Configure i18n&lt;br&gt;index.js:23-31\"]\nConfigMiddleware[\"Configure Middleware Stack&lt;br&gt;index.js:37-48\"]\nMW1[\"cookieParser\"]\nMW2[\"express.urlencoded/json\"]\nMW3[\"securityMiddleware\"]\nMW4[\"i18n.init\"]\nMW5[\"setGlobals\"]\nMW6[\"router\"]\nConfigViewEngine[\"Set View Engine: ejs&lt;br&gt;index.js:52\"]\nSetupWS[\"setupSocket(io)&lt;br&gt;index.js:57\"]\nListen[\"server.listen(3000)&lt;br&gt;index.js:62\"]\n\nStart --&gt; LoadLibs\nLoadLibs --&gt; CreateHTTP\nCreateHTTP --&gt; AttachSocketIO\nAttachSocketIO --&gt; ConfigI18n\nConfigI18n --&gt; ConfigMiddleware\nConfigMiddleware --&gt; MW1\nConfigMiddleware --&gt; MW2\nConfigMiddleware --&gt; MW3\nConfigMiddleware --&gt; MW4\nConfigMiddleware --&gt; MW5\nConfigMiddleware --&gt; MW6\nMW6 --&gt; ConfigViewEngine\nConfigViewEngine --&gt; SetupWS\nSetupWS --&gt; Listen</code></pre> <p>Sources: index.js L1-L65</p> <p>The application initializes a single HTTP server that hosts both Express and Socket.IO, ensuring they share the same port and can coordinate on authentication and session management.</p>"},{"location":"Architecture-Overview.html#core-architectural-components","title":"Core Architectural Components","text":""},{"location":"Architecture-Overview.html#component-hierarchy","title":"Component Hierarchy","text":"<pre><code>flowchart TD\n\nExpress[\"express&lt;br&gt;Application Instance\"]\nRouter[\"router&lt;br&gt;src/router.js\"]\nControllers[\"controllers&lt;br&gt;src/controllers.js\"]\nSocketIO[\"io&lt;br&gt;Socket.IO Server\"]\nSocketHandler[\"setupSocket&lt;br&gt;src/sockets/socketHandler.js\"]\nSecurity[\"securityMiddleware&lt;br&gt;src/middlewares/security.js\"]\nVerifyToken[\"verifyToken&lt;br&gt;src/middlewares/verifyToken.js\"]\nVerifyAdmin[\"verifyAdmin&lt;br&gt;src/middlewares/verifyAdmin.js\"]\nAuthLimiter[\"limiter&lt;br&gt;src/middlewares/authLimiter.js\"]\nMulterConfig[\"upload&lt;br&gt;src/middlewares/multerConfig.js\"]\nDB[\"db&lt;br&gt;database/db.js&lt;br&gt;MySQL Connection\"]\nUsuarios[\"usuarios table\"]\nProductos[\"productos table\"]\nMensajes[\"mensajes table\"]\nEJS[\"EJS Template Engine\"]\nViews[\"views/*.ejs\"]\nPartials[\"views/partials/*.ejs\"]\nI18n[\"i18n&lt;br&gt;locales/en.json, es.json\"]\nPDFGen[\"PDF Generation&lt;br&gt;puppeteer, pdfkit\"]\n\nRouter --&gt; VerifyToken\nRouter --&gt; VerifyAdmin\nRouter --&gt; AuthLimiter\nRouter --&gt; MulterConfig\nRouter --&gt; EJS\nExpress --&gt; Security\nControllers --&gt; DB\nSocketHandler --&gt; DB\nRouter --&gt; I18n\nRouter --&gt; PDFGen\nPDFGen --&gt; DB\n\nsubgraph Utilities [\"Utilities\"]\n    I18n\n    PDFGen\nend\n\nsubgraph subGraph4 [\"View Layer\"]\n    EJS\n    Views\n    Partials\n    EJS --&gt; Views\n    Views --&gt; Partials\nend\n\nsubgraph subGraph3 [\"Data &amp; Persistence\"]\n    DB\n    Usuarios\n    Productos\n    Mensajes\n    DB --&gt; Usuarios\n    DB --&gt; Productos\n    DB --&gt; Mensajes\nend\n\nsubgraph subGraph2 [\"Security &amp; Middleware\"]\n    Security\n    VerifyToken\n    VerifyAdmin\n    AuthLimiter\n    MulterConfig\nend\n\nsubgraph subGraph1 [\"WebSocket Layer\"]\n    SocketIO\n    SocketHandler\n    SocketIO --&gt; SocketHandler\nend\n\nsubgraph subGraph0 [\"HTTP Layer\"]\n    Express\n    Router\n    Controllers\n    Express --&gt; Router\n    Router --&gt; Controllers\nend</code></pre> <p>Sources: index.js L1-L65</p> <p>src/router.js L1-L607</p> <p>src/controllers.js L1-L80</p>"},{"location":"Architecture-Overview.html#technology-stack","title":"Technology Stack","text":"<p>The following table lists the core technologies and their roles in the system:</p> Technology Purpose Configuration Location Express 5.1.0 HTTP server and routing framework index.js L2-L3 Socket.IO 4.8.1 Real-time bidirectional communication index.js L9-L12 MySQL2 3.14.1 Relational database database/db.js EJS 3.1.10 Server-side template engine index.js L52 JWT (jsonwebtoken 9.0.2) Token-based authentication src/router.js L15 bcryptjs 3.0.2 Password hashing src/router.js L4 Helmet 8.1.0 Security headers middleware src/middlewares/security.js express-rate-limit 6.7.0 Brute-force protection src/middlewares/authLimiter.js cookie-parser 1.4.7 Cookie parsing index.js L7 express-session 1.18.2 Session management package-lock.json L1383-L1421 express-validator 7.2.1 Input validation src/router.js L3 i18n 0.15.1 Internationalization index.js L16-L31 Puppeteer 24.14.0 HTML-to-PDF conversion src/router.js L6 PDFKit 0.17.1 Programmatic PDF generation src/router.js L9 Multer 2.0.2 File upload handling src/middlewares/multerConfig.js dotenv 16.5.0 Environment variable management index.js L4 Swagger API documentation index.js L19-L44 <p>Sources: package-lock.json L1-L13687</p> <p>index.js L1-L65</p>"},{"location":"Architecture-Overview.html#request-processing-architecture","title":"Request Processing Architecture","text":""},{"location":"Architecture-Overview.html#http-request-pipeline","title":"HTTP Request Pipeline","text":"<pre><code>flowchart TD\n\nRequest[\"Incoming HTTP Request\"]\nStaticCheck[\"Static Resource?&lt;br&gt;/resources/*,&lt;br&gt;/api-docs\"]\nServeStatic[\"Express Static Handler&lt;br&gt;index.js:43\"]\nSecurityMW[\"securityMiddleware&lt;br&gt;helmet, rate limiting&lt;br&gt;index.js:45\"]\nCookieParser[\"cookieParser&lt;br&gt;index.js:37\"]\nBodyParsers[\"Body Parsers&lt;br&gt;urlencoded, json&lt;br&gt;index.js:41-42\"]\nI18nInit[\"i18n.init&lt;br&gt;index.js:46\"]\nSetGlobalsMW[\"setGlobals&lt;br&gt;index.js:47\"]\nRouterMatch[\"Route Match?&lt;br&gt;src/router.js\"]\nNotFound[\"404 Response\"]\nAuthCheck[\"Auth Required?\"]\nHandler[\"Route Handler\"]\nVTCheck[\"verifyToken MW&lt;br&gt;src/middlewares/verifyToken.js\"]\nVACheck[\"verifyAdmin MW&lt;br&gt;src/middlewares/verifyAdmin.js\"]\nRedirect401[\"Redirect to /login\"]\nReturn403[\"403 Forbidden\"]\nResponseType[\"Response Type\"]\nRenderEJS[\"res.render()&lt;br&gt;EJS Template\"]\nJSONResponse[\"res.json()\"]\nPDFResponse[\"PDF Generation\"]\nRedirectResponse[\"res.redirect()\"]\nResponse[\"HTTP Response\"]\n\nRequest --&gt; StaticCheck\nStaticCheck --&gt; ServeStatic\nStaticCheck --&gt; SecurityMW\nSecurityMW --&gt; CookieParser\nCookieParser --&gt; BodyParsers\nBodyParsers --&gt; I18nInit\nI18nInit --&gt; SetGlobalsMW\nSetGlobalsMW --&gt; RouterMatch\nRouterMatch --&gt; NotFound\nRouterMatch --&gt; AuthCheck\nAuthCheck --&gt; Handler\nAuthCheck --&gt; VTCheck\nAuthCheck --&gt; VACheck\nVTCheck --&gt; Handler\nVTCheck --&gt; Redirect401\nVACheck --&gt; Handler\nVACheck --&gt; Return403\nHandler --&gt; ResponseType\nResponseType --&gt; RenderEJS\nResponseType --&gt; JSONResponse\nResponseType --&gt; PDFResponse\nResponseType --&gt; RedirectResponse\nRenderEJS --&gt; Response\nJSONResponse --&gt; Response\nPDFResponse --&gt; Response\nRedirectResponse --&gt; Response\nServeStatic --&gt; Response\nNotFound --&gt; Response\nRedirect401 --&gt; Response\nReturn403 --&gt; Response</code></pre> <p>Sources: index.js L37-L48</p> <p>src/router.js L1-L607</p> <p>src/middlewares/verifyToken.js</p> <p>src/middlewares/verifyAdmin.js</p>"},{"location":"Architecture-Overview.html#websocket-connection-flow","title":"WebSocket Connection Flow","text":"<pre><code>flowchart TD\n\nWSConnect[\"WebSocket Connection Request\"]\nSocketIOAuth[\"Socket.IO Auth Middleware&lt;br&gt;JWT from Cookie\"]\nJWTValid[\"JWT Valid?\"]\nRejectConnection[\"Reject Connection\"]\nExtractUser[\"Extract user, role from JWT\"]\nAssignPersonalRoom[\"Join Personal Room&lt;br&gt;user:{username}\"]\nCheckAdmin[\"role === 'admin'?\"]\nJoinAdminRoom[\"Join 'admins' room\"]\nSetupHandlers[\"Setup Event Handlers\"]\nListenPrivate[\"Listen: 'mensaje_privado'\"]\nListenDisconnect[\"Listen: 'disconnect'\"]\nEventLoop[\"Active Connection&lt;br&gt;Event Loop\"]\n\nWSConnect --&gt; SocketIOAuth\nSocketIOAuth --&gt; JWTValid\nJWTValid --&gt; RejectConnection\nJWTValid --&gt; ExtractUser\nExtractUser --&gt; AssignPersonalRoom\nAssignPersonalRoom --&gt; CheckAdmin\nCheckAdmin --&gt; JoinAdminRoom\nCheckAdmin --&gt; SetupHandlers\nJoinAdminRoom --&gt; SetupHandlers\nSetupHandlers --&gt; ListenPrivate\nSetupHandlers --&gt; ListenDisconnect\nListenPrivate --&gt; EventLoop\nListenDisconnect --&gt; EventLoop</code></pre> <p>Sources: src/sockets/socketHandler.js</p> <p>index.js L57</p>"},{"location":"Architecture-Overview.html#data-flow-architecture","title":"Data Flow Architecture","text":""},{"location":"Architecture-Overview.html#database-schema-and-access-patterns","title":"Database Schema and Access Patterns","text":"<pre><code>#mermaid-505ldbjim9f{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-505ldbjim9f .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-505ldbjim9f .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-505ldbjim9f .error-icon{fill:#dddddd;}#mermaid-505ldbjim9f .error-text{fill:#222222;stroke:#222222;}#mermaid-505ldbjim9f .edge-thickness-normal{stroke-width:1px;}#mermaid-505ldbjim9f .edge-thickness-thick{stroke-width:3.5px;}#mermaid-505ldbjim9f .edge-pattern-solid{stroke-dasharray:0;}#mermaid-505ldbjim9f .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-505ldbjim9f .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-505ldbjim9f .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-505ldbjim9f .marker{fill:#999;stroke:#999;}#mermaid-505ldbjim9f .marker.cross{stroke:#999;}#mermaid-505ldbjim9f svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-505ldbjim9f p{margin:0;}#mermaid-505ldbjim9f .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-505ldbjim9f .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-505ldbjim9f .relationshipLabelBox rect{opacity:0.5;}#mermaid-505ldbjim9f .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-505ldbjim9f .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-505ldbjim9f .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-505ldbjim9f .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-505ldbjim9f .node rect,#mermaid-505ldbjim9f .node circle,#mermaid-505ldbjim9f .node ellipse,#mermaid-505ldbjim9f .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-505ldbjim9f .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-505ldbjim9f .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-505ldbjim9f :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}de_usuariopara_usuariousuariosvarcharusuarioPKvarcharnombrevarcharrolvarcharpassvarcharimagenmensajesvarcharde_usuarioFKvarcharpara_usuarioFKtextmensajedatetimefechaproductosintrefPKvarcharnombredecimalpreciointstock\n</code></pre>"},{"location":"Architecture-Overview.html#data-access-layer-mapping","title":"Data Access Layer Mapping","text":"Database Table Access Points Primary Operations usuarios <code>POST /register``POST /auth``GET /api/usuarios-conversaciones</code> User registration with bcrypt hashingLogin authenticationRetrieve users with conversations productos <code>GET /admin``POST /save``POST /update``GET /edit/:id``GET /delete/:id``GET /pdf/descargar``GET /pdfkit/descargar</code> List all productsCreate productUpdate productGet single productDelete productGenerate PDF reports mensajes <code>mensaje_privado</code> event<code>GET /api/mensajes``GET /api/mensajes/mios</code> Store real-time messagesRetrieve messages for adminRetrieve user's own messages <p>Sources: src/router.js L119-L407</p> <p>src/controllers.js</p> <p>src/sockets/socketHandler.js</p>"},{"location":"Architecture-Overview.html#authentication-and-authorization-flow","title":"Authentication and Authorization Flow","text":""},{"location":"Architecture-Overview.html#jwt-token-lifecycle","title":"JWT Token Lifecycle","text":"<p>Sources: src/router.js L532-L601</p> <p>src/middlewares/verifyToken.js</p> <p>src/middlewares/verifyAdmin.js</p>"},{"location":"Architecture-Overview.html#view-rendering-architecture","title":"View Rendering Architecture","text":""},{"location":"Architecture-Overview.html#template-hierarchy","title":"Template Hierarchy","text":"<pre><code>flowchart TD\n\nLayout[\"layout.ejs&lt;br&gt;Master Template\"]\nHead[\"partials/head.ejs&lt;br&gt;Meta tags, CSS links\"]\nHeader[\"partials/header.ejs&lt;br&gt;Navigation, Language Switcher\"]\nBody[\"Body Content&lt;br&gt;Page-specific\"]\nFooter[\"partials/footer.ejs\"]\nIndex[\"index.ejs&lt;br&gt;Homepage\"]\nLogin[\"login.ejs&lt;br&gt;Login Form\"]\nRegister[\"register.ejs&lt;br&gt;Registration Form\"]\nAdmin[\"admin.ejs&lt;br&gt;Product Management\"]\nCreate[\"create.ejs&lt;br&gt;Product Create Form\"]\nEdit[\"edit.ejs&lt;br&gt;Product Edit Form\"]\nSoporte[\"soporte.ejs&lt;br&gt;Support Chat Interface\"]\nPDFTable[\"pdfTabla.ejs&lt;br&gt;PDF Template&lt;br&gt;(Rendered by Puppeteer)\"]\nPopover[\"partials/popover.ejs&lt;br&gt;Product Actions\"]\n\nLayout --&gt; Head\nLayout --&gt; Header\nLayout --&gt; Body\nLayout --&gt; Footer\nBody --&gt; Index\nBody --&gt; Login\nBody --&gt; Register\nBody --&gt; Admin\nBody --&gt; Create\nBody --&gt; Edit\nBody --&gt; Soporte\nBody --&gt; PDFTable\nAdmin --&gt; Popover</code></pre> <p>Sources: views/layout.ejs</p> <p>views/partials/head.ejs</p> <p>views/partials/header.ejs</p> <p>views/partials/footer.ejs</p> <p>views/admin.ejs</p> <p>views/soporte.ejs</p>"},{"location":"Architecture-Overview.html#data-passed-to-views","title":"Data Passed to Views","text":"Route View Template Data Passed Source <code>GET /</code> <code>index.ejs</code> <code>user</code>, <code>login</code> src/router.js L59-L74 <code>GET /admin</code> <code>admin.ejs</code> <code>productos</code>, <code>user</code>, <code>login</code>, <code>rol</code> src/router.js L119-L134 <code>GET /soporte</code> <code>soporte.ejs</code> <code>user: {username, role}</code> src/router.js L220-L227 <code>GET /edit/:id</code> <code>edit.ejs</code> <code>producto</code> src/router.js L186-L196 <code>GET /login</code> <code>login.ejs</code> Alert data (on auth error) src/router.js L532-L601 <code>GET /registro</code> <code>register.ejs</code> Validation errors, form values src/router.js L414-L484 <p>Sources: src/router.js L59-L227</p>"},{"location":"Architecture-Overview.html#middleware-stack-details","title":"Middleware Stack Details","text":"<p>The middleware stack is applied in the following order, as configured in index.js L37-L48</p> <p>:</p> Order Middleware Purpose Source 1 <code>cookieParser()</code> Parse cookies for JWT token extraction index.js L37 2 <code>express.urlencoded({extended: true})</code> Parse URL-encoded form data index.js L41 3 <code>express.json()</code> Parse JSON request bodies index.js L42 4 <code>express.static('/resources', public/)</code> Serve static assets index.js L43 5 <code>swaggerUi.serve</code>, <code>swaggerUi.setup()</code> API documentation UI index.js L44 6 <code>securityMiddleware</code> Helmet security headers, rate limiting index.js L45 7 <code>i18n.init</code> Initialize internationalization index.js L46 8 <code>setGlobals</code> Set global template variables index.js L47 9 <code>router</code> Application routes index.js L48"},{"location":"Architecture-Overview.html#route-specific-middleware","title":"Route-Specific Middleware","text":"<p>Certain routes apply additional middleware:</p> <ul> <li><code>POST /auth</code>: <code>limiter</code> (rate limiting to prevent brute force) - src/router.js L532</li> <li><code>POST /register</code>: <code>upload.single('profileImage')</code> (file upload), validation chain - src/router.js L414-L428</li> <li><code>GET /admin</code>: <code>verifyToken</code> - src/router.js L119</li> <li><code>GET /soporte</code>: <code>verifyToken</code> - src/router.js L220</li> <li><code>GET /api/mensajes</code>: <code>verifyAdmin</code> - src/router.js L229</li> <li><code>GET /api/mensajes/mios</code>: <code>verifyToken</code> - src/router.js L256</li> <li><code>GET /api/usuarios-conversaciones</code>: <code>verifyAdmin</code> - src/router.js L283</li> <li><code>GET /pdf/descargar</code>: <code>verifyToken</code> - src/router.js L317</li> <li><code>GET /pdfkit/descargar</code>: <code>verifyToken</code> - src/router.js L355</li> </ul> <p>Sources: src/router.js L119-L407</p> <p>src/middlewares/verifyToken.js</p> <p>src/middlewares/verifyAdmin.js</p> <p>src/middlewares/authLimiter.js</p> <p>src/middlewares/multerConfig.js</p>"},{"location":"Architecture-Overview.html#internationalization-architecture","title":"Internationalization Architecture","text":"<p>The i18n system supports English (<code>en</code>) and Spanish (<code>es</code>) locales.</p>"},{"location":"Architecture-Overview.html#configuration","title":"Configuration","text":"<pre><code>flowchart TD\n\nConfig[\"i18n.configure()&lt;br&gt;index.js:23-31\"]\nLocalesDir[\"locales/ directory&lt;br&gt;en.json, es.json\"]\nDefaultLocale[\"defaultLocale: 'es'\"]\nCookie[\"cookie: 'lang'\"]\nQueryParam[\"queryParameter: 'lang'\"]\nRequest[\"Incoming Request\"]\nI18nInit[\"i18n.init middleware&lt;br&gt;index.js:46\"]\nDetectLang[\"Detect language from&lt;br&gt;cookie or query param\"]\nLoadTranslations[\"Load translations\"]\nRenderView[\"Render view with&lt;br&gt;req.__() function\"]\nLangSwitch[\"GET /set-lang/:lang\"]\nSetCookie[\"Set 'lang' cookie&lt;br&gt;src/router.js:398-407\"]\nRedirect[\"Redirect back to returnTo\"]\n\nConfig --&gt; LocalesDir\nConfig --&gt; DefaultLocale\nConfig --&gt; Cookie\nConfig --&gt; QueryParam\nRequest --&gt; I18nInit\nI18nInit --&gt; DetectLang\nDetectLang --&gt; LoadTranslations\nLoadTranslations --&gt; RenderView\nLangSwitch --&gt; SetCookie\nSetCookie --&gt; Redirect</code></pre> <p>Sources: index.js L23-L46</p> <p>src/router.js L398-L407</p> <p>views/partials/header.ejs</p>"},{"location":"Architecture-Overview.html#pdf-generation-architecture","title":"PDF Generation Architecture","text":"<p>The system supports two PDF generation approaches:</p>"},{"location":"Architecture-Overview.html#approach-1-puppeteer-html-to-pdf","title":"Approach 1: Puppeteer (HTML-to-PDF)","text":"<pre><code>flowchart TD\n\nRequest[\"GET /pdf/descargar\"]\nQueryDB[\"Query productos table\"]\nRenderEJS[\"ejs.renderFile()&lt;br&gt;pdfTabla.ejs\"]\nLaunchBrowser[\"puppeteer.launch()&lt;br&gt;Headless Chrome\"]\nLoadHTML[\"page.setContent(html)\"]\nGeneratePDF[\"page.pdf()&lt;br&gt;A4, margins\"]\nCloseBrowser[\"browser.close()\"]\nSendResponse[\"Send PDF buffer&lt;br&gt;Content-Type: application/pdf\"]\n\nRequest --&gt; QueryDB\nQueryDB --&gt; RenderEJS\nRenderEJS --&gt; LaunchBrowser\nLaunchBrowser --&gt; LoadHTML\nLoadHTML --&gt; GeneratePDF\nGeneratePDF --&gt; CloseBrowser\nCloseBrowser --&gt; SendResponse</code></pre> <p>Sources: src/router.js L317-L353</p>"},{"location":"Architecture-Overview.html#approach-2-pdfkit-programmatic","title":"Approach 2: PDFKit (Programmatic)","text":"<pre><code>flowchart TD\n\nRequest[\"GET /pdfkit/descargar\"]\nQueryDB[\"Query productos table\"]\nCreateDoc[\"new PDFDocument()&lt;br&gt;A4, margin: 40\"]\nPipeResponse[\"doc.pipe(res)\"]\nWriteTitle[\"Write title, headers\"]\nLoopProducts[\"Loop through productos&lt;br&gt;Write rows\"]\nEndDoc[\"doc.end()\"]\n\nRequest --&gt; QueryDB\nQueryDB --&gt; CreateDoc\nCreateDoc --&gt; PipeResponse\nPipeResponse --&gt; WriteTitle\nWriteTitle --&gt; LoopProducts\nLoopProducts --&gt; EndDoc</code></pre> <p>Sources: src/router.js L355-L396</p> <p>Both approaches query the same <code>productos</code> table but differ in rendering strategy. Puppeteer renders a full HTML template and converts it to PDF, while PDFKit programmatically builds the PDF structure.</p>"},{"location":"Architecture-Overview.html#security-architecture-summary","title":"Security Architecture Summary","text":"Security Layer Implementation Location HTTPS Headers Helmet middleware src/middlewares/security.js Rate Limiting express-rate-limit on <code>/auth</code> src/middlewares/authLimiter.js src/router.js L532 Password Hashing bcrypt with salt rounds = 8 src/router.js L453 JWT Tokens Signed with <code>JWT_SECRET</code>, HttpOnly cookies, 1-hour expiration src/router.js L567-L574 Input Validation express-validator on registration src/router.js L415-L428 SQL Injection Prevention Parameterized queries via mysql2 database/db.js src/router.js Role-Based Access Control verifyAdmin middleware checks <code>req.user.rol</code> src/middlewares/verifyAdmin.js File Upload Validation Multer configuration limits file types/sizes src/middlewares/multerConfig.js <p>Sources: src/router.js L414-L601</p> <p>src/middlewares/security.js</p> <p>src/middlewares/verifyToken.js</p> <p>src/middlewares/verifyAdmin.js</p> <p>src/middlewares/authLimiter.js</p> <p>This architecture supports a secure, scalable application with clear separation of concerns between HTTP and WebSocket layers, robust authentication, and flexible content generation capabilities.</p>"},{"location":"Authentication-%26-Authorization.html","title":"Authentication &amp; Authorization","text":"<p>Relevant source files * package-lock.json * src/middlewares/verifyAdmin.js * src/middlewares/verifyToken.js * src/router.js</p>"},{"location":"Authentication-%26-Authorization.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the authentication and authorization mechanisms in the registro application. It covers user registration, login flows, JWT token management, password hashing with bcrypt, and role-based access control using middleware.</p> <p>For information about the protected routes that use these mechanisms, see Protected Routes. For details on WebSocket authentication, see WebSocket Authentication. For security measures like rate limiting and input validation, see Security Measures.</p>"},{"location":"Authentication-%26-Authorization.html#authentication-system-overview","title":"Authentication System Overview","text":"<p>The application implements a stateless authentication system using JWT (JSON Web Tokens) stored in HTTP-only cookies. Passwords are hashed using bcrypt before storage, and access control is enforced through two middleware functions: <code>verifyToken</code> and <code>verifyAdmin</code>.</p>"},{"location":"Authentication-%26-Authorization.html#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>flowchart TD\n\nLoginForm[\"Login Form&lt;br&gt;/views/login.ejs\"]\nRegisterForm[\"Registration Form&lt;br&gt;/views/register.ejs\"]\nLoginRoute[\"POST /auth&lt;br&gt;src/router.js:532-601\"]\nRegisterRoute[\"POST /register&lt;br&gt;src/router.js:414-484\"]\nLogoutRoute[\"GET /logout&lt;br&gt;src/router.js:215-218\"]\nBCryptHash[\"bcrypt.hash()&lt;br&gt;Password Hashing\"]\nBCryptCompare[\"bcrypt.compare()&lt;br&gt;Password Verification\"]\nJWTSign[\"jwt.sign()&lt;br&gt;Token Generation\"]\nJWTVerify[\"jwt.verify()&lt;br&gt;Token Validation\"]\nRateLimiter[\"authLimiter&lt;br&gt;src/middlewares/authLimiter.js\"]\nVerifyToken[\"verifyToken&lt;br&gt;src/middlewares/verifyToken.js\"]\nVerifyAdmin[\"verifyAdmin&lt;br&gt;src/middlewares/verifyAdmin.js\"]\nCookie[\"HTTP-only Cookie&lt;br&gt;name: token&lt;br&gt;maxAge: 3600000\"]\nDB[\"MySQL Database&lt;br&gt;usuarios table\"]\n\nRegisterForm --&gt; RegisterRoute\nRegisterRoute --&gt; BCryptHash\nBCryptHash --&gt; DB\nLoginForm --&gt; LoginRoute\nLoginRoute --&gt; RateLimiter\nRateLimiter --&gt; DB\nDB --&gt; BCryptCompare\nJWTSign --&gt; Cookie\nCookie --&gt; VerifyToken\nVerifyToken --&gt; JWTVerify\nJWTVerify --&gt; VerifyAdmin\nLogoutRoute --&gt; Cookie\n\nsubgraph Storage [\"Storage\"]\n    Cookie\n    DB\nend\n\nsubgraph subGraph3 [\"Middleware Layer\"]\n    RateLimiter\n    VerifyToken\n    VerifyAdmin\nend\n\nsubgraph subGraph2 [\"Authentication Logic\"]\n    BCryptHash\n    BCryptCompare\n    JWTSign\n    JWTVerify\n    BCryptCompare --&gt; JWTSign\nend\n\nsubgraph subGraph1 [\"Route Handlers\"]\n    LoginRoute\n    RegisterRoute\n    LogoutRoute\nend\n\nsubgraph subGraph0 [\"Client Layer\"]\n    LoginForm\n    RegisterForm\nend</code></pre> <p>Sources: src/router.js L1-L608</p> <p>src/middlewares/verifyToken.js L1-L18</p> <p>src/middlewares/verifyAdmin.js L1-L45</p> <p>package-lock.json L523-L530</p>"},{"location":"Authentication-%26-Authorization.html#user-registration-flow","title":"User Registration Flow","text":"<p>Registration is handled by the <code>POST /register</code> route with file upload support for profile images. The process includes validation, password hashing, and database insertion.</p>"},{"location":"Authentication-%26-Authorization.html#registration-request-processing","title":"Registration Request Processing","text":"<pre><code>flowchart TD\n\nStart[\"POST /register\"]\nUpload[\"multer processes&lt;br&gt;profileImage file\"]\nValidate[\"express-validator&lt;br&gt;validates input fields\"]\nValidCheck[\"Valid?\"]\nRenderErrors[\"Render register.ejs&lt;br&gt;with validaciones array\"]\nHash[\"bcrypt.hash(pass, 8)&lt;br&gt;Generate password hash\"]\nInsert[\"INSERT INTO usuarios&lt;br&gt;usuario, nombre, rol,&lt;br&gt;pass, imagen\"]\nSuccess[\"Render register.ejs&lt;br&gt;with success alert\"]\nEnd[\"End\"]\n\nStart --&gt; Upload\nUpload --&gt; Validate\nValidate --&gt; ValidCheck\nValidCheck --&gt; RenderErrors\nValidCheck --&gt; Hash\nHash --&gt; Insert\nInsert --&gt; Success\nRenderErrors --&gt; End\nSuccess --&gt; End</code></pre> <p>Sources: src/router.js L414-L484</p>"},{"location":"Authentication-%26-Authorization.html#registration-validation-rules","title":"Registration Validation Rules","text":"<p>The registration route uses <code>express-validator</code> to enforce input constraints:</p> Field Validation Rule Error Message <code>user</code> min length: 4 \"El usuario debe tener al menos 4 caracteres\" <code>name</code> min length: 4 \"El nombre debe tener al menos 4 caracteres\" <code>pass</code> min length: 4 \"La contrase\u00f1a debe tener al menos 4 caracteres\" <code>email</code> isEmail() \"El email no es valido\" <code>edad</code> isNumeric() \"La edad debe ser un n\u00famero\" <p>Sources: src/router.js L416-L428</p>"},{"location":"Authentication-%26-Authorization.html#password-hashing","title":"Password Hashing","text":"<p>Passwords are hashed using bcrypt with a salt round of 8 before being stored in the database:</p> <pre><code>const passwordHash = await bcrypt.hash(pass, 8);\n</code></pre> <p>This occurs at src/router.js L453</p> <p>within the registration handler.</p> <p>Sources: src/router.js L452-L453</p>"},{"location":"Authentication-%26-Authorization.html#database-schema-for-usuarios","title":"Database Schema for usuarios","text":"<p>The registration process inserts records into the <code>usuarios</code> table with the following structure:</p> Column Type Purpose <code>usuario</code> VARCHAR Unique username (primary key) <code>nombre</code> VARCHAR Full name of the user <code>rol</code> VARCHAR Role: \"user\" or \"admin\" <code>pass</code> VARCHAR bcrypt hashed password <code>imagen</code> VARCHAR Profile image filename (nullable) <p>Sources: src/router.js L456-L464</p>"},{"location":"Authentication-%26-Authorization.html#login-and-jwt-generation","title":"Login and JWT Generation","text":"<p>The login process validates credentials, generates a JWT token, and stores it in an HTTP-only cookie.</p>"},{"location":"Authentication-%26-Authorization.html#login-flow-diagram","title":"Login Flow Diagram","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant POST /auth\n  participant authLimiter\n  participant MySQL\n  participant BCrypt\n  participant jsonwebtoken\n  participant Cookie\n\n  Client-&gt;&gt;POST /auth: user, pass\n  POST /auth-&gt;&gt;authLimiter: Check rate limit\n  authLimiter-&gt;&gt;MySQL: SELECT * FROM usuarios\n  MySQL--&gt;&gt;POST /auth: WHERE usuario = ?\n  POST /auth-&gt;&gt;BCrypt: results array\n  BCrypt--&gt;&gt;POST /auth: bcrypt.compare(pass, results[0].pass)\n  loop [Credentials Valid]\n    POST /auth-&gt;&gt;jsonwebtoken: true/false\n    jsonwebtoken--&gt;&gt;POST /auth: jwt.sign(payload, JWT_SECRET, {expiresIn: \"1h\"})\n    POST /auth-&gt;&gt;Cookie: token string\n    Cookie--&gt;&gt;Client: Set token cookie\n    POST /auth--&gt;&gt;Client: httpOnly: true\n  end</code></pre> <p>Sources: src/router.js L532-L601</p>"},{"location":"Authentication-%26-Authorization.html#jwt-payload-structure","title":"JWT Payload Structure","text":"<p>When a user successfully authenticates, a JWT is created with the following payload structure:</p> <pre><code>const payload = {\n    user: results[0].usuario,    // username\n    name: results[0].nombre,      // full name\n    rol: results[0].rol,          // \"user\" or \"admin\"\n    imagen: results[0].imagen     // profile image filename\n};\n</code></pre> <p>This payload is defined at src/router.js L559-L564</p> <p>Sources: src/router.js L559-L564</p>"},{"location":"Authentication-%26-Authorization.html#jwt-token-creation-and-cookie-storage","title":"JWT Token Creation and Cookie Storage","text":"<p>The JWT is signed with the <code>JWT_SECRET</code> environment variable and stored in an HTTP-only cookie:</p> <pre><code>const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: \"1h\" });\n\nres.cookie(\"token\", token, {\n    httpOnly: true,\n    secure: false,      // set to true for HTTPS\n    maxAge: 3600000     // 1 hour in milliseconds\n});\n</code></pre> <p>This occurs at src/router.js L567</p> <p>and src/router.js L570-L574</p> <p>Sources: src/router.js L567-L574</p>"},{"location":"Authentication-%26-Authorization.html#token-expiration","title":"Token Expiration","text":"<p>Both the JWT token and the HTTP cookie are configured to expire after 1 hour (3600000 milliseconds). After expiration, users must re-authenticate.</p> <p>Sources: src/router.js L567</p> <p>src/router.js L573</p>"},{"location":"Authentication-%26-Authorization.html#verifytoken-middleware","title":"verifyToken Middleware","text":"<p>The <code>verifyToken</code> middleware authenticates users by validating the JWT token in the request cookie.</p>"},{"location":"Authentication-%26-Authorization.html#middleware-flow","title":"Middleware Flow","text":"<pre><code>flowchart TD\n\nStart[\"Request arrives at&lt;br&gt;protected route\"]\nExtract[\"Extract token from&lt;br&gt;req.cookies.token\"]\nCheckToken[\"Token&lt;br&gt;exists?\"]\nReturn401[\"return res.status(401)&lt;br&gt;.send('No autenticado')\"]\nVerify[\"jwt.verify(token,&lt;br&gt;process.env.JWT_SECRET)\"]\nValidToken[\"Valid?\"]\nReturn403[\"return res.status(403)&lt;br&gt;.send('Token inv\u00e1lido')\"]\nAttachUser[\"req.user = payload&lt;br&gt;Attach decoded payload\"]\nNext[\"next()&lt;br&gt;Continue to route handler\"]\nEnd[\"End\"]\n\nStart --&gt; Extract\nExtract --&gt; CheckToken\nCheckToken --&gt; Return401\nCheckToken --&gt; Verify\nVerify --&gt; ValidToken\nValidToken --&gt; Return403\nValidToken --&gt; AttachUser\nAttachUser --&gt; Next\nReturn401 --&gt; End\nReturn403 --&gt; End\nNext --&gt; End</code></pre> <p>Sources: src/middlewares/verifyToken.js L1-L18</p>"},{"location":"Authentication-%26-Authorization.html#implementation-details","title":"Implementation Details","text":"<p>The <code>verifyToken</code> function is implemented at src/middlewares/verifyToken.js L3-L15</p> <p>:</p> Line Range Purpose 4 Extract token from <code>req.cookies.token</code> 6 Return 401 if no token present 9 Verify token using <code>jwt.verify()</code> with <code>JWT_SECRET</code> 10 Attach decoded payload to <code>req.user</code> 11 Call <code>next()</code> to continue middleware chain 13 Return 403 if verification fails <p>Sources: src/middlewares/verifyToken.js L3-L15</p>"},{"location":"Authentication-%26-Authorization.html#usage-in-routes","title":"Usage in Routes","text":"<p>The <code>verifyToken</code> middleware is applied to routes that require any authenticated user:</p> <ul> <li><code>GET /admin</code> - src/router.js L119</li> <li><code>GET /pdfAdmin</code> - src/router.js L136</li> <li><code>GET /soporte</code> - src/router.js L220</li> <li><code>GET /api/mensajes/mios</code> - src/router.js L256</li> <li><code>GET /pdf/descargar</code> - src/router.js L317</li> <li><code>GET /pdfkit/descargar</code> - src/router.js L355</li> </ul> <p>Sources: src/router.js L119</p> <p>src/router.js L136</p> <p>src/router.js L220</p> <p>src/router.js L256</p> <p>src/router.js L317</p> <p>src/router.js L355</p>"},{"location":"Authentication-%26-Authorization.html#verifyadmin-middleware","title":"verifyAdmin Middleware","text":"<p>The <code>verifyAdmin</code> middleware extends authentication by checking if the user has an \"admin\" role. It performs both token validation and role verification.</p>"},{"location":"Authentication-%26-Authorization.html#admin-authorization-flow","title":"Admin Authorization Flow","text":"<pre><code>flowchart TD\n\nStart[\"Request to admin route\"]\nGetToken[\"token = req.cookies.token\"]\nCheckToken[\"Token&lt;br&gt;exists?\"]\nDeny403A[\"return res.status(403)&lt;br&gt;.json({error: 'Acceso denegado'})\"]\nVerifyJWT[\"decoded = jwt.verify(token,&lt;br&gt;process.env.JWT_SECRET)\"]\nTryCatch[\"Verify&lt;br&gt;success?\"]\nInvalid403[\"return res.status(403)&lt;br&gt;.json({error: 'Token inv\u00e1lido'})\"]\nCheckRole[\"decoded.rol&lt;br&gt;== 'admin'?\"]\nAdminOnly403[\"return res.status(403)&lt;br&gt;.json({error: 'Acceso solo&lt;br&gt;para administradores'})\"]\nAttachUser[\"req.user = decoded\"]\nNext[\"next()\"]\nEnd[\"End\"]\n\nStart --&gt; GetToken\nGetToken --&gt; CheckToken\nCheckToken --&gt; Deny403A\nCheckToken --&gt; VerifyJWT\nVerifyJWT --&gt; TryCatch\nTryCatch --&gt; Invalid403\nTryCatch --&gt; CheckRole\nCheckRole --&gt; AdminOnly403\nCheckRole --&gt; AttachUser\nAttachUser --&gt; Next\nDeny403A --&gt; End\nInvalid403 --&gt; End\nAdminOnly403 --&gt; End\nNext --&gt; End</code></pre> <p>Sources: src/middlewares/verifyAdmin.js L24-L42</p>"},{"location":"Authentication-%26-Authorization.html#verifyadmin-vs-verifytoken","title":"verifyAdmin vs verifyToken","text":"<p>The key difference between the two middleware functions:</p> Middleware Token Validation Role Check Returns <code>verifyToken</code> \u2705 Yes \u274c No 401/403 on failure <code>verifyAdmin</code> \u2705 Yes \u2705 Yes (must be \"admin\") 403 on failure <p>Both middleware functions attach the decoded JWT payload to <code>req.user</code> upon success.</p> <p>Sources: src/middlewares/verifyToken.js L1-L18</p> <p>src/middlewares/verifyAdmin.js L1-L45</p>"},{"location":"Authentication-%26-Authorization.html#admin-protected-routes","title":"Admin-Protected Routes","text":"<p>The <code>verifyAdmin</code> middleware is applied to administrative routes:</p> <ul> <li><code>GET /api/mensajes</code> - src/router.js L229  - Get messages for specific user</li> <li><code>GET /api/usuarios-conversaciones</code> - src/router.js L283  - List all user conversations</li> </ul> <p>Note that <code>GET /admin</code> uses only <code>verifyToken</code>, not <code>verifyAdmin</code>, meaning any authenticated user can access it. This may be a design consideration.</p> <p>Sources: src/router.js L229</p> <p>src/router.js L283</p>"},{"location":"Authentication-%26-Authorization.html#authentication-dependencies","title":"Authentication Dependencies","text":"<p>The authentication system relies on the following npm packages:</p>"},{"location":"Authentication-%26-Authorization.html#core-authentication-libraries","title":"Core Authentication Libraries","text":"Package Version Purpose <code>bcryptjs</code> ^3.0.2 Password hashing and comparison <code>jsonwebtoken</code> ^9.0.2 JWT token creation and verification <code>cookie-parser</code> ^1.4.7 Parse cookies from request headers <code>express-validator</code> ^7.2.1 Input validation for registration <code>multer</code> ^2.0.2 File upload handling for profile images <p>Sources: package-lock.json L12</p> <p>package-lock.json L24</p> <p>package-lock.json L13</p> <p>package-lock.json L21</p> <p>package-lock.json L25</p>"},{"location":"Authentication-%26-Authorization.html#security-related-dependencies","title":"Security-Related Dependencies","text":"Package Version Purpose <code>helmet</code> ^8.1.0 Security headers middleware <code>express-rate-limit</code> ^6.7.0 Rate limiting for brute force protection <code>express-session</code> ^1.18.2 Session management (compatibility) <code>cookie-session</code> ^2.1.1 Alternative session storage <p>Sources: package-lock.json L22</p> <p>package-lock.json L19</p> <p>package-lock.json L20</p> <p>package-lock.json L14</p>"},{"location":"Authentication-%26-Authorization.html#logout-process","title":"Logout Process","text":"<p>Logout is handled by clearing the JWT token cookie, effectively invalidating the user's session.</p>"},{"location":"Authentication-%26-Authorization.html#logout-implementation","title":"Logout Implementation","text":"<pre><code>flowchart TD\n\nClient[\"Client\"]\nHandler[\"Route Handler&lt;br&gt;src/router.js:215-218\"]\nClearCookie[\"Remove token cookie\"]\nHome[\"Redirect to homepage\"]\n\nClient --&gt; Handler\nHandler --&gt; ClearCookie\nClearCookie --&gt; Home</code></pre> <p>The logout route is implemented at src/router.js L215-L218</p> <p>:</p> <pre><code>router.get(\"/logout\", (req, res) =&gt; {\n    res.clearCookie(\"token\");\n    res.redirect('/');\n});\n</code></pre> <p>This simply removes the <code>token</code> cookie from the client, forcing re-authentication on the next protected route access.</p> <p>Sources: src/router.js L215-L218</p>"},{"location":"Authentication-%26-Authorization.html#jwt-token-access-patterns","title":"JWT Token Access Patterns","text":"<p>The application accesses and validates JWT tokens in multiple contexts throughout the codebase.</p>"},{"location":"Authentication-%26-Authorization.html#token-access-in-routes","title":"Token Access in Routes","text":"<pre><code>flowchart TD\n\nHomePage[\"GET /&lt;br&gt;src/router.js:59-74\"]\nAdminPage[\"GET /admin&lt;br&gt;verifyToken\"]\nSoportePage[\"GET /soporte&lt;br&gt;verifyToken\"]\nMessagesAPI[\"GET /api/mensajes&lt;br&gt;verifyAdmin\"]\nOptionalToken[\"Optional Token&lt;br&gt;jwt.verify() in route handler\"]\nMiddlewareToken[\"Required Token&lt;br&gt;verifyToken middleware\"]\nAdminToken[\"Admin Token&lt;br&gt;verifyAdmin middleware\"]\nCookie[\"req.cookies.token\"]\n\nHomePage --&gt; OptionalToken\nAdminPage --&gt; MiddlewareToken\nSoportePage --&gt; MiddlewareToken\nMessagesAPI --&gt; AdminToken\nOptionalToken --&gt; Cookie\nMiddlewareToken --&gt; Cookie\nAdminToken --&gt; Cookie\n\nsubgraph subGraph2 [\"Token Validation Methods\"]\n    OptionalToken\n    MiddlewareToken\n    AdminToken\nend\n\nsubgraph subGraph1 [\"Protected Routes\"]\n    AdminPage\n    SoportePage\n    MessagesAPI\nend\n\nsubgraph subGraph0 [\"Public Routes\"]\n    HomePage\nend</code></pre> <p>Sources: src/router.js L59-L74</p> <p>src/router.js L119</p> <p>src/router.js L220</p> <p>src/router.js L229</p>"},{"location":"Authentication-%26-Authorization.html#optional-token-validation-on-homepage","title":"Optional Token Validation on Homepage","text":"<p>The homepage route (<code>GET /</code>) performs optional token validation at src/router.js L61-L73</p> <p>:</p> <pre><code>if (req.cookies.token) {\n    const payload = jwt.verify(req.cookies.token, process.env.JWT_SECRET);\n    req.user = payload;\n    res.render(\"index\", {\n        user: req.user?.name || \"Usuario\",\n        login: true,\n    });\n} else {\n    res.render(\"index\", {\n        user: \"Debe iniciar sesi\u00f3n\",\n        login: false,\n    });\n}\n</code></pre> <p>This pattern allows the homepage to display personalized content for authenticated users without requiring authentication.</p> <p>Sources: src/router.js L61-L73</p>"},{"location":"Authentication-%26-Authorization.html#request-user-object-structure","title":"Request User Object Structure","text":"<p>After successful authentication via <code>verifyToken</code> or <code>verifyAdmin</code>, the decoded JWT payload is attached to <code>req.user</code> with the following structure:</p>"},{"location":"Authentication-%26-Authorization.html#requser-properties","title":"req.user Properties","text":"Property Type Source Description <code>user</code> string <code>usuarios.usuario</code> Username (primary key) <code>name</code> string <code>usuarios.nombre</code> User's full name <code>rol</code> string <code>usuarios.rol</code> Role: \"user\" or \"admin\" <code>imagen</code> string <code>usuarios.imagen</code> Profile image filename <p>This object is available in all route handlers that use <code>verifyToken</code> or <code>verifyAdmin</code> middleware, and can be accessed as <code>req.user</code>.</p> <p>Example usage in admin route at src/router.js L125-L131</p> <p>:</p> <pre><code>res.render(\"admin\", {\n    productos: results,\n    user: req.user,\n    login: true,\n    rol: req.user.rol,\n});\n</code></pre> <p>Sources: src/router.js L559-L564</p> <p>src/middlewares/verifyToken.js L10</p> <p>src/middlewares/verifyAdmin.js L36</p>"},{"location":"Authentication-%26-Authorization.html#rate-limiting-for-authentication","title":"Rate Limiting for Authentication","text":"<p>The login route uses rate limiting to prevent brute force attacks. The <code>authLimiter</code> middleware is applied at src/router.js L532</p>"},{"location":"Authentication-%26-Authorization.html#rate-limiter-configuration","title":"Rate Limiter Configuration","text":"<p>The <code>limiter</code> is imported from <code>./middlewares/authLimiter</code> and applied specifically to the <code>POST /auth</code> route:</p> <pre><code>router.post(\"/auth\", limiter, async (req, res) =&gt; { ... });\n</code></pre> <p>This occurs at src/router.js L532</p> <p>Note: The actual configuration of the rate limiter (max requests, time window) is defined in src/middlewares/authLimiter.js</p> <p>which is imported at src/router.js L21</p> <p>Sources: src/router.js L21</p> <p>src/router.js L532</p>"},{"location":"Authentication-%26-Authorization.html#security-considerations","title":"Security Considerations","text":"<p>The authentication system implements several security best practices:</p>"},{"location":"Authentication-%26-Authorization.html#security-measures-summary","title":"Security Measures Summary","text":"Measure Implementation Location Password Hashing bcrypt with salt round 8 src/router.js L453 HTTP-only Cookies <code>httpOnly: true</code> flag src/router.js L571 Token Expiration 1 hour expiry src/router.js L567 src/router.js L573 Rate Limiting Applied to login route src/router.js L532 Input Validation express-validator on registration src/router.js L415-L428 Role-Based Access verifyAdmin middleware src/middlewares/verifyAdmin.js L24-L42"},{"location":"Authentication-%26-Authorization.html#http-only-cookie-benefits","title":"HTTP-only Cookie Benefits","text":"<p>The <code>httpOnly: true</code> flag at src/router.js L571</p> <p>prevents JavaScript access to the token cookie, mitigating XSS attack vectors. The cookie is only transmitted with HTTP requests.</p>"},{"location":"Authentication-%26-Authorization.html#secure-flag-configuration","title":"Secure Flag Configuration","text":"<p>The <code>secure: false</code> flag at src/router.js L572</p> <p>should be set to <code>true</code> in production environments using HTTPS:</p> <pre><code>res.cookie(\"token\", token, {\n    httpOnly: true,\n    secure: false,  // \u26a0\ufe0f Set to true for HTTPS in production\n    maxAge: 3600000\n});\n</code></pre> <p>Sources: src/router.js L570-L574</p>"},{"location":"Authentication-%26-Authorization.html#authentication-error-handling","title":"Authentication Error Handling","text":"<p>The authentication system returns specific HTTP status codes and error messages for different failure scenarios.</p>"},{"location":"Authentication-%26-Authorization.html#error-response-table","title":"Error Response Table","text":"Status Code Scenario Middleware/Route Message 401 No token present <code>verifyToken</code> \"No autenticado\" 403 Invalid token <code>verifyToken</code> \"Token inv\u00e1lido\" 403 No token present <code>verifyAdmin</code> <code>{error: \"Acceso denegado\"}</code> 403 Invalid token <code>verifyAdmin</code> <code>{error: \"Token inv\u00e1lido\"}</code> 403 Valid token but not admin <code>verifyAdmin</code> <code>{error: \"Acceso solo para administradores\"}</code> <p>Sources: src/middlewares/verifyToken.js L6</p> <p>src/middlewares/verifyToken.js L13</p> <p>src/middlewares/verifyAdmin.js L28</p> <p>src/middlewares/verifyAdmin.js L40</p> <p>src/middlewares/verifyAdmin.js L34</p>"},{"location":"Authentication-%26-Authorization.html#login-error-rendering","title":"Login Error Rendering","text":"<p>The login route handles authentication failures by re-rendering the login form with error alerts:</p> <p>Invalid credentials at src/router.js L545-L556</p> <p>:</p> <pre><code>return res.render(\"login\", {\n    alert: true,\n    alertTitle: \"Error\",\n    alertMessage: \"El usuario o la contrase\u00f1a son incorrectos\",\n    alertIcon: \"error\",\n    showConfirmButton: true,\n    timer: false,\n    ruta: \"login\",\n    login: false,\n});\n</code></pre> <p>Missing credentials at src/router.js L590-L600</p> <p>:</p> <pre><code>res.render(\"login\", {\n    alert: true,\n    alertTitle: \"Error\",\n    alertMessage: \"Introduzca su usuario y contrase\u00f1a\",\n    alertIcon: \"error\",\n    showConfirmButton: true,\n    timer: false,\n    ruta: \"login\",\n    login: false,\n});\n</code></pre> <p>Sources: src/router.js L545-L556</p> <p>src/router.js L590-L600</p>"},{"location":"Authentication-%26-Authorization.html#summary-authentication-component-map","title":"Summary: Authentication Component Map","text":"<pre><code>flowchart TD\n\nPostAuth[\"POST /auth\"]\nPostRegister[\"POST /register\"]\nGetLogout[\"GET /logout\"]\nBCryptHash[\"bcrypt.hash()\"]\nBCryptCompare[\"bcrypt.compare()\"]\nJWTSign[\"jwt.sign()\"]\nJWTVerify[\"jwt.verify()\"]\nVerifyToken[\"verifyToken&lt;br&gt;src/middlewares/verifyToken.js\"]\nVerifyAdmin[\"verifyAdmin&lt;br&gt;src/middlewares/verifyAdmin.js\"]\nAuthLimiter[\"authLimiter&lt;br&gt;src/middlewares/authLimiter.js\"]\nTokenCookie[\"Cookie: token&lt;br&gt;httpOnly: true&lt;br&gt;maxAge: 3600000\"]\nUsuariosTable[\"MySQL Table: usuarios&lt;br&gt;columns: usuario, nombre,&lt;br&gt;rol, pass, imagen\"]\n\nPostRegister --&gt; BCryptHash\nBCryptHash --&gt; UsuariosTable\nPostAuth --&gt; AuthLimiter\nPostAuth --&gt; BCryptCompare\nPostAuth --&gt; JWTSign\nJWTSign --&gt; TokenCookie\nGetLogout --&gt; TokenCookie\nTokenCookie --&gt; VerifyToken\nTokenCookie --&gt; VerifyAdmin\nVerifyToken --&gt; JWTVerify\nVerifyAdmin --&gt; JWTVerify\nUsuariosTable --&gt; BCryptCompare\n\nsubgraph subGraph3 [\"Storage &amp; State\"]\n    TokenCookie\n    UsuariosTable\nend\n\nsubgraph subGraph2 [\"Middleware Exports\"]\n    VerifyToken\n    VerifyAdmin\n    AuthLimiter\nend\n\nsubgraph subGraph1 [\"Core Functions\"]\n    BCryptHash\n    BCryptCompare\n    JWTSign\n    JWTVerify\nend\n\nsubgraph subGraph0 [\"Entry Points\"]\n    PostAuth\n    PostRegister\n    GetLogout\nend</code></pre> <p>Sources: src/router.js L1-L608</p> <p>src/middlewares/verifyToken.js L1-L18</p> <p>src/middlewares/verifyAdmin.js L1-L45</p>"},{"location":"Database-Schema.html","title":"Database Schema","text":"<p>Relevant source files * proyecto.zip * src/router.js * src/sockets/socketHandler.js</p>"},{"location":"Database-Schema.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides comprehensive documentation of the MySQL database schema used by the registro-sesiones application. It covers the structure of all database tables, their columns, data types, relationships, and constraints. The schema consists of three main tables: <code>usuarios</code> (user authentication and profiles), <code>productos</code> (product management), and <code>mensajes</code> (real-time chat messages).</p> <p>For detailed information about specific tables, see:</p> <ul> <li>usuarios Table - User authentication and profile data</li> <li>productos Table - Product inventory management</li> <li>mensajes Table - Chat messaging system</li> </ul> <p>For information about how these tables are accessed by the application, see API Reference.</p>"},{"location":"Database-Schema.html#database-overview","title":"Database Overview","text":"<p>The application uses a MySQL database with three core tables that support distinct functional domains. The database connection is managed through database/db.js</p> <p>which provides a connection pool for query execution throughout the application.</p>"},{"location":"Database-Schema.html#entity-relationship-diagram","title":"Entity Relationship Diagram","text":"<pre><code>#mermaid-lpobs8m2ztk{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-lpobs8m2ztk .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-lpobs8m2ztk .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-lpobs8m2ztk .error-icon{fill:#dddddd;}#mermaid-lpobs8m2ztk .error-text{fill:#222222;stroke:#222222;}#mermaid-lpobs8m2ztk .edge-thickness-normal{stroke-width:1px;}#mermaid-lpobs8m2ztk .edge-thickness-thick{stroke-width:3.5px;}#mermaid-lpobs8m2ztk .edge-pattern-solid{stroke-dasharray:0;}#mermaid-lpobs8m2ztk .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-lpobs8m2ztk .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-lpobs8m2ztk .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-lpobs8m2ztk .marker{fill:#999;stroke:#999;}#mermaid-lpobs8m2ztk .marker.cross{stroke:#999;}#mermaid-lpobs8m2ztk svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-lpobs8m2ztk p{margin:0;}#mermaid-lpobs8m2ztk .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-lpobs8m2ztk .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-lpobs8m2ztk .relationshipLabelBox rect{opacity:0.5;}#mermaid-lpobs8m2ztk .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-lpobs8m2ztk .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-lpobs8m2ztk .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-lpobs8m2ztk .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-lpobs8m2ztk .node rect,#mermaid-lpobs8m2ztk .node circle,#mermaid-lpobs8m2ztk .node ellipse,#mermaid-lpobs8m2ztk .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-lpobs8m2ztk .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-lpobs8m2ztk .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-lpobs8m2ztk :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}sends (de_usuario)receives (para_usuario)usuariosvarcharusuarioPKUsername, primary keyvarcharnombreFull namevarcharrolRole: admin or uservarcharpassbcrypt hashed passwordvarcharimagenProfile image filenamemensajesvarcharde_usuarioFKSender usernamevarcharpara_usuarioFKRecipient usernametextmensajeMessage contentdatetimefechaTimestampproductosintrefPKAuto-increment referencevarcharnombreProduct namedecimalprecioProduct priceintstockStock quantity\n</code></pre> <p>Sources: src/router.js L121-L133</p> <p>src/router.js L236-L252</p> <p>src/router.js L456-L464</p> <p>src/sockets/socketHandler.js L55-L62</p>"},{"location":"Database-Schema.html#database-connection","title":"Database Connection","text":"<p>The database connection is established in database/db.js</p> <p>using the <code>mysql</code> package. The connection parameters are loaded from environment variables:</p> Environment Variable Purpose <code>DB_HOST</code> MySQL server hostname <code>DB_USER</code> Database username <code>DB_PASSWORD</code> Database password <code>DB_DATABASE</code> Database name <code>DB_PORT</code> MySQL port (default: 3306) <p>The connection pool is exported as <code>db</code> and used throughout the application for executing queries via <code>db.query()</code>.</p> <p>Sources: database/db.js L1-L20</p> <p>(as referenced in proyecto.zip)</p>"},{"location":"Database-Schema.html#table-relationships-and-access-patterns","title":"Table Relationships and Access Patterns","text":""},{"location":"Database-Schema.html#data-access-by-component","title":"Data Access by Component","text":"<pre><code>flowchart TD\n\nLogin[\"POST /auth&lt;br&gt;[router.js:532-601]\"]\nRegister[\"POST /register&lt;br&gt;[router.js:414-484]\"]\nAdminView[\"GET /admin&lt;br&gt;[router.js:119-134]\"]\nCreateProduct[\"POST /save&lt;br&gt;[controllers.js]\"]\nEditProduct[\"POST /update&lt;br&gt;[controllers.js]\"]\nDeleteProduct[\"GET /delete/:id&lt;br&gt;[router.js:198-208]\"]\nPDFExport[\"GET /pdf/descargar&lt;br&gt;[router.js:317-353]\"]\nSocketHandler[\"setupSocket()&lt;br&gt;[socketHandler.js:4-69]\"]\nGetMessages[\"GET /api/mensajes&lt;br&gt;[router.js:229-253]\"]\nGetMyMessages[\"GET /api/mensajes/mios&lt;br&gt;[router.js:256-280]\"]\nGetConversations[\"GET /api/usuarios-conversaciones&lt;br&gt;[router.js:283-315]\"]\nusuarios[\"usuarios table\"]\nproductos[\"productos table\"]\nmensajes[\"mensajes table\"]\n\nLogin --&gt; usuarios\nRegister --&gt; usuarios\nAdminView --&gt; productos\nCreateProduct --&gt; productos\nEditProduct --&gt; productos\nDeleteProduct --&gt; productos\nPDFExport --&gt; productos\nSocketHandler --&gt; mensajes\nSocketHandler --&gt; usuarios\nGetMessages --&gt; mensajes\nGetMyMessages --&gt; mensajes\nGetConversations --&gt; mensajes\nGetConversations --&gt; usuarios\n\nsubgraph subGraph2 [\"Messaging System\"]\n    SocketHandler\n    GetMessages\n    GetMyMessages\n    GetConversations\nend\n\nsubgraph subGraph1 [\"Product Management\"]\n    AdminView\n    CreateProduct\n    EditProduct\n    DeleteProduct\n    PDFExport\nend\n\nsubgraph subGraph0 [\"Authentication Layer\"]\n    Login\n    Register\nend</code></pre> <p>Sources: src/router.js L1-L607</p> <p>src/controllers.js L1-L80</p> <p>src/sockets/socketHandler.js L1-L71</p>"},{"location":"Database-Schema.html#table-summary","title":"Table Summary","text":"Table Primary Key Foreign Keys Purpose Record Count Expectation <code>usuarios</code> <code>usuario</code> None User authentication, authorization, and profile storage Low (tens to hundreds) <code>productos</code> <code>ref</code> (auto-increment) None Product inventory management Medium (hundreds to thousands) <code>mensajes</code> None (no explicit PK) <code>de_usuario</code>, <code>para_usuario</code> \u2192 <code>usuarios.usuario</code> Support chat message history High (thousands to millions)"},{"location":"Database-Schema.html#query-patterns","title":"Query Patterns","text":""},{"location":"Database-Schema.html#authentication-queries","title":"Authentication Queries","text":"<p>The <code>usuarios</code> table is queried during authentication to verify credentials:</p> <pre><code>-- Login verification\nSELECT * FROM usuarios WHERE usuario = ?\n</code></pre> <p>Password comparison is performed in application code using <code>bcrypt.compare()</code> against the stored hash in the <code>pass</code> column src/router.js L541-L544</p> <p>Sources: src/router.js L537-L544</p>"},{"location":"Database-Schema.html#product-crud-operations","title":"Product CRUD Operations","text":"<pre><code>-- List all products\nSELECT * FROM productos\n\n-- Get single product for editing\nSELECT * FROM productos WHERE ref = ?\n\n-- Delete product\nDELETE FROM productos WHERE ref = ?\n</code></pre> <p>Product creation and updates use parameterized INSERT and UPDATE statements executed by the controllers src/controllers.js</p> <p>Sources: src/router.js L121</p> <p>src/router.js L188</p> <p>src/router.js L200</p>"},{"location":"Database-Schema.html#messaging-queries","title":"Messaging Queries","text":"<p>The messaging system uses complex queries to retrieve conversation history:</p> <pre><code>-- Get messages for a specific user (bidirectional)\nSELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <pre><code>-- Get list of users with active conversations (admin view)\nSELECT DISTINCT usuario\nFROM (\n  SELECT de_usuario AS usuario FROM mensajes\n  WHERE para_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n  UNION\n  SELECT para_usuario AS usuario FROM mensajes\n  WHERE de_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n) AS conversaciones\nWHERE usuario NOT IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n</code></pre> <p>This query identifies all non-admin users who have sent or received messages from administrators src/router.js L292-L304</p> <p>Sources: src/router.js L236-L252</p> <p>src/router.js L292-L304</p> <p>src/sockets/socketHandler.js L55-L62</p>"},{"location":"Database-Schema.html#data-flow-diagram","title":"Data Flow Diagram","text":"<pre><code>flowchart TD\n\nRegForm[\"Registration Form&lt;br&gt;views/register.ejs\"]\nRegValidation[\"express-validator&lt;br&gt;Input validation\"]\nBCrypt[\"bcrypt.hash()&lt;br&gt;Password hashing\"]\nRegInsert[\"INSERT INTO usuarios\"]\nLoginForm[\"Login Form&lt;br&gt;views/login.ejs\"]\nAuthQuery[\"SELECT * FROM usuarios&lt;br&gt;WHERE usuario = ?\"]\nBCryptCompare[\"bcrypt.compare()&lt;br&gt;Verify password\"]\nJWTGen[\"jwt.sign()&lt;br&gt;Generate token\"]\nSocketEvent[\"mensaje_privado&lt;br&gt;Socket.IO event\"]\nMsgInsert[\"INSERT INTO mensajes\"]\nMsgQuery[\"SELECT * FROM mensajes&lt;br&gt;WHERE de_usuario/para_usuario\"]\nusuarios[\"usuarios\"]\nmensajes[\"mensajes\"]\n\nRegInsert --&gt; usuarios\nAuthQuery --&gt; usuarios\nusuarios --&gt; BCryptCompare\nMsgInsert --&gt; mensajes\nmensajes --&gt; MsgQuery\nusuarios --&gt; MsgQuery\n\nsubgraph subGraph2 [\"Messaging Flow\"]\n    SocketEvent\n    MsgInsert\n    MsgQuery\n    SocketEvent --&gt; MsgInsert\nend\n\nsubgraph subGraph1 [\"Authentication Flow\"]\n    LoginForm\n    AuthQuery\n    BCryptCompare\n    JWTGen\n    LoginForm --&gt; AuthQuery\n    BCryptCompare --&gt; JWTGen\nend\n\nsubgraph subGraph0 [\"User Registration Flow\"]\n    RegForm\n    RegValidation\n    BCrypt\n    RegInsert\n    RegForm --&gt; RegValidation\n    RegValidation --&gt; BCrypt\n    BCrypt --&gt; RegInsert\nend</code></pre> <p>Sources: src/router.js L414-L484</p> <p>src/router.js L532-L601</p> <p>src/sockets/socketHandler.js L45-L63</p>"},{"location":"Database-Schema.html#field-naming-conventions","title":"Field Naming Conventions","text":"<p>The schema uses Spanish naming conventions for table and column names:</p> Spanish English Examples <code>usuario</code> user <code>de_usuario</code>, <code>para_usuario</code> <code>nombre</code> name <code>nombre</code> (user full name, product name) <code>rol</code> role <code>rol</code> (admin/user) <code>pass</code> password <code>pass</code> (hashed password) <code>precio</code> price <code>precio</code> (product price) <code>fecha</code> date <code>fecha</code> (message timestamp) <code>mensaje</code> message <code>mensaje</code> (message content) <p>Sources: src/router.js L456-L464</p> <p>src/router.js L237-L242</p>"},{"location":"Database-Schema.html#indexes-and-performance-considerations","title":"Indexes and Performance Considerations","text":""},{"location":"Database-Schema.html#recommended-indexes","title":"Recommended Indexes","text":"<p>Based on the query patterns observed in the codebase:</p> <ol> <li>usuarios table: * Primary key on <code>usuario</code> (username lookup for authentication) * Index on <code>rol</code> (filtering admin users in message queries)</li> <li>productos table: * Primary key on <code>ref</code> (lookup by reference number)</li> <li>mensajes table: * Composite index on <code>(de_usuario, para_usuario)</code> (bidirectional message queries) * Index on <code>fecha</code> (chronological ordering) * Index on <code>de_usuario</code> (sender-based queries) * Index on <code>para_usuario</code> (recipient-based queries)</li> </ol> <p>The <code>mensajes</code> table is likely to grow significantly over time and would benefit from proper indexing to support the complex UNION queries used in src/router.js L292-L304</p> <p>Sources: src/router.js L229-L315</p> <p>src/sockets/socketHandler.js L55-L62</p>"},{"location":"Database-Schema.html#data-integrity-and-constraints","title":"Data Integrity and Constraints","text":""},{"location":"Database-Schema.html#foreign-key-relationships","title":"Foreign Key Relationships","text":"<p>The <code>mensajes</code> table has implicit foreign key relationships to the <code>usuarios</code> table:</p> <ul> <li><code>mensajes.de_usuario</code> \u2192 <code>usuarios.usuario</code></li> <li><code>mensajes.para_usuario</code> \u2192 <code>usuarios.usuario</code></li> </ul> <p>These relationships ensure that messages cannot be created with non-existent sender or recipient usernames.</p>"},{"location":"Database-Schema.html#data-validation","title":"Data Validation","text":"<p>Application-level validation is performed before database insertion:</p> <ul> <li>User registration: src/router.js L415-L428  uses <code>express-validator</code> to validate: * <code>user</code>: minimum 4 characters * <code>name</code>: minimum 4 characters * <code>pass</code>: minimum 4 characters * <code>email</code>: valid email format * <code>edad</code>: numeric value</li> <li>Password security: All passwords are hashed using bcrypt with salt rounds = 8 src/router.js L453</li> </ul> <p>Sources: src/router.js L415-L428</p> <p>src/router.js L453</p>"},{"location":"Database-Schema.html#database-schema-code-mapping","title":"Database Schema Code Mapping","text":"<pre><code>flowchart TD\n\ndbjs[\"database/db.js&lt;br&gt;MySQL connection pool\"]\nauthRoute[\"router.js:532-601&lt;br&gt;POST /auth\"]\nregisterRoute[\"router.js:414-484&lt;br&gt;POST /register\"]\nverifyToken[\"middlewares/verifyToken.js&lt;br&gt;JWT validation\"]\nadminRoute[\"router.js:119-134&lt;br&gt;GET /admin\"]\neditRoute[\"router.js:186-196&lt;br&gt;GET /edit/:id\"]\ndeleteRoute[\"router.js:198-208&lt;br&gt;GET /delete/:id\"]\ncontrollers[\"controllers.js&lt;br&gt;save, update\"]\nsocketHandler[\"socketHandler.js:45-63&lt;br&gt;mensaje_privado\"]\napiMessages[\"router.js:229-253&lt;br&gt;GET /api/mensajes\"]\napiMyMessages[\"router.js:256-280&lt;br&gt;GET /api/mensajes/mios\"]\napiConversations[\"router.js:283-315&lt;br&gt;GET /api/usuarios-conversaciones\"]\n\ndbjs --&gt; authRoute\ndbjs --&gt; registerRoute\ndbjs --&gt; adminRoute\ndbjs --&gt; editRoute\ndbjs --&gt; deleteRoute\ndbjs --&gt; controllers\ndbjs --&gt; socketHandler\ndbjs --&gt; apiMessages\ndbjs --&gt; apiMyMessages\ndbjs --&gt; apiConversations\n\nsubgraph subGraph3 [\"mensajes Table Access\"]\n    socketHandler\n    apiMessages\n    apiMyMessages\n    apiConversations\nend\n\nsubgraph subGraph2 [\"productos Table Access\"]\n    adminRoute\n    editRoute\n    deleteRoute\n    controllers\nend\n\nsubgraph subGraph1 [\"usuarios Table Access\"]\n    authRoute\n    registerRoute\n    verifyToken\nend\n\nsubgraph subGraph0 [\"Database Layer\"]\n    dbjs\nend</code></pre> <p>Sources: src/router.js L1-L607</p> <p>src/controllers.js L1-L80</p> <p>src/sockets/socketHandler.js L1-L71</p> <p>database/db.js</p> <p>For detailed column specifications and constraints for each table, refer to the following subsections:</p> <ul> <li>#14.1 usuarios Table</li> <li>#14.2 productos Table</li> <li>#14.3 mensajes Table</li> </ul>"},{"location":"Deployment-%26-Configuration.html","title":"Deployment &amp; Configuration","text":"<p>Relevant source files * index.js * package.json * proyecto.zip</p> <p>This document provides comprehensive guidance for deploying and configuring the registro-sesiones application. It covers environment setup, database configuration, dependency installation, server initialization, and production deployment considerations. For information about the application's architecture and components, see Architecture Overview. For details about security configuration and middleware, see Authentication &amp; Authorization and Security Measures.</p>"},{"location":"Deployment-%26-Configuration.html#prerequisites","title":"Prerequisites","text":"<p>Before deploying the application, ensure the following requirements are met:</p> Requirement Version/Details Purpose Node.js 14.x or higher Runtime environment npm 6.x or higher Package manager MySQL 5.7 or higher Database server Operating System Linux, macOS, or Windows Server platform Memory Minimum 512MB RAM Application + Puppeteer Disk Space Minimum 1GB Dependencies + uploads <p>Sources: package.json L1-L48</p> <p>index.js L1-L86</p>"},{"location":"Deployment-%26-Configuration.html#environment-variables-configuration","title":"Environment Variables Configuration","text":"<p>The application uses <code>dotenv</code> to load environment variables from <code>./env/.env</code>. All sensitive configuration must be stored in this file and never committed to version control.</p>"},{"location":"Deployment-%26-Configuration.html#required-environment-variables","title":"Required Environment Variables","text":"<p>Create a file at <code>./env/.env</code> with the following structure:</p> <pre><code>DATABASE_HOST=localhost\nDATABASE_USER=your_database_user\nDATABASE_PASS=your_database_password\nDATABASE_NAME=registro_sesiones\nSECRET_KEY=your_jwt_secret_key_min_32_characters\n</code></pre>"},{"location":"Deployment-%26-Configuration.html#environment-variable-reference","title":"Environment Variable Reference","text":"Variable Description Example Required <code>DATABASE_HOST</code> MySQL server hostname <code>localhost</code>, <code>192.168.1.10</code> Yes <code>DATABASE_USER</code> MySQL username <code>app_user</code> Yes <code>DATABASE_PASS</code> MySQL password <code>secure_password</code> Yes <code>DATABASE_NAME</code> Database name <code>registro_sesiones</code> Yes <code>SECRET_KEY</code> JWT signing secret 32+ character string Yes"},{"location":"Deployment-%26-Configuration.html#environment-loading-flow","title":"Environment Loading Flow","text":"<pre><code>flowchart TD\n\nEnvFile[\"./env/.env&lt;br&gt;Environment File\"]\nDotenvConfig[\"dotenv.config()&lt;br&gt;index.js:4\"]\nProcessEnv[\"process.env\"]\nDBConfig[\"database/db.js&lt;br&gt;MySQL Connection\"]\nJWTConfig[\"JWT Token Signing&lt;br&gt;controllers.js\"]\n\nEnvFile --&gt; DotenvConfig\nDotenvConfig --&gt; ProcessEnv\nProcessEnv --&gt; DBConfig\nProcessEnv --&gt; JWTConfig</code></pre> <p>Sources: index.js L4</p> <p>env/.env L1-L5</p>"},{"location":"Deployment-%26-Configuration.html#database-setup","title":"Database Setup","text":"<p>The application uses MySQL with the <code>mysql2</code> package and connection pooling for efficient database operations.</p>"},{"location":"Deployment-%26-Configuration.html#database-connection-configuration","title":"Database Connection Configuration","text":"<p>The database connection is established through a connection pool configured in <code>database/db.js</code>:</p> <pre><code>flowchart TD\n\nEnvVars[\"Environment Variables&lt;br&gt;process.env\"]\nCreatePool[\"mysql2.createPool()&lt;br&gt;database/db.js\"]\nPool[\"Connection Pool&lt;br&gt;Max 10 Connections\"]\nControllers[\"src/controllers.js\"]\nSocketHandler[\"src/sockets/socketHandler.js\"]\nRouter[\"src/router.js\"]\n\nEnvVars --&gt; CreatePool\nCreatePool --&gt; Pool\nPool --&gt; Controllers\nPool --&gt; SocketHandler\nPool --&gt; Router\n\nsubgraph subGraph0 [\"Application Components\"]\n    Controllers\n    SocketHandler\n    Router\nend</code></pre>"},{"location":"Deployment-%26-Configuration.html#database-schema-setup","title":"Database Schema Setup","text":"<p>Execute the following SQL to create the required database structure:</p> <p>For detailed schema information, see Database Schema, usuarios Table, productos Table, and mensajes Table.</p> <p>Sources: database/db.js L1-L20</p> <p>env/.env L1-L5</p>"},{"location":"Deployment-%26-Configuration.html#installation-steps","title":"Installation Steps","text":"<p>Follow these steps to install and configure the application:</p>"},{"location":"Deployment-%26-Configuration.html#1-clone-repository-and-install-dependencies","title":"1. Clone Repository and Install Dependencies","text":""},{"location":"Deployment-%26-Configuration.html#2-configure-environment","title":"2. Configure Environment","text":""},{"location":"Deployment-%26-Configuration.html#3-setup-database","title":"3. Setup Database","text":""},{"location":"Deployment-%26-Configuration.html#4-create-required-directories","title":"4. Create Required Directories","text":""},{"location":"Deployment-%26-Configuration.html#5-start-the-application","title":"5. Start the Application","text":"<p>Sources: package.json L1-L48</p> <p>index.js L62-L65</p>"},{"location":"Deployment-%26-Configuration.html#server-configuration","title":"Server Configuration","text":"<p>The application server is configured in <code>index.js</code> with multiple middleware layers and services.</p>"},{"location":"Deployment-%26-Configuration.html#server-initialization-sequence","title":"Server Initialization Sequence","text":"<pre><code>flowchart TD\n\nStart[\"Application Start&lt;br&gt;node index.js\"]\nLoadEnv[\"Load Environment&lt;br&gt;dotenv.config()&lt;br&gt;index.js:4\"]\nCreateApp[\"Create Express App&lt;br&gt;index.js:3\"]\nCreateHTTP[\"Create HTTP Server&lt;br&gt;http.createServer(app)&lt;br&gt;index.js:10\"]\nAttachSocketIO[\"Attach Socket.IO&lt;br&gt;socketIO(server)&lt;br&gt;index.js:12\"]\nConfigMiddleware[\"Configure Middleware&lt;br&gt;index.js:37-48\"]\nConfigViews[\"Configure View Engine&lt;br&gt;EJS&lt;br&gt;index.js:52\"]\nSetupWebSocket[\"Setup WebSocket Handler&lt;br&gt;setupSocket(io)&lt;br&gt;index.js:57\"]\nStartServer[\"Start Server&lt;br&gt;server.listen(3000)&lt;br&gt;index.js:62\"]\nReady[\"Server Ready&lt;br&gt;localhost:3000\"]\n\nStart --&gt; LoadEnv\nLoadEnv --&gt; CreateApp\nCreateApp --&gt; CreateHTTP\nCreateHTTP --&gt; AttachSocketIO\nAttachSocketIO --&gt; ConfigMiddleware\nConfigMiddleware --&gt; ConfigViews\nConfigViews --&gt; SetupWebSocket\nSetupWebSocket --&gt; StartServer\nStartServer --&gt; Ready</code></pre>"},{"location":"Deployment-%26-Configuration.html#middleware-configuration-order","title":"Middleware Configuration Order","text":"<p>The middleware stack is configured in the following order (critical for proper functionality):</p> Order Middleware Purpose File Reference 1 <code>cookieParser()</code> Parse HTTP cookies index.js L37 2 <code>express.urlencoded()</code> Parse form data index.js L41 3 <code>express.json()</code> Parse JSON bodies index.js L42 4 <code>express.static()</code> Serve static files index.js L43 5 Swagger UI API documentation index.js L44 6 <code>securityMiddleware</code> Security headers, rate limiting index.js L45 7 <code>i18n.init</code> Internationalization index.js L46 8 <code>setGlobals</code> Global template variables index.js L47 9 Application router Route handlers index.js L48"},{"location":"Deployment-%26-Configuration.html#port-configuration","title":"Port Configuration","text":"<p>The server listens on port <code>3000</code> by default. To change the port:</p> <pre><code>\n</code></pre>"},{"location":"Deployment-%26-Configuration.html#internationalization-configuration","title":"Internationalization Configuration","text":"<p>The i18n system is configured to support English and Spanish:</p> <pre><code>flowchart TD\n\nI18nConfig[\"i18n.configure()&lt;br&gt;index.js:23-31\"]\nLocalesDir[\"locales/ directory&lt;br&gt;en.json, es.json\"]\nCookie[\"lang cookie\"]\nQueryParam[\"?lang=en/es\"]\nMiddleware[\"i18n.init&lt;br&gt;index.js:46\"]\nTemplates[\"EJS Templates&lt;br&gt;__() function\"]\n\nLocalesDir --&gt; I18nConfig\nI18nConfig --&gt; Middleware\nCookie --&gt; Middleware\nQueryParam --&gt; Middleware\nMiddleware --&gt; Templates</code></pre> <p>Configuration parameters:</p> <ul> <li>Locales: <code>['en', 'es']</code></li> <li>Directory: <code>./locales</code></li> <li>Default Locale: <code>'es'</code></li> <li>Cookie Name: <code>'lang'</code></li> <li>Query Parameter: <code>'lang'</code></li> <li>Auto Reload: <code>true</code></li> <li>Sync Files: <code>true</code></li> </ul> <p>Sources: index.js L1-L66</p> <p>src/middlewares/security.js</p> <p>src/middlewares/setGlobals.js</p>"},{"location":"Deployment-%26-Configuration.html#static-assets-and-file-structure","title":"Static Assets and File Structure","text":"<p>The application serves static assets and handles file uploads with specific directory requirements.</p>"},{"location":"Deployment-%26-Configuration.html#file-system-structure-for-deployment","title":"File System Structure for Deployment","text":"<pre><code>flowchart TD\n\nRoot[\"Application Root\"]\nPublic[\"public/&lt;br&gt;Static Resources\"]\nCSS[\"public/css/&lt;br&gt;style.css, body.css\"]\nImages[\"public/resources/img/&lt;br&gt;Flags, Icons\"]\nUploads[\"public/resources/uploads/&lt;br&gt;User Profile Images\"]\nFonts[\"docs/fonts/&lt;br&gt;Montserrat, Open Sans\"]\nViews[\"views/&lt;br&gt;EJS Templates\"]\nPartials[\"views/partials/&lt;br&gt;Reusable Components\"]\nLocales[\"locales/&lt;br&gt;en.json, es.json\"]\nEnvDir[\"env/&lt;br&gt;.env file\"]\n\nRoot --&gt; Public\nRoot --&gt; Views\nRoot --&gt; Locales\nRoot --&gt; EnvDir\n\nsubgraph Configuration [\"Configuration\"]\n    EnvDir\nend\n\nsubgraph Localization [\"Localization\"]\n    Locales\nend\n\nsubgraph subGraph1 [\"View Templates\"]\n    Views\n    Partials\n    Views --&gt; Partials\nend\n\nsubgraph subGraph0 [\"Static Assets\"]\n    Public\n    CSS\n    Images\n    Uploads\n    Fonts\n    Public --&gt; CSS\n    Public --&gt; Images\n    Public --&gt; Uploads\nend</code></pre>"},{"location":"Deployment-%26-Configuration.html#static-asset-serving","title":"Static Asset Serving","text":"<p>Static files are served under the <code>/resources</code> route:</p> <pre><code>\n</code></pre> <p>URL Mapping:</p> <ul> <li><code>http://localhost:3000/resources/css/style.css</code> \u2192 <code>public/css/style.css</code></li> <li><code>http://localhost:3000/resources/img/flag_en.png</code> \u2192 <code>public/resources/img/flag_en.png</code></li> <li><code>http://localhost:3000/resources/uploads/user123.jpg</code> \u2192 <code>public/resources/uploads/user123.jpg</code></li> </ul>"},{"location":"Deployment-%26-Configuration.html#file-upload-configuration","title":"File Upload Configuration","text":"<p>User profile images are uploaded to <code>public/resources/uploads/</code> via the <code>multer</code> middleware. Ensure this directory exists and has write permissions:</p> <pre><code>\n</code></pre> <p>Sources: index.js L43</p> <p>public/css/style.css L1-L79</p> <p>views/partials/header.ejs L1-L33</p>"},{"location":"Deployment-%26-Configuration.html#production-deployment","title":"Production Deployment","text":"<p>Production deployment requires additional configuration for security, performance, and reliability.</p>"},{"location":"Deployment-%26-Configuration.html#production-environment-variables","title":"Production Environment Variables","text":"<p>Add production-specific variables to <code>env/.env</code>:</p> <pre><code>NODE_ENV=production\nDATABASE_HOST=production-db-host.example.com\nDATABASE_USER=prod_user\nDATABASE_PASS=strong_production_password\nDATABASE_NAME=registro_prod\nSECRET_KEY=very_long_random_production_secret_key_minimum_32_chars\nPORT=3000\n</code></pre>"},{"location":"Deployment-%26-Configuration.html#production-deployment-architecture","title":"Production Deployment Architecture","text":"<pre><code>flowchart TD\n\nInternet[\"Internet\"]\nNginx[\"Nginx&lt;br&gt;Port 80/443\"]\nPM2[\"PM2 Process Manager\"]\nApp1[\"Node.js Instance 1&lt;br&gt;Port 3000\"]\nApp2[\"Node.js Instance 2&lt;br&gt;Port 3001\"]\nApp3[\"Node.js Instance 3&lt;br&gt;Port 3002\"]\nMySQL[\"MySQL Database&lt;br&gt;Port 3306\"]\nFileSystem[\"Uploaded Files&lt;br&gt;/var/app/uploads\"]\nLogs[\"Application Logs&lt;br&gt;PM2 Logs\"]\nMetrics[\"System Metrics\"]\n\nInternet --&gt; Nginx\nNginx --&gt; PM2\nApp1 --&gt; MySQL\nApp2 --&gt; MySQL\nApp3 --&gt; MySQL\nApp1 --&gt; FileSystem\nApp2 --&gt; FileSystem\nApp3 --&gt; FileSystem\nPM2 --&gt; Logs\nPM2 --&gt; Metrics\n\nsubgraph Monitoring [\"Monitoring\"]\n    Logs\n    Metrics\nend\n\nsubgraph subGraph2 [\"Data Layer\"]\n    MySQL\n    FileSystem\nend\n\nsubgraph subGraph1 [\"Application Layer\"]\n    PM2\n    App1\n    App2\n    App3\n    PM2 --&gt; App1\n    PM2 --&gt; App2\n    PM2 --&gt; App3\nend\n\nsubgraph subGraph0 [\"Reverse Proxy Layer\"]\n    Nginx\nend</code></pre>"},{"location":"Deployment-%26-Configuration.html#using-pm2-process-manager","title":"Using PM2 Process Manager","text":"<p>PM2 is recommended for production deployment to manage the Node.js process:</p>"},{"location":"Deployment-%26-Configuration.html#pm2-cluster-mode","title":"PM2 Cluster Mode","text":"<p>For better performance, run multiple instances using cluster mode:</p> <p>PM2 Configuration File (<code>ecosystem.config.js</code>):</p> <pre><code>\n</code></pre> <p>Sources: index.js L62-L65</p>"},{"location":"Deployment-%26-Configuration.html#nginx-reverse-proxy-configuration","title":"Nginx Reverse Proxy Configuration","text":"<p>Configure Nginx as a reverse proxy for the Node.js application:</p> <p>Enable the configuration:</p> <p>Sources: index.js L10-L12</p> <p>src/sockets/socketHandler.js</p>"},{"location":"Deployment-%26-Configuration.html#docker-deployment","title":"Docker Deployment","text":"<p>For containerized deployment, create the following Docker configuration:</p>"},{"location":"Deployment-%26-Configuration.html#dockerfile","title":"Dockerfile","text":""},{"location":"Deployment-%26-Configuration.html#docker-composeyml","title":"docker-compose.yml","text":""},{"location":"Deployment-%26-Configuration.html#docker-deployment-commands","title":"Docker Deployment Commands","text":"<p>Sources: package.json L22-L43</p> <p>index.js L1-L66</p>"},{"location":"Deployment-%26-Configuration.html#security-considerations","title":"Security Considerations","text":""},{"location":"Deployment-%26-Configuration.html#production-security-checklist","title":"Production Security Checklist","text":"Security Measure Implementation Status HTTPS/TLS Configure SSL certificate in Nginx Required Environment Variables Never commit <code>.env</code> to version control Required JWT Secret Use strong random secret (32+ chars) Required Database Credentials Use strong passwords, limit privileges Required Rate Limiting Enabled via helmet middleware \u2713 Configured Security Headers Enabled via helmet middleware \u2713 Configured Input Validation Enabled via express-validator \u2713 Configured File Upload Validation Configure multer file type/size limits Review CORS Configuration Configure allowed origins Review Session Security HTTP-only cookies, secure flag \u2713 Configured"},{"location":"Deployment-%26-Configuration.html#security-configuration-flow","title":"Security Configuration Flow","text":"<pre><code>flowchart TD\n\nRequest[\"Incoming Request\"]\nHelmet[\"helmet&lt;br&gt;Security Headers\"]\nRateLimit[\"express-rate-limit&lt;br&gt;Brute Force Protection\"]\nAuthCheck[\"JWT Verification&lt;br&gt;verifyToken\"]\nRoleCheck[\"Role Authorization&lt;br&gt;verifyAdmin\"]\nRouteHandler[\"Route Handler\"]\n\nRequest --&gt; Helmet\nRoleCheck --&gt; RouteHandler\n\nsubgraph subGraph0 [\"Security Middleware Stack\"]\n    Helmet\n    RateLimit\n    AuthCheck\n    RoleCheck\n    Helmet --&gt; RateLimit\n    RateLimit --&gt; AuthCheck\n    AuthCheck --&gt; RoleCheck\nend</code></pre> <p>Security middleware is configured in: src/middlewares/security.js</p> <p>For detailed security configuration, see Security Measures.</p> <p>Sources: index.js L45</p> <p>src/middlewares/security.js</p> <p>src/middlewares/verifyToken.js</p> <p>src/middlewares/verifyAdmin.js</p>"},{"location":"Deployment-%26-Configuration.html#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"Deployment-%26-Configuration.html#application-logging","title":"Application Logging","text":"<p>Configure logging for production monitoring:</p>"},{"location":"Deployment-%26-Configuration.html#health-check-endpoint","title":"Health Check Endpoint","text":"<p>Add a health check endpoint for monitoring:</p> <p>Sources: index.js L62-L65</p>"},{"location":"Deployment-%26-Configuration.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"Deployment-%26-Configuration.html#common-deployment-issues","title":"Common Deployment Issues","text":"Issue Symptom Solution Database Connection Failed <code>ECONNREFUSED</code> error Verify <code>DATABASE_HOST</code>, <code>DATABASE_USER</code>, <code>DATABASE_PASS</code> in <code>.env</code> Port Already in Use <code>EADDRINUSE</code> error Change port in <code>index.js:62</code> or kill process using port 3000 JWT Authentication Fails 401 errors on protected routes Verify <code>SECRET_KEY</code> is set and consistent Static Assets Not Loading 404 on CSS/JS files Verify <code>/resources</code> path and file permissions File Upload Fails Upload errors Check <code>public/resources/uploads/</code> exists and has write permissions WebSocket Connection Fails Chat not working Verify Socket.IO upgrade headers in Nginx proxy Puppeteer PDF Error PDF generation fails Install Chromium dependencies (see Dockerfile) i18n Not Working Translations not loading Verify <code>locales/</code> directory exists with <code>en.json</code> and <code>es.json</code>"},{"location":"Deployment-%26-Configuration.html#database-connection-test","title":"Database Connection Test","text":"<p>Test database connectivity:</p> <p>Run: <code>node test-db.js</code></p> <p>Sources: database/db.js L1-L20</p> <p>index.js L4</p>"},{"location":"Deployment-%26-Configuration.html#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"Deployment-%26-Configuration.html#database-backup","title":"Database Backup","text":""},{"location":"Deployment-%26-Configuration.html#file-system-backup","title":"File System Backup","text":"<p>Sources: database/db.js L1-L20</p>"},{"location":"Deployment-%26-Configuration.html#performance-optimization","title":"Performance Optimization","text":""},{"location":"Deployment-%26-Configuration.html#recommended-production-optimizations","title":"Recommended Production Optimizations","text":"<ol> <li>Enable Gzip Compression (Nginx)</li> <li>Configure CDN for static assets</li> <li>Database Connection Pooling (already configured in <code>database/db.js</code>)</li> <li>Redis Session Store (upgrade from default memory store)</li> <li>Asset Minification for CSS/JS</li> <li>Image Optimization for uploads</li> <li>Database Indexing (already configured in schema)</li> </ol>"},{"location":"Deployment-%26-Configuration.html#connection-pool-configuration","title":"Connection Pool Configuration","text":"<p>The MySQL connection pool is configured with default settings. For high-traffic scenarios, adjust in <code>database/db.js</code>:</p> <pre><code>\n</code></pre> <p>Sources: database/db.js L1-L20</p>"},{"location":"Getting-Started.html","title":"Getting Started","text":"<p>Relevant source files * index.js * package-lock.json * package.json</p> <p>This document provides step-by-step instructions for installing, configuring, and running the registro-sesiones application for the first time. It covers prerequisite software requirements, dependency installation, environment variable configuration, database initialization, and application startup procedures.</p> <p>For detailed information about the system's architecture and components, see Architecture Overview. For deployment to production environments, see Deployment &amp; Configuration.</p>"},{"location":"Getting-Started.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This guide is intended for developers who need to set up a local development environment for the registro-sesiones application. By following these steps, you will have a fully functional instance of the application running on your local machine, ready for development or testing.</p>"},{"location":"Getting-Started.html#prerequisites","title":"Prerequisites","text":"<p>Before installing the application, ensure your development environment meets the following requirements:</p> Requirement Version Purpose Node.js &gt;= 18.0.0 Runtime environment (required by Express 5) npm &gt;= 6.0.0 Package manager MySQL &gt;= 5.7 or 8.0+ Database server Git Any recent version Source code management"},{"location":"Getting-Started.html#verifying-prerequisites","title":"Verifying Prerequisites","text":"<pre><code># Check Node.js version\nnode --version\n\n# Check npm version\nnpm --version\n\n# Check MySQL installation\nmysql --version\n</code></pre> <p>Sources: package-lock.json L1357-L1364</p> <p>index.js L1-L14</p>"},{"location":"Getting-Started.html#installation-steps","title":"Installation Steps","text":""},{"location":"Getting-Started.html#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/moichuelo/registro\ncd registro\n</code></pre>"},{"location":"Getting-Started.html#step-2-install-dependencies","title":"Step 2: Install Dependencies","text":"<p>The application uses npm as its package manager. Install all required dependencies by running:</p> <pre><code>npm install\n</code></pre> <p>This command will install all packages listed in package.json L22-L42</p> <p>including:</p> <ul> <li>express (5.1.0) - Web application framework</li> <li>socket.io (4.8.1) - Real-time bidirectional communication</li> <li>mysql2 (3.14.1) - MySQL database driver</li> <li>ejs (3.1.10) - Template engine</li> <li>bcryptjs (3.0.2) - Password hashing</li> <li>jsonwebtoken (9.0.2) - JWT authentication</li> <li>helmet (8.1.0) - Security middleware</li> <li>express-rate-limit (6.7.0) - Rate limiting</li> <li>puppeteer (24.14.0) - PDF generation</li> <li>i18n (0.15.1) - Internationalization</li> </ul> <p>Installation Flow Diagram:</p> <pre><code>flowchart TD\n\nStart[\"Clone Repository\"]\nInstall[\"npm install\"]\nPackageLock[\"Read package-lock.json\"]\nNodeModules[\"Download Dependencies&lt;br&gt;to node_modules/\"]\nExpress[\"Unsupported markdown: link\"]\nSocketIO[\"Unsupported markdown: link\"]\nMySQL[\"Unsupported markdown: link\"]\nJWT[\"Unsupported markdown: link\"]\nOther[\"bcryptjs, helmet,&lt;br&gt;puppeteer, etc.\"]\nComplete[\"Installation Complete\"]\n\nStart --&gt; Install\nInstall --&gt; PackageLock\nPackageLock --&gt; NodeModules\nNodeModules --&gt; Express\nNodeModules --&gt; SocketIO\nNodeModules --&gt; MySQL\nNodeModules --&gt; JWT\nNodeModules --&gt; Other\nExpress --&gt; Complete\nSocketIO --&gt; Complete\nMySQL --&gt; Complete\nJWT --&gt; Complete\nOther --&gt; Complete</code></pre> <p>Sources: package.json L1-L48</p> <p>package-lock.json L1-L37</p>"},{"location":"Getting-Started.html#environment-configuration","title":"Environment Configuration","text":"<p>The application uses the <code>dotenv</code> package to manage environment variables. Configuration is loaded from a file at <code>./env/.env</code> as specified in index.js L4</p>"},{"location":"Getting-Started.html#step-3-create-environment-file","title":"Step 3: Create Environment File","text":"<p>Create the directory and file structure:</p> <pre><code>mkdir -p env\ntouch env/.env\n</code></pre>"},{"location":"Getting-Started.html#step-4-configure-environment-variables","title":"Step 4: Configure Environment Variables","text":"<p>Open <code>env/.env</code> in a text editor and add the following configuration:</p> <pre><code># Database Configuration\nDB_HOST=localhost\nDB_USER=your_mysql_username\nDB_PASSWORD=your_mysql_password\nDB_DATABASE=registro_db\nDB_PORT=3306\n\n# JWT Secret (generate a secure random string)\nJWT_SECRET=your_secure_random_secret_key_here\n\n# Application Configuration\nNODE_ENV=development\nPORT=3000\n\n# Session Secret (generate a secure random string)\nSESSION_SECRET=your_session_secret_here\n</code></pre>"},{"location":"Getting-Started.html#environment-variable-reference","title":"Environment Variable Reference","text":"Variable Description Example <code>DB_HOST</code> MySQL server hostname <code>localhost</code> <code>DB_USER</code> Database username <code>root</code> <code>DB_PASSWORD</code> Database password <code>mypassword</code> <code>DB_DATABASE</code> Database name <code>registro_db</code> <code>DB_PORT</code> MySQL port <code>3306</code> <code>JWT_SECRET</code> Secret key for JWT signing 32+ character random string <code>SESSION_SECRET</code> Secret for session management 32+ character random string <code>NODE_ENV</code> Environment mode <code>development</code> or <code>production</code> <code>PORT</code> Application port <code>3000</code> <p>Security Note: Never commit the <code>.env</code> file to version control. Generate cryptographically secure random strings for <code>JWT_SECRET</code> and <code>SESSION_SECRET</code>.</p> <p>Sources: index.js L4</p> <p>package.json L26</p>"},{"location":"Getting-Started.html#database-setup","title":"Database Setup","text":""},{"location":"Getting-Started.html#step-5-create-mysql-database","title":"Step 5: Create MySQL Database","text":"<p>Connect to your MySQL server and create the application database:</p> <pre><code>mysql -u root -p\n</code></pre> <p>Then execute:</p> <pre><code>CREATE DATABASE registro_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n</code></pre>"},{"location":"Getting-Started.html#step-6-initialize-database-schema","title":"Step 6: Initialize Database Schema","text":"<p>The application requires three main tables: <code>usuarios</code>, <code>productos</code>, and <code>mensajes</code>. Execute the following SQL schema:</p> <pre><code>USE registro_db;\n\n-- Users table for authentication and authorization\nCREATE TABLE usuarios (\n    usuario VARCHAR(50) PRIMARY KEY,\n    nombre VARCHAR(100) NOT NULL,\n    rol ENUM('admin', 'user') DEFAULT 'user',\n    pass VARCHAR(255) NOT NULL,\n    imagen VARCHAR(255)\n);\n\n-- Products table for inventory management\nCREATE TABLE productos (\n    ref INT AUTO_INCREMENT PRIMARY KEY,\n    nombre VARCHAR(100) NOT NULL,\n    precio DECIMAL(10, 2) NOT NULL,\n    stock INT NOT NULL DEFAULT 0\n);\n\n-- Messages table for support chat system\nCREATE TABLE mensajes (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    de_usuario VARCHAR(50) NOT NULL,\n    para_usuario VARCHAR(50) NOT NULL,\n    mensaje TEXT NOT NULL,\n    fecha DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (de_usuario) REFERENCES usuarios(usuario),\n    FOREIGN KEY (para_usuario) REFERENCES usuarios(usuario)\n);\n</code></pre>"},{"location":"Getting-Started.html#step-7-create-initial-admin-user","title":"Step 7: Create Initial Admin User","text":"<p>Create at least one administrator account to access admin features:</p> <pre><code>-- Note: Password must be bcrypt hashed\n-- This example uses a pre-hashed version of \"admin123\"\nINSERT INTO usuarios (usuario, nombre, rol, pass) \nVALUES ('admin', 'Administrator', 'admin', '$2a$10$...');\n</code></pre> <p>Important: You must hash passwords using bcrypt before inserting them. Do not store plain text passwords.</p> <p>Database Entity Diagram:</p> <pre><code>#mermaid-fwym9e51kuu{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-fwym9e51kuu .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-fwym9e51kuu .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-fwym9e51kuu .error-icon{fill:#dddddd;}#mermaid-fwym9e51kuu .error-text{fill:#222222;stroke:#222222;}#mermaid-fwym9e51kuu .edge-thickness-normal{stroke-width:1px;}#mermaid-fwym9e51kuu .edge-thickness-thick{stroke-width:3.5px;}#mermaid-fwym9e51kuu .edge-pattern-solid{stroke-dasharray:0;}#mermaid-fwym9e51kuu .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-fwym9e51kuu .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-fwym9e51kuu .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-fwym9e51kuu .marker{fill:#999;stroke:#999;}#mermaid-fwym9e51kuu .marker.cross{stroke:#999;}#mermaid-fwym9e51kuu svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-fwym9e51kuu p{margin:0;}#mermaid-fwym9e51kuu .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-fwym9e51kuu .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-fwym9e51kuu .relationshipLabelBox rect{opacity:0.5;}#mermaid-fwym9e51kuu .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-fwym9e51kuu .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-fwym9e51kuu .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-fwym9e51kuu .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-fwym9e51kuu .node rect,#mermaid-fwym9e51kuu .node circle,#mermaid-fwym9e51kuu .node ellipse,#mermaid-fwym9e51kuu .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-fwym9e51kuu .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-fwym9e51kuu .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-fwym9e51kuu :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}sends/receivesusuariosvarcharusuarioPKvarcharnombreenumrolvarcharpassvarcharimagenmensajesintidPKvarcharde_usuarioFKvarcharpara_usuarioFKtextmensajedatetimefechaproductosintrefPKvarcharnombredecimalpreciointstock\n</code></pre> <p>Sources: Diagram 5 in architecture overview, package.json L37</p>"},{"location":"Getting-Started.html#running-the-application","title":"Running the Application","text":""},{"location":"Getting-Started.html#step-8-start-the-server","title":"Step 8: Start the Server","text":"<p>With environment variables configured and database initialized, start the application:</p> <pre><code>node index.js\n</code></pre> <p>You should see output similar to:</p> <pre><code>Servidor corriendo en http://localhost:3000\nSwagger disponible en http://localhost:3000/api-docs\n</code></pre> <p>This output originates from index.js L62-L64</p>"},{"location":"Getting-Started.html#application-startup-sequence","title":"Application Startup Sequence","text":"<pre><code>flowchart TD\n\nStart[\"node index.js\"]\nLoadEnv[\"Load Environment Variables&lt;br&gt;dotenv.config()\"]\nInitExpress[\"Initialize Express App&lt;br&gt;const app = express()\"]\nInitHTTP[\"Create HTTP Server&lt;br&gt;http.createServer(app)\"]\nInitSocketIO[\"Initialize Socket.IO&lt;br&gt;socketIO(server)\"]\nConfigMiddleware[\"Configure Middleware Stack\"]\nHelmet[\"helmet&lt;br&gt;Security headers\"]\nCookieParser[\"cookie-parser&lt;br&gt;Parse cookies\"]\nBodyParser[\"express.urlencoded/json&lt;br&gt;Body parsing\"]\nStaticFiles[\"Serve static files&lt;br&gt;/resources route\"]\nSecurity[\"Security middleware&lt;br&gt;Rate limiting\"]\nI18n[\"i18n.init&lt;br&gt;Language support\"]\nSetGlobals[\"setGlobals&lt;br&gt;Global variables\"]\nRouter[\"Load Router&lt;br&gt;require('./src/router')\"]\nSetupSocket[\"Setup WebSocket Handlers&lt;br&gt;setupSocket(io)\"]\nListen[\"server.listen(3000)\"]\nRunning[\"Application Running\"]\n\nStart --&gt; LoadEnv\nLoadEnv --&gt; InitExpress\nInitExpress --&gt; InitHTTP\nInitHTTP --&gt; InitSocketIO\nInitSocketIO --&gt; ConfigMiddleware\nConfigMiddleware --&gt; Helmet\nHelmet --&gt; CookieParser\nCookieParser --&gt; BodyParser\nBodyParser --&gt; StaticFiles\nStaticFiles --&gt; Security\nSecurity --&gt; I18n\nI18n --&gt; SetGlobals\nSetGlobals --&gt; Router\nRouter --&gt; SetupSocket\nSetupSocket --&gt; Listen\nListen --&gt; Running</code></pre> <p>Sources: index.js L1-L66</p>"},{"location":"Getting-Started.html#verification","title":"Verification","text":""},{"location":"Getting-Started.html#step-9-verify-installation","title":"Step 9: Verify Installation","text":"<p>After starting the server, verify the application is running correctly:</p>"},{"location":"Getting-Started.html#1-access-web-interface","title":"1. Access Web Interface","text":"<p>Open your browser and navigate to:</p> <pre><code>http://localhost:3000\n</code></pre> <p>You should see the application's homepage.</p>"},{"location":"Getting-Started.html#2-check-api-documentation","title":"2. Check API Documentation","text":"<p>Access the Swagger API documentation at:</p> <pre><code>http://localhost:3000/api-docs\n</code></pre> <p>This endpoint is configured in index.js L44</p> <p>and provides interactive API documentation.</p>"},{"location":"Getting-Started.html#3-test-authentication","title":"3. Test Authentication","text":"<p>Navigate to the login page:</p> <pre><code>http://localhost:3000/login\n</code></pre> <p>Attempt to log in with the admin credentials you created in Step 7.</p>"},{"location":"Getting-Started.html#4-verify-static-assets","title":"4. Verify Static Assets","text":"<p>Check that CSS and images load correctly. Static files are served from the <code>/resources</code> route, mapping to the <code>public/</code> directory as configured in index.js L43</p>"},{"location":"Getting-Started.html#5-verify-real-time-communication","title":"5. Verify Real-time Communication","text":"<p>The Socket.IO server should be initialized and ready for WebSocket connections. Check browser console for Socket.IO connection messages.</p>"},{"location":"Getting-Started.html#verification-checklist","title":"Verification Checklist","text":"Component Verification Method Expected Result HTTP Server <code>curl http://localhost:3000</code> HTML response Database Connection Login attempt Successful authentication Static Files Access <code>/resources/css/style.css</code> CSS file served Socket.IO Browser DevTools Console Socket.IO connected API Documentation Access <code>/api-docs</code> Swagger UI displayed i18n Click language switcher Language changes <p>Sources: index.js L43-L64</p>"},{"location":"Getting-Started.html#application-architecture-at-startup","title":"Application Architecture at Startup","text":"<pre><code>flowchart TD\n\nIndexJS[\"index.js:1-66\"]\nExpress[\"express&lt;br&gt;HTTP framework\"]\nHTTP[\"http&lt;br&gt;Create server\"]\nSocketIO[\"socket.io&lt;br&gt;WebSocket server\"]\nDB[\"mysql2&lt;br&gt;Database driver\"]\nDotenv[\"dotenv&lt;br&gt;Environment config\"]\nRouter[\"src/router.js&lt;br&gt;Route definitions\"]\nSocketHandler[\"src/sockets/socketHandler.js&lt;br&gt;WebSocket logic\"]\nSecurity[\"src/middlewares/security.js&lt;br&gt;Security middleware\"]\nSetGlobals[\"src/middlewares/setGlobals.js&lt;br&gt;Global context\"]\nMySQLDB[\"MySQL Database&lt;br&gt;usuarios, productos,&lt;br&gt;mensajes tables\"]\n\nIndexJS --&gt; Dotenv\nIndexJS --&gt; Express\nIndexJS --&gt; HTTP\nIndexJS --&gt; SocketIO\nIndexJS --&gt; Router\nIndexJS --&gt; SocketHandler\nIndexJS --&gt; Security\nIndexJS --&gt; SetGlobals\nRouter --&gt; DB\nSocketHandler --&gt; DB\nDB --&gt; MySQLDB\n\nsubgraph subGraph3 [\"External Services\"]\n    MySQLDB\nend\n\nsubgraph subGraph2 [\"Application Components\"]\n    Router\n    SocketHandler\n    Security\n    SetGlobals\nend\n\nsubgraph subGraph1 [\"Core Dependencies\"]\n    Express\n    HTTP\n    SocketIO\n    DB\n    Dotenv\nend\n\nsubgraph subGraph0 [\"index.js Entry Point\"]\n    IndexJS\nend</code></pre> <p>Sources: index.js L1-L66</p> <p>package.json L22-L42</p>"},{"location":"Getting-Started.html#next-steps","title":"Next Steps","text":"<p>Once the application is running successfully, you can:</p> <ol> <li>Explore the Codebase - See Architecture Overview for a comprehensive understanding of system components</li> <li>Configure Routes - Review Routing System to understand endpoint structure</li> <li>Set Up Authentication - Learn about Authentication &amp; Authorization mechanisms</li> <li>Explore Real-time Features - Understand the Real-time Communication System</li> <li>Review Security - Study Security Measures implemented in the application</li> <li>Work with Templates - Examine View Layer &amp; Templates for frontend development</li> <li>Generate PDFs - Explore PDF Generation capabilities</li> </ol>"},{"location":"Getting-Started.html#development-vs-production","title":"Development vs Production","text":"<p>This guide configures a development environment. For production deployment:</p> <ul> <li>Set <code>NODE_ENV=production</code> in environment variables</li> <li>Use a process manager (PM2, systemd) instead of running <code>node index.js</code> directly</li> <li>Configure proper SSL/TLS certificates</li> <li>Review security settings in Security Measures</li> <li>See Deployment &amp; Configuration for complete production setup</li> </ul>"},{"location":"Getting-Started.html#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":"Issue Possible Cause Solution \"Cannot find module\" error Dependencies not installed Run <code>npm install</code> \"ECONNREFUSED\" database error MySQL not running or wrong credentials Check MySQL service and <code>.env</code> configuration Port 3000 already in use Another process using port Change <code>PORT</code> in <code>.env</code> or stop conflicting process JWT errors Missing or invalid JWT_SECRET Set valid <code>JWT_SECRET</code> in <code>.env</code> Static files not loading Incorrect path configuration Verify <code>public/</code> directory exists <p>Sources: index.js L1-L66</p> <p>package.json L1-L48</p>"},{"location":"Getting-Started.html#summary","title":"Summary","text":"<p>You have successfully:</p> <ul> <li>\u2713 Installed Node.js dependencies</li> <li>\u2713 Configured environment variables in <code>env/.env</code></li> <li>\u2713 Created and initialized the MySQL database</li> <li>\u2713 Started the application server on port 3000</li> <li>\u2713 Verified core functionality</li> </ul> <p>The application is now running with:</p> <ul> <li>Express HTTP server listening on <code>http://localhost:3000</code></li> <li>Socket.IO WebSocket server for real-time communication</li> <li>MySQL database connection for data persistence</li> <li>EJS template engine for server-side rendering</li> <li>JWT-based authentication system</li> <li>Swagger API documentation at <code>/api-docs</code></li> </ul> <p>Sources: index.js L1-L66</p> <p>package.json L1-L48</p>"},{"location":"HTTP-Endpoints.html","title":"HTTP Endpoints","text":"<p>Relevant source files * src/router.js</p> <p>This document provides a comprehensive reference for all HTTP endpoints exposed by the Express application. All routes are defined in src/router.js</p> <p>and handle various functionalities including authentication, page rendering, product management, real-time chat support, PDF generation, and internationalization.</p> <p>For information about WebSocket events and real-time communication, see 15.2. For details about authentication mechanisms and middleware, see 6.</p>"},{"location":"HTTP-Endpoints.html#endpoint-categories","title":"Endpoint Categories","text":"<p>The application exposes 20 distinct HTTP endpoints organized into the following functional categories:</p> <pre><code>flowchart TD\n\nPdfPuppeteer[\"GET /pdf/descargar&lt;br&gt;Puppeteer PDF&lt;br&gt;(verifyToken)\"]\nPdfKit[\"GET /pdfkit/descargar&lt;br&gt;PDFKit PDF&lt;br&gt;(verifyToken)\"]\nApiMensajes[\"GET /api/mensajes?con=user&lt;br&gt;Get User Messages&lt;br&gt;(verifyAdmin)\"]\nApiMensajesMios[\"GET /api/mensajes/mios&lt;br&gt;Get My Messages&lt;br&gt;(verifyToken)\"]\nApiUsuariosConv[\"GET /api/usuarios-conversaciones&lt;br&gt;Get User List&lt;br&gt;(verifyAdmin)\"]\nDeleteProduct[\"GET /delete/:id&lt;br&gt;Delete Product\"]\nPostSave[\"POST /save&lt;br&gt;Create Product\"]\nPostUpdate[\"POST /update&lt;br&gt;Update Product\"]\nAdminPage[\"GET /admin&lt;br&gt;Admin Dashboard&lt;br&gt;(verifyToken)\"]\nPdfAdminPage[\"GET /pdfAdmin&lt;br&gt;PDF Preview&lt;br&gt;(verifyToken)\"]\nCreatePage[\"GET /create&lt;br&gt;Create Product Form\"]\nEditPage[\"GET /edit/:id&lt;br&gt;Edit Product Form\"]\nSoportePage[\"GET /soporte&lt;br&gt;Support Chat&lt;br&gt;(verifyToken)\"]\nPostAuth[\"POST /auth&lt;br&gt;Login Authentication&lt;br&gt;(Rate Limited)\"]\nPostRegister[\"POST /register&lt;br&gt;User Registration&lt;br&gt;(File Upload + Validation)\"]\nGetLogout[\"GET /logout&lt;br&gt;Clear Session\"]\nHome[\"GET /&lt;br&gt;Homepage\"]\nLoginPage[\"GET /login&lt;br&gt;Login Form\"]\nRegisterPage[\"GET /registro&lt;br&gt;Registration Form\"]\nSetLang[\"GET /set-lang/:lang&lt;br&gt;Language Switcher\"]\n\nsubgraph subGraph5 [\"PDF Generation\"]\n    PdfPuppeteer\n    PdfKit\nend\n\nsubgraph subGraph4 [\"API Endpoints (JSON)\"]\n    ApiMensajes\n    ApiMensajesMios\n    ApiUsuariosConv\nend\n\nsubgraph subGraph3 [\"Product Management\"]\n    DeleteProduct\n    PostSave\n    PostUpdate\nend\n\nsubgraph subGraph2 [\"Page Rendering (Protected)\"]\n    AdminPage\n    PdfAdminPage\n    CreatePage\n    EditPage\n    SoportePage\nend\n\nsubgraph subGraph1 [\"Authentication Endpoints\"]\n    PostAuth\n    PostRegister\n    GetLogout\nend\n\nsubgraph subGraph0 [\"Public Endpoints\"]\n    Home\n    LoginPage\n    RegisterPage\n    SetLang\nend</code></pre> <p>Sources: src/router.js L1-L607</p>"},{"location":"HTTP-Endpoints.html#authentication-and-authorization-middleware","title":"Authentication and Authorization Middleware","text":"<p>The following middleware functions are applied to protected endpoints:</p> Middleware Purpose Effect Applied To <code>verifyToken</code> JWT validation Extracts and verifies JWT from cookie, attaches <code>req.user</code> User-protected routes <code>verifyAdmin</code> Admin role check Requires <code>req.user.rol === 'admin'</code> (stacked on <code>verifyToken</code>) Admin-only routes <code>limiter</code> Rate limiting Prevents brute-force attacks on login <code>/auth</code> endpoint <code>upload.single()</code> File upload Handles multipart/form-data for profile images <code>/register</code> endpoint <p>Sources: src/router.js L16-L21</p>"},{"location":"HTTP-Endpoints.html#public-endpoints","title":"Public Endpoints","text":""},{"location":"HTTP-Endpoints.html#get","title":"GET /","text":"<p>Purpose: Render the application homepage.</p> <p>Authentication: None (public access).</p> <p>Behavior:</p> <ul> <li>If a valid JWT cookie exists, displays personalized greeting with username</li> <li>If no JWT exists, prompts user to log in</li> </ul> <p>Response: Renders <code>index.ejs</code> template.</p> <p>Request Example:</p> <pre><code>GET / HTTP/1.1\nCookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Template Variables:</p> <pre><code>\n</code></pre> <p>Sources: src/router.js L59-L74</p>"},{"location":"HTTP-Endpoints.html#get-login","title":"GET /login","text":"<p>Purpose: Render the login form page.</p> <p>Authentication: None (public access).</p> <p>Response: Renders <code>login.ejs</code> template.</p> <p>Sources: src/router.js L75-L77</p>"},{"location":"HTTP-Endpoints.html#get-registro","title":"GET /registro","text":"<p>Purpose: Render the user registration form page.</p> <p>Authentication: None (public access).</p> <p>Response: Renders <code>register.ejs</code> template.</p> <p>Sources: src/router.js L78-L80</p>"},{"location":"HTTP-Endpoints.html#get-set-langlang","title":"GET /set-lang/:lang","text":"<p>Purpose: Set the user's language preference and redirect back.</p> <p>Authentication: None (public access).</p> <p>URL Parameters:</p> Parameter Type Required Valid Values Description <code>lang</code> string Yes <code>'es'</code>, <code>'en'</code> Language code <p>Query Parameters:</p> Parameter Type Required Default Description <code>returnTo</code> string No <code>/</code> URL to redirect after setting language <p>Behavior:</p> <ul> <li>Sets a <code>lang</code> cookie with the specified language</li> <li>Cookie expires in 15 minutes (900000 ms)</li> <li>Redirects to <code>returnTo</code> parameter or <code>/</code> by default</li> </ul> <p>Request Example:</p> <pre><code>GET /set-lang/es?returnTo=/admin HTTP/1.1\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 302 Found\nLocation: /admin\nSet-Cookie: lang=es; Path=/; HttpOnly; Max-Age=900000\n</code></pre> <p>Sources: src/router.js L398-L407</p>"},{"location":"HTTP-Endpoints.html#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"HTTP-Endpoints.html#post-auth","title":"POST /auth","text":"<p>Purpose: Authenticate user credentials and issue JWT token.</p> <p>Authentication: None (but rate limited).</p> <p>Middleware: <code>limiter</code> - Prevents brute-force attacks.</p> <p>Request Body (application/x-www-form-urlencoded):</p> Field Type Required Description <code>user</code> string Yes Username <code>pass</code> string Yes Password (plaintext) <p>Request Example:</p> <pre><code>POST /auth HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\nuser=john&amp;pass=secret123\n</code></pre> <p>Response on Success:</p> <pre><code>HTTP/1.1 200 OK\nSet-Cookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; Path=/; HttpOnly; Max-Age=3600000\nContent-Type: text/html\n\n(Renders login.ejs with success alert)\n</code></pre> <p>JWT Payload Structure:</p> <pre><code>\n</code></pre> <p>Error Responses:</p> Status Condition Rendered Alert 401 Invalid credentials \"El usuario o la contrase\u00f1a son incorrectos\" 400 Missing user/pass \"Introduzca su usuario y contrase\u00f1a\" <p>Password Verification:</p> <ul> <li>Password is hashed using bcrypt with salt rounds = 8</li> <li>Comparison performed via <code>bcrypt.compare()</code></li> </ul> <p>Sources: src/router.js L532-L601</p>"},{"location":"HTTP-Endpoints.html#post-register","title":"POST /register","text":"<p>Purpose: Register a new user account with optional profile image.</p> <p>Authentication: None (public access).</p> <p>Middleware:</p> <ul> <li><code>upload.single(\"profileImage\")</code> - Handles file upload</li> <li><code>express-validator</code> - Validates input fields</li> </ul> <p>Request Body (multipart/form-data):</p> Field Type Required Validation Description <code>user</code> string Yes min 4 chars Username <code>name</code> string Yes min 4 chars Full name <code>pass</code> string Yes min 4 chars Password <code>email</code> string Yes valid email Email address <code>edad</code> number Yes numeric Age <code>rol</code> string Yes - User role <code>profileImage</code> file No - Profile image file <p>Validation Rules:</p> <pre><code>\n</code></pre> <p>Request Example:</p> <pre><code>POST /register HTTP/1.1\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary...\n\n------WebKitFormBoundary...\nContent-Disposition: form-data; name=\"user\"\n\njohn\n------WebKitFormBoundary...\nContent-Disposition: form-data; name=\"pass\"\n\nsecret123\n------WebKitFormBoundary...\nContent-Disposition: form-data; name=\"profileImage\"; filename=\"avatar.jpg\"\nContent-Type: image/jpeg\n\n(binary data)\n------WebKitFormBoundary...--\n</code></pre> <p>Behavior:</p> <ol> <li>Validates all input fields</li> <li>Hashes password using bcrypt (8 rounds)</li> <li>Saves uploaded image to <code>public/uploads/</code> (if provided)</li> <li>Inserts user record into <code>usuarios</code> table</li> <li>Renders success/failure alert</li> </ol> <p>Response on Success:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/html\n\n(Renders register.ejs with success alert)\n</code></pre> <p>Response on Validation Failure:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: text/html\n\n(Renders register.ejs with validation errors and previous values)\n</code></pre> <p>Database Insert:</p> <pre><code>\n</code></pre> <pre><code>\n</code></pre> <p>Sources: src/router.js L414-L484</p>"},{"location":"HTTP-Endpoints.html#get-logout","title":"GET /logout","text":"<p>Purpose: Clear authentication session and log out user.</p> <p>Authentication: None (but typically called by authenticated users).</p> <p>Behavior:</p> <ul> <li>Clears the <code>token</code> cookie</li> <li>Redirects to homepage</li> </ul> <p>Request Example:</p> <pre><code>GET /logout HTTP/1.1\nCookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 302 Found\nLocation: /\nSet-Cookie: token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT\n</code></pre> <p>Sources: src/router.js L215-L218</p>"},{"location":"HTTP-Endpoints.html#page-rendering-endpoints-protected","title":"Page Rendering Endpoints (Protected)","text":""},{"location":"HTTP-Endpoints.html#get-admin","title":"GET /admin","text":"<p>Purpose: Render the admin dashboard with product listing.</p> <p>Authentication: <code>verifyToken</code> middleware required.</p> <p>Authorization: Any authenticated user (not admin-only).</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Response: Renders <code>admin.ejs</code> template.</p> <p>Template Variables:</p> <pre><code>\n</code></pre> <p>Request Example:</p> <pre><code>GET /admin HTTP/1.1\nCookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Error Response:</p> Status Condition 401 Invalid or missing JWT token 500 Database query error <p>Sources: src/router.js L119-L134</p>"},{"location":"HTTP-Endpoints.html#get-pdfadmin","title":"GET /pdfAdmin","text":"<p>Purpose: Render PDF preview page with product data (used by Puppeteer).</p> <p>Authentication: <code>verifyToken</code> middleware required.</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Response: Renders <code>pdfTabla.ejs</code> template (designed for PDF conversion).</p> <p>Template Variables: Same as <code>/admin</code> endpoint.</p> <p>Sources: src/router.js L136-L151</p>"},{"location":"HTTP-Endpoints.html#get-create","title":"GET /create","text":"<p>Purpose: Render the product creation form.</p> <p>Authentication: None explicitly (but typically accessed by admins).</p> <p>Response: Renders <code>create.ejs</code> template.</p> <p>Sources: src/router.js L153-L155</p>"},{"location":"HTTP-Endpoints.html#get-editid","title":"GET /edit/:id","text":"<p>Purpose: Render the product editing form with existing product data.</p> <p>Authentication: None explicitly (but typically accessed by admins).</p> <p>URL Parameters:</p> Parameter Type Required Description <code>id</code> integer Yes Product reference (<code>ref</code>) <p>Database Query:</p> <pre><code>\n</code></pre> <p>Response: Renders <code>edit.ejs</code> template.</p> <p>Template Variables:</p> <pre><code>\n</code></pre> <p>Request Example:</p> <pre><code>GET /edit/1 HTTP/1.1\n</code></pre> <p>Error Response:</p> Status Condition 500 Database query error or product not found <p>Sources: src/router.js L186-L196</p>"},{"location":"HTTP-Endpoints.html#get-deleteid","title":"GET /delete/:id","text":"<p>Purpose: Delete a product and redirect to admin page.</p> <p>Authentication: None explicitly (but should be admin-only).</p> <p>URL Parameters:</p> Parameter Type Required Description <code>id</code> integer Yes Product reference (<code>ref</code>) <p>Database Query:</p> <pre><code>\n</code></pre> <p>Behavior:</p> <ul> <li>Deletes product from database</li> <li>Redirects to <code>/admin</code></li> </ul> <p>Request Example:</p> <pre><code>GET /delete/1 HTTP/1.1\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 302 Found\nLocation: /admin\n</code></pre> <p>Sources: src/router.js L198-L208</p>"},{"location":"HTTP-Endpoints.html#get-soporte","title":"GET /soporte","text":"<p>Purpose: Render the support chat interface.</p> <p>Authentication: <code>verifyToken</code> middleware required.</p> <p>Response: Renders <code>soporte.ejs</code> template.</p> <p>Template Variables:</p> <pre><code>\n</code></pre> <p>Request Example:</p> <pre><code>GET /soporte HTTP/1.1\nCookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Notes:</p> <ul> <li>Admin users see a multi-conversation interface with user list</li> <li>Regular users see a single-conversation interface</li> <li>Real-time messaging handled via Socket.IO (see 15.2)</li> </ul> <p>Sources: src/router.js L220-L227</p>"},{"location":"HTTP-Endpoints.html#product-management-endpoints","title":"Product Management Endpoints","text":""},{"location":"HTTP-Endpoints.html#post-save","title":"POST /save","text":"<p>Purpose: Create a new product.</p> <p>Authentication: None explicitly (but should be admin-only).</p> <p>Handler: Delegated to <code>crud.save</code> controller function.</p> <p>Request Body: Expected to contain product details (defined in controllers module).</p> <p>Sources: src/router.js L603</p>"},{"location":"HTTP-Endpoints.html#post-update","title":"POST /update","text":"<p>Purpose: Update an existing product.</p> <p>Authentication: None explicitly (but should be admin-only).</p> <p>Handler: Delegated to <code>crud.update</code> controller function.</p> <p>Request Body: Expected to contain product ID and updated details (defined in controllers module).</p> <p>Sources: src/router.js L604</p>"},{"location":"HTTP-Endpoints.html#api-endpoints-json-responses","title":"API Endpoints (JSON Responses)","text":"<pre><code>flowchart TD\n\nAdminClient[\"Admin Client\"]\nUserClient[\"User Client\"]\nApiMensajes[\"GET /api/mensajes?con=user&lt;br&gt;verifyAdmin\"]\nApiMensajesMios[\"GET /api/mensajes/mios&lt;br&gt;verifyToken\"]\nApiUsuarios[\"GET /api/usuarios-conversaciones&lt;br&gt;verifyAdmin\"]\nMensajesTable[\"mensajes Table\"]\nUsuariosTable[\"usuarios Table\"]\n\nAdminClient --&gt; ApiMensajes\nUserClient --&gt; ApiMensajesMios\nAdminClient --&gt; ApiUsuarios\nApiMensajes --&gt; MensajesTable\nApiMensajesMios --&gt; MensajesTable\nApiUsuarios --&gt; MensajesTable\nApiUsuarios --&gt; UsuariosTable\n\nsubgraph Database [\"Database\"]\n    MensajesTable\n    UsuariosTable\nend\n\nsubgraph subGraph1 [\"API Endpoints\"]\n    ApiMensajes\n    ApiMensajesMios\n    ApiUsuarios\nend\n\nsubgraph subGraph0 [\"Client Requests\"]\n    AdminClient\n    UserClient\nend</code></pre> <p>Sources: src/router.js L229-L315</p>"},{"location":"HTTP-Endpoints.html#get-apimensajes","title":"GET /api/mensajes","text":"<p>Purpose: Retrieve all messages for a specific user (admin-only).</p> <p>Authentication: <code>verifyAdmin</code> middleware required.</p> <p>Query Parameters:</p> Parameter Type Required Description <code>con</code> string Yes Username to retrieve messages for <p>Database Query:</p> <pre><code>\n</code></pre> <p>Request Example:</p> <pre><code>GET /api/mensajes?con=john HTTP/1.1\nCookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Response on Success:</p> <pre><code>\n</code></pre> <p>Error Responses:</p> Status Condition Response Body 400 Missing <code>con</code> parameter <code>{ \"error\": \"Falta el par\u00e1metro ?con=usuario\" }</code> 401 Not authenticated - 403 Not admin - 500 Database error <code>{ \"error\": \"Error al obtener mensajes\" }</code> <p>Sources: src/router.js L229-L253</p>"},{"location":"HTTP-Endpoints.html#get-apimensajesmios","title":"GET /api/mensajes/mios","text":"<p>Purpose: Retrieve all messages for the authenticated user.</p> <p>Authentication: <code>verifyToken</code> middleware required.</p> <p>Query Parameters: None (uses <code>req.user.user</code> from JWT).</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Request Example:</p> <pre><code>GET /api/mensajes/mios HTTP/1.1\nCookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Response on Success:</p> <pre><code>\n</code></pre> <p>Error Responses:</p> Status Condition Response Body 401 Not authenticated - 403 User not found in token <code>{ \"error\": \"No autorizado\" }</code> 500 Database error <code>{ \"error\": \"Error interno\" }</code> <p>Sources: src/router.js L256-L280</p>"},{"location":"HTTP-Endpoints.html#get-apiusuarios-conversaciones","title":"GET /api/usuarios-conversaciones","text":"<p>Purpose: Retrieve list of non-admin users who have conversations with admins.</p> <p>Authentication: <code>verifyAdmin</code> middleware required.</p> <p>Query Parameters: None.</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Query Explanation:</p> <ol> <li>Finds messages sent TO admins (extracts sender as <code>de_usuario</code>)</li> <li>Finds messages sent FROM admins (extracts recipient as <code>para_usuario</code>)</li> <li>Unions both result sets (eliminates duplicates)</li> <li>Filters out admin usernames</li> <li>Returns distinct user list</li> </ol> <p>Request Example:</p> <pre><code>GET /api/usuarios-conversaciones HTTP/1.1\nCookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Response on Success:</p> <pre><code>\n</code></pre> <p>Error Responses:</p> Status Condition Response Body 401 Not authenticated - 403 Not admin - 500 Database error <code>{ \"error\": \"Error interno\" }</code> <p>Sources: src/router.js L283-L315</p>"},{"location":"HTTP-Endpoints.html#pdf-generation-endpoints","title":"PDF Generation Endpoints","text":"<p>Both endpoints require authentication and generate downloadable PDF files containing product listings.</p> <pre><code>flowchart TD\n\nClient[\"Client Request\"]\nPuppeteerRoute[\"GET /pdf/descargar&lt;br&gt;verifyToken\"]\nPdfKitRoute[\"GET /pdfkit/descargar&lt;br&gt;verifyToken\"]\nQueryDB[\"Query productos Table\"]\nRenderEJS[\"Render pdfTabla.ejs to HTML\"]\nLaunchBrowser[\"Launch Headless Chrome\"]\nConvertPDF[\"Convert HTML to PDF\"]\nCreateDoc[\"Create PDFDocument\"]\nWriteContent[\"Programmatically Write Content\"]\nFinalizeDoc[\"Finalize Document\"]\nResponse[\"PDF Download Response\"]\n\nClient --&gt; PuppeteerRoute\nClient --&gt; PdfKitRoute\nPuppeteerRoute --&gt; QueryDB\nPdfKitRoute --&gt; QueryDB\nConvertPDF --&gt; Response\nFinalizeDoc --&gt; Response\n\nsubgraph subGraph3 [\"Generation Process\"]\n    QueryDB\n    QueryDB --&gt; RenderEJS\n    QueryDB --&gt; CreateDoc\n\nsubgraph subGraph2 [\"PDFKit Approach\"]\n    CreateDoc\n    WriteContent\n    FinalizeDoc\n    CreateDoc --&gt; WriteContent\n    WriteContent --&gt; FinalizeDoc\nend\n\nsubgraph subGraph1 [\"Puppeteer Approach\"]\n    RenderEJS\n    LaunchBrowser\n    ConvertPDF\n    RenderEJS --&gt; LaunchBrowser\n    LaunchBrowser --&gt; ConvertPDF\nend\nend\n\nsubgraph subGraph0 [\"PDF Generation Routes\"]\n    PuppeteerRoute\n    PdfKitRoute\nend</code></pre> <p>Sources: src/router.js L317-L396</p>"},{"location":"HTTP-Endpoints.html#get-pdfdescargar","title":"GET /pdf/descargar","text":"<p>Purpose: Generate and download a PDF of product listings using Puppeteer.</p> <p>Authentication: <code>verifyToken</code> middleware required.</p> <p>Generation Method: HTML-to-PDF via headless Chrome.</p> <p>Process Flow:</p> <ol> <li>Queries <code>productos</code> table</li> <li>Renders <code>pdfTabla.ejs</code> template to HTML string</li> <li>Launches headless Puppeteer browser</li> <li>Loads HTML into new page</li> <li>Generates PDF with A4 format</li> <li>Sends PDF buffer to client</li> </ol> <p>Request Example:</p> <pre><code>GET /pdf/descargar HTTP/1.1\nCookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Response on Success:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/pdf\nContent-Disposition: attachment; filename=\"productos.pdf\"\n\n(PDF binary data)\n</code></pre> <p>Puppeteer Configuration:</p> <pre><code>\n</code></pre> <p>PDF Options:</p> <pre><code>\n</code></pre> <p>Error Responses:</p> Status Condition 401 Not authenticated 500 Database error or PDF generation error <p>Sources: src/router.js L317-L353</p>"},{"location":"HTTP-Endpoints.html#get-pdfkitdescargar","title":"GET /pdfkit/descargar","text":"<p>Purpose: Generate and download a PDF of product listings using PDFKit.</p> <p>Authentication: <code>verifyToken</code> middleware required.</p> <p>Generation Method: Programmatic PDF creation (no HTML rendering).</p> <p>Process Flow:</p> <ol> <li>Queries <code>productos</code> table</li> <li>Creates <code>PDFDocument</code> instance (A4, 40px margin)</li> <li>Pipes document to HTTP response</li> <li>Writes title: \"Listado de Productos\"</li> <li>Writes table headers (Helvetica-Bold, 12pt)</li> <li>Iterates products and writes rows (Helvetica, 11pt)</li> <li>Finalizes document</li> </ol> <p>Request Example:</p> <pre><code>GET /pdfkit/descargar HTTP/1.1\nCookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Response on Success:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/pdf\nContent-Disposition: attachment; filename=\"productos_desde_cero.pdf\"\n\n(PDF binary data)\n</code></pre> <p>Document Structure:</p> <pre><code>Title: \"Listado de Productos\" (18pt, centered)\n|\nTable Headers (Bold, 12pt):\n  Referencia (x=50) | Nombre (x=150) | Precio (x=300) | Stock (x=380)\n|\nProduct Rows (11pt, 20px spacing):\n  ref | nombre | precio | stock\n  ...\n</code></pre> <p>Positioning Coordinates:</p> Column X Position Content Referencia 50 <code>p.ref.toString()</code> Nombre 150 <code>p.nombre</code> Precio 300 <code>Number(p.precio).toFixed(2)</code> Stock 380 <code>p.stock.toString()</code> <p>Error Responses:</p> Status Condition 401 Not authenticated 500 Database error <p>Sources: src/router.js L355-L396</p>"},{"location":"HTTP-Endpoints.html#endpoint-summary-table","title":"Endpoint Summary Table","text":"Method Path Auth Purpose Response Type GET <code>/</code> None Homepage HTML GET <code>/login</code> None Login form HTML GET <code>/registro</code> None Registration form HTML GET <code>/set-lang/:lang</code> None Set language Redirect POST <code>/auth</code> Rate limited Authenticate user HTML POST <code>/register</code> File upload Register user HTML GET <code>/logout</code> None Clear session Redirect GET <code>/admin</code> <code>verifyToken</code> Admin dashboard HTML GET <code>/pdfAdmin</code> <code>verifyToken</code> PDF preview page HTML GET <code>/create</code> None Create product form HTML GET <code>/edit/:id</code> None Edit product form HTML GET <code>/delete/:id</code> None Delete product Redirect GET <code>/soporte</code> <code>verifyToken</code> Support chat UI HTML GET <code>/api/mensajes</code> <code>verifyAdmin</code> Get user messages JSON GET <code>/api/mensajes/mios</code> <code>verifyToken</code> Get my messages JSON GET <code>/api/usuarios-conversaciones</code> <code>verifyAdmin</code> Get user list JSON GET <code>/pdf/descargar</code> <code>verifyToken</code> Download PDF (Puppeteer) PDF GET <code>/pdfkit/descargar</code> <code>verifyToken</code> Download PDF (PDFKit) PDF POST <code>/save</code> None Create product (via controller) POST <code>/update</code> None Update product (via controller) <p>Sources: src/router.js L1-L607</p>"},{"location":"HTTP-Endpoints.html#requestresponse-flow-diagram","title":"Request/Response Flow Diagram","text":"<pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nRouteMatch[\"Route Exists?\"]\nNotFound[\"404 Not Found\"]\nCheckAuth[\"Auth Required?\"]\nHandler[\"Route Handler\"]\nTokenMW[\"verifyToken Middleware\"]\nAdminMW[\"verifyAdmin Middleware\"]\nRateLimitMW[\"Rate Limiter\"]\nUploadMW[\"Multer Upload\"]\nUnauthorized[\"401 Unauthorized\"]\nForbidden[\"403 Forbidden\"]\nTooMany[\"429 Too Many Requests\"]\nValidator[\"Express Validator\"]\nResponseType[\"Response Type?\"]\nRenderEJS[\"res.render&lt;br&gt;EJS Template\"]\nSendJSON[\"res.json&lt;br&gt;JSON Data\"]\nSendPDF[\"res.send&lt;br&gt;PDF Buffer\"]\nSendRedirect[\"res.redirect&lt;br&gt;Location\"]\nResponse[\"HTTP Response\"]\n\nRequest --&gt; RouteMatch\nRouteMatch --&gt; NotFound\nRouteMatch --&gt; CheckAuth\nCheckAuth --&gt; Handler\nCheckAuth --&gt; TokenMW\nCheckAuth --&gt; AdminMW\nCheckAuth --&gt; RateLimitMW\nCheckAuth --&gt; UploadMW\nTokenMW --&gt; Handler\nTokenMW --&gt; Unauthorized\nAdminMW --&gt; Handler\nAdminMW --&gt; Forbidden\nRateLimitMW --&gt; Handler\nRateLimitMW --&gt; TooMany\nUploadMW --&gt; Validator\nValidator --&gt; Handler\nValidator --&gt; Handler\nHandler --&gt; ResponseType\nResponseType --&gt; RenderEJS\nResponseType --&gt; SendJSON\nResponseType --&gt; SendPDF\nResponseType --&gt; SendRedirect\nRenderEJS --&gt; Response\nSendJSON --&gt; Response\nSendPDF --&gt; Response\nSendRedirect --&gt; Response\nNotFound --&gt; Response\nUnauthorized --&gt; Response\nForbidden --&gt; Response\nTooMany --&gt; Response</code></pre> <p>Sources: src/router.js L1-L607</p>"},{"location":"Internationalization-%28i18n%29.html","title":"Internationalization (i18n)","text":"<p>Relevant source files * index.js * src/router.js * views/partials/header.ejs</p> <p>This page documents the internationalization (i18n) system that provides multi-language support for the application. The system currently supports English (en) and Spanish (es) locales, with Spanish as the default. Language preference is persisted via cookies and can be switched dynamically by users through the UI.</p> <p>For information about the view layer where translations are rendered, see View Layer &amp; Templates. For details on middleware configuration, see Application Bootstrap.</p>"},{"location":"Internationalization-%28i18n%29.html#system-overview","title":"System Overview","text":"<p>The i18n implementation uses the <code>i18n</code> npm package integrated into the Express middleware stack. The system provides language detection from multiple sources (cookie, query parameter), automatic translation file synchronization, and a user-facing language switcher component.</p> <p>Key Components:</p> <ul> <li>i18n Library Configuration: Core setup in <code>index.js</code></li> <li>Language Cookie: Stores user preference (<code>lang</code> cookie)</li> <li>Language Switcher Route: <code>/set-lang/:lang</code> endpoint</li> <li>Translation Files: JSON files in <code>locales/</code> directory</li> <li>Header Component: UI for language selection</li> </ul>"},{"location":"Internationalization-%28i18n%29.html#configuration","title":"Configuration","text":"<p>The i18n system is configured during application bootstrap in index.js L16-L31</p>"},{"location":"Internationalization-%28i18n%29.html#i18n-configuration-object","title":"i18n Configuration Object","text":"Property Value Purpose <code>locales</code> <code>['en', 'es']</code> Available language codes <code>directory</code> <code>path.join(__dirname, 'locales')</code> Translation files location <code>defaultLocale</code> <code>'es'</code> Fallback language (Spanish) <code>cookie</code> <code>'lang'</code> Cookie name for language preference <code>queryParameter</code> <code>'lang'</code> URL parameter for language override <code>autoReload</code> <code>true</code> Reload translation files on change <code>syncFiles</code> <code>true</code> Synchronize translation keys across files <p>The configuration allows language detection from both cookies and URL query parameters (e.g., <code>?lang=en</code>), with automatic file reloading during development.</p>"},{"location":"Internationalization-%28i18n%29.html#middleware-registration","title":"Middleware Registration","text":"<p>The i18n middleware is registered in the Express middleware stack at index.js L46</p> <p>:</p> <pre><code>app.use(i18n.init);\n</code></pre> <p>This middleware runs before route handlers, making translation functions available to all requests via <code>req.__()</code> and <code>res.__()</code> methods, and exposing the current locale to templates.</p> <p>Sources: index.js L16-L31</p> <p>index.js L46</p>"},{"location":"Internationalization-%28i18n%29.html#language-detection-flow","title":"Language Detection Flow","text":"<pre><code>flowchart TD\n\nRequest[\"Incoming Request\"]\nI18nMiddleware[\"i18n.init Middleware\"]\nCheckCookie[\"Cookie 'lang'&lt;br&gt;exists?\"]\nCheckQuery[\"Query param&lt;br&gt;?lang exists?\"]\nUseDefault[\"Use defaultLocale&lt;br&gt;'es'\"]\nUseCookie[\"Set locale from&lt;br&gt;cookie\"]\nUseQuery[\"Set locale from&lt;br&gt;query parameter\"]\nSetLocale[\"Set req.locale&lt;br&gt;and res.locals.__\"]\nRouteHandler[\"Route Handler&lt;br&gt;or View Rendering\"]\n\nRequest --&gt; I18nMiddleware\nI18nMiddleware --&gt; CheckQuery\nCheckQuery --&gt; UseQuery\nCheckQuery --&gt; CheckCookie\nCheckCookie --&gt; UseCookie\nCheckCookie --&gt; UseDefault\nUseQuery --&gt; SetLocale\nUseCookie --&gt; SetLocale\nUseDefault --&gt; SetLocale\nSetLocale --&gt; RouteHandler</code></pre> <p>The i18n middleware processes each request following this priority:</p> <ol> <li>Query parameter: <code>?lang=en</code> overrides all other settings</li> <li>Cookie value: Previously set <code>lang</code> cookie</li> <li>Default locale: Falls back to Spanish (<code>es</code>)</li> </ol> <p>Sources: index.js L22-L31</p>"},{"location":"Internationalization-%28i18n%29.html#language-switching","title":"Language Switching","text":""},{"location":"Internationalization-%28i18n%29.html#language-switcher-route","title":"Language Switcher Route","text":"<p>The <code>/set-lang/:lang</code> route at src/router.js L398-L407</p> <p>handles language preference changes:</p> <pre><code>router.get('/set-lang/:lang', (req, res) =&gt; {\n    const lang = req.params.lang;\n    const returnTo = req.query.returnTo || '/';\n\n    if (['es', 'en'].includes(lang)) {\n        res.cookie('lang', lang, { maxAge: 900000, httpOnly: true });\n    }\n\n    res.redirect(returnTo);\n});\n</code></pre> <p>Process:</p> <ol> <li>Extracts language code from URL parameter (<code>:lang</code>)</li> <li>Validates language is either <code>'es'</code> or <code>'en'</code></li> <li>Sets <code>lang</code> cookie with 900-second (15 minute) expiration</li> <li>Redirects to <code>returnTo</code> query parameter or root path</li> </ol> <p>The <code>httpOnly</code> flag prevents JavaScript access to the cookie, enhancing security.</p>"},{"location":"Internationalization-%28i18n%29.html#ui-language-switcher-component","title":"UI Language Switcher Component","text":"<p>The language switcher is implemented in the header partial at views/partials/header.ejs L31-L54</p> <p>:</p> <pre><code>&lt;ul class=\"navbar-nav ms-auto\"&gt;\n    &lt;li class=\"nav-item\"&gt;\n        &lt;a class=\"nav-link idioma\" href=\"#\" onclick=\"changeLang('es')\"&gt;\n            &lt;img src=\"/resources/img/es.png\" alt=\"Espa\u00f1ol\"&gt;\n            \ud83c\uddea\ud83c\uddf8\n        &lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li class=\"nav-item\"&gt;\n        &lt;a class=\"nav-link idioma\" href=\"#\" onclick=\"changeLang('en')\"&gt;\n            &lt;img src=\"/resources/img/en.png\" alt=\"English\"&gt;\n            \ud83c\uddec\ud83c\udde7\n        &lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>The <code>changeLang</code> JavaScript function at views/partials/header.ejs L49-L53</p> <p>constructs the redirection URL:</p> <pre><code>function changeLang(lang) {\n    const currentPath = window.location.pathname + window.location.search;\n    window.location.href = `/set-lang/${lang}?returnTo=${encodeURIComponent(currentPath)}`;\n}\n</code></pre> <p>This preserves the current page context, allowing users to switch languages without losing their position in the application.</p> <p>Visual Indicators:</p> <ul> <li>Active language displays with <code>active</code> CSS class at views/partials/header.ejs L33-L40</li> <li>Determined by comparing <code>lang</code> variable with each locale: <code>&lt;%= lang === 'es' ? 'active' : '' %&gt;</code></li> </ul> <p>Sources: src/router.js L398-L407</p> <p>views/partials/header.ejs L31-L54</p>"},{"location":"Internationalization-%28i18n%29.html#language-switching-architecture","title":"Language Switching Architecture","text":"<pre><code>sequenceDiagram\n  participant User\n  participant Browser\n  participant header.ejs\n  participant Language Switcher\n  participant /set-lang/:lang\n  participant Route Handler\n  participant lang Cookie\n  participant i18n Middleware\n  participant View Rendering\n\n  User-&gt;&gt;header.ejs: Click language flag\n  header.ejs-&gt;&gt;Browser: changeLang('en')\n  Browser-&gt;&gt;/set-lang/:lang: GET /set-lang/en?returnTo=/admin\n  /set-lang/:lang-&gt;&gt;/set-lang/:lang: Validate lang in ['es','en']\n  /set-lang/:lang-&gt;&gt;lang Cookie: Set cookie('lang', 'en')\n  /set-lang/:lang-&gt;&gt;Browser: Redirect to /admin\n  Browser-&gt;&gt;i18n Middleware: GET /admin\n  i18n Middleware-&gt;&gt;lang Cookie: Read lang cookie\n  lang Cookie--&gt;&gt;i18n Middleware: 'en'\n  i18n Middleware-&gt;&gt;i18n Middleware: Set req.locale = 'en'\n  i18n Middleware-&gt;&gt;View Rendering: res.locals.__ available\n  View Rendering--&gt;&gt;Browser: Rendered page in English</code></pre> <p>Sources: src/router.js L398-L407</p> <p>views/partials/header.ejs L31-L54</p> <p>index.js L22-L31</p>"},{"location":"Internationalization-%28i18n%29.html#using-translations-in-code","title":"Using Translations in Code","text":""},{"location":"Internationalization-%28i18n%29.html#in-route-handlers","title":"In Route Handlers","text":"<p>The i18n middleware exposes translation functions to request and response objects:</p> <ul> <li><code>req.__('key')</code>: Translate a key for the current request locale</li> <li><code>res.__('key')</code>: Translate a key and make available to views</li> <li><code>req.getLocale()</code>: Get current locale code</li> <li><code>res.locals.__</code>: Translation function automatically available in templates</li> </ul>"},{"location":"Internationalization-%28i18n%29.html#in-ejs-templates","title":"In EJS Templates","text":"<p>Templates can use the <code>__()</code> function directly, which is exposed via <code>res.locals</code>:</p> <pre><code>&lt;h1&gt;&lt;%= __('welcome.title') %&gt;&lt;/h1&gt;\n&lt;p&gt;&lt;%= __('welcome.message') %&gt;&lt;/p&gt;\n</code></pre> <p>The function accepts translation keys that map to entries in the locale JSON files.</p>"},{"location":"Internationalization-%28i18n%29.html#locale-variable-in-templates","title":"Locale Variable in Templates","text":"<p>The current locale code is available in templates via the <code>lang</code> variable, set by middleware (likely in <code>setGlobals</code> middleware referenced at index.js L18</p> <p>). This is used for conditional rendering, such as highlighting the active language in the header at views/partials/header.ejs L33-L40</p> <p>:</p> <pre><code>&lt;a class=\"nav-link &lt;%= lang === 'es' ? 'active' : '' %&gt;\"&gt;\n</code></pre> <p>Sources: index.js L46</p> <p>views/partials/header.ejs L33-L40</p>"},{"location":"Internationalization-%28i18n%29.html#translation-files-structure","title":"Translation Files Structure","text":"<p>Translation files are stored in the <code>locales/</code> directory as specified in the i18n configuration at index.js L25</p> <p>The system expects two files:</p> <ul> <li><code>locales/en.json</code>: English translations</li> <li><code>locales/es.json</code>: Spanish translations</li> </ul>"},{"location":"Internationalization-%28i18n%29.html#file-format","title":"File Format","text":"<p>Translation files follow a nested JSON structure:</p> <pre><code>{\n    \"welcome\": {\n        \"title\": \"Welcome\",\n        \"message\": \"Welcome to the application\"\n    },\n    \"navigation\": {\n        \"home\": \"Home\",\n        \"login\": \"Login\",\n        \"register\": \"Register\"\n    },\n    \"errors\": {\n        \"notFound\": \"Page not found\",\n        \"unauthorized\": \"Access denied\"\n    }\n}\n</code></pre>"},{"location":"Internationalization-%28i18n%29.html#key-synchronization","title":"Key Synchronization","text":"<p>The <code>syncFiles: true</code> option at index.js L30</p> <p>ensures that when a new translation key is added to one locale file, it automatically appears in all other locale files with a placeholder value. This helps maintain consistency across translations and identify missing translations.</p>"},{"location":"Internationalization-%28i18n%29.html#auto-reload","title":"Auto-Reload","text":"<p>The <code>autoReload: true</code> option at index.js L29</p> <p>enables hot-reloading of translation files during development. Changes to JSON files are detected and reloaded without restarting the server.</p> <p>Sources: index.js L22-L31</p>"},{"location":"Internationalization-%28i18n%29.html#i18n-system-component-map","title":"i18n System Component Map","text":"<pre><code>flowchart TD\n\nConfig[\"i18n.configure()&lt;br&gt;Lines 23-31\"]\nMiddleware[\"app.use(i18n.init)&lt;br&gt;Line 46\"]\nEnJSON[\"en.json&lt;br&gt;English translations\"]\nEsJSON[\"es.json&lt;br&gt;Spanish translations\"]\nSetLangRoute[\"/set-lang/:lang&lt;br&gt;Lines 398-407\"]\nLangCookie[\"lang cookie&lt;br&gt;maxAge: 900000&lt;br&gt;httpOnly: true\"]\nHeaderPartial[\"partials/header.ejs&lt;br&gt;Lines 31-54&lt;br&gt;Language Switcher UI\"]\nAllViews[\"All EJS Templates&lt;br&gt;Access via __() function\"]\nI18nMW[\"i18n Middleware&lt;br&gt;Detects locale&lt;br&gt;Sets res.locals.__\"]\nSetGlobalsMW[\"setGlobals Middleware&lt;br&gt;Sets lang variable\"]\n\nMiddleware --&gt; I18nMW\nEnJSON --&gt; I18nMW\nEsJSON --&gt; I18nMW\nLangCookie --&gt; I18nMW\nI18nMW --&gt; AllViews\nSetGlobalsMW --&gt; AllViews\nHeaderPartial --&gt; SetLangRoute\nSetLangRoute --&gt; LangCookie\n\nsubgraph subGraph5 [\"Request Processing\"]\n    I18nMW\n    SetGlobalsMW\n    I18nMW --&gt; SetGlobalsMW\nend\n\nsubgraph subGraph4 [\"View Layer - views/\"]\n    HeaderPartial\n    AllViews\n    AllViews --&gt; HeaderPartial\nend\n\nsubgraph subGraph3 [\"Cookie Storage\"]\n    LangCookie\nend\n\nsubgraph subGraph2 [\"Routes - src/router.js\"]\n    SetLangRoute\nend\n\nsubgraph subGraph1 [\"Translation Files - locales/\"]\n    EnJSON\n    EsJSON\nend\n\nsubgraph subGraph0 [\"Configuration - index.js\"]\n    Config\n    Middleware\n    Config --&gt; Middleware\nend</code></pre> <p>This diagram maps the relationships between configuration, storage, routing, and rendering components of the i18n system.</p> <p>Sources: index.js L16-L31</p> <p>index.js L46</p> <p>src/router.js L398-L407</p> <p>views/partials/header.ejs L31-L54</p>"},{"location":"Internationalization-%28i18n%29.html#locale-detection-priority","title":"Locale Detection Priority","text":"<p>The following table describes the precedence order for locale detection:</p> Priority Source Description Override Behavior 1 Query Parameter <code>?lang=en</code> in URL Overrides cookie and default 2 Cookie <code>lang</code> cookie value Overrides default only 3 Default Locale <code>defaultLocale: 'es'</code> Used if no other source exists <p>The query parameter method is useful for:</p> <ul> <li>Testing translations</li> <li>Sharing URLs in specific languages</li> <li>One-time language switches without changing preferences</li> </ul> <p>The cookie method provides:</p> <ul> <li>Persistent language preference across sessions</li> <li>Automatic language restoration on return visits</li> <li>No URL pollution with language parameters</li> </ul> <p>Sources: index.js L22-L31</p> <p>src/router.js L398-L407</p>"},{"location":"Internationalization-%28i18n%29.html#integration-with-global-middleware","title":"Integration with Global Middleware","text":"<p>The i18n middleware is positioned strategically in the middleware stack at index.js L46</p> <p>after core parsing middleware but before the <code>setGlobals</code> middleware at index.js L47</p> <p>This ensures:</p> <ol> <li>Cookie Parsing: The <code>cookieParser</code> middleware at index.js L37  runs first, making the <code>lang</code> cookie available</li> <li>Locale Detection: i18n middleware reads the cookie and sets locale</li> <li>Global Variables: <code>setGlobals</code> middleware can access locale information and expose it to templates</li> <li>Route Handlers: All routes have access to translation functions</li> </ol> <p>The middleware stack order for i18n-related components:</p> <pre><code>cookieParser \u2192 i18n.init \u2192 setGlobals \u2192 router\n</code></pre> <p>Sources: index.js L37</p> <p>index.js L46-L48</p>"},{"location":"Internationalization-%28i18n%29.html#language-persistence-flow","title":"Language Persistence Flow","text":"<pre><code>flowchart TD\n\nUserClick[\"User clicks&lt;br&gt;language flag\"]\nJSFunction[\"changeLang()&lt;br&gt;function\"]\nSetLangRoute[\"/set-lang/:lang&lt;br&gt;route handler\"]\nSetCookie[\"Set lang cookie&lt;br&gt;httpOnly: true&lt;br&gt;maxAge: 900000\"]\nRedirect[\"Redirect to&lt;br&gt;returnTo URL\"]\nNextRequest[\"Next request&lt;br&gt;to application\"]\nCookieParser[\"cookieParser&lt;br&gt;middleware\"]\nI18nInit[\"i18n.init&lt;br&gt;middleware\"]\nLocaleSet[\"Locale set from&lt;br&gt;cookie value\"]\n\nUserClick --&gt; JSFunction\nJSFunction --&gt; SetLangRoute\nSetLangRoute --&gt; SetCookie\nSetCookie --&gt; Redirect\nRedirect --&gt; NextRequest\nNextRequest --&gt; CookieParser\nCookieParser --&gt; I18nInit\nI18nInit --&gt; LocaleSet</code></pre> <p>The language preference persists for 15 minutes (900,000 milliseconds) as configured in the cookie <code>maxAge</code> at src/router.js L403</p> <p>After expiration, the system falls back to the default Spanish locale.</p> <p>Sources: src/router.js L398-L407</p> <p>views/partials/header.ejs L49-L53</p> <p>index.js L37</p> <p>index.js L46</p>"},{"location":"Internationalization-%28i18n%29.html#supported-locales","title":"Supported Locales","text":"Locale Code Language Default Flag Icon Image File <code>es</code> Spanish (Espa\u00f1ol) \u2713 \ud83c\uddea\ud83c\uddf8 <code>/resources/img/es.png</code> <code>en</code> English \ud83c\uddec\ud83c\udde7 <code>/resources/img/en.png</code> <p>The supported locales are defined in the <code>locales</code> array at index.js L24</p> <p>and validated in the language switcher route at src/router.js L402</p> <p>To add a new language, you would need to:</p> <ol> <li>Add the locale code to the <code>locales</code> array in <code>i18n.configure()</code></li> <li>Create a corresponding JSON file in <code>locales/</code> directory (e.g., <code>locales/fr.json</code>)</li> <li>Add a language switcher button in <code>views/partials/header.ejs</code></li> <li>Update the validation in the <code>/set-lang/:lang</code> route handler</li> </ol> <p>Sources: index.js L24</p> <p>src/router.js L402</p> <p>views/partials/header.ejs L31-L46</p>"},{"location":"JWT-Token-Management.html","title":"JWT Token Management","text":"<p>Relevant source files * package-lock.json * src/middlewares/verifyToken.js * src/router.js</p>"},{"location":"JWT-Token-Management.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the JWT (JSON Web Token) implementation used for stateless authentication in the registro-sesiones system. It covers token generation during login, storage in HTTP-only cookies, verification middleware, and token lifecycle management.</p> <p>For information about the authentication flow and password validation, see User Registration &amp; Login. For details on how tokens are used to protect routes, see verifyToken Middleware and verifyAdmin Middleware. For WebSocket authentication, see WebSocket Authentication.</p> <p>Sources: src/router.js L1-L608</p> <p>src/middlewares/verifyToken.js L1-L18</p>"},{"location":"JWT-Token-Management.html#token-generation-process","title":"Token Generation Process","text":"<p>JWT tokens are generated upon successful authentication in the <code>/auth</code> route. The system validates user credentials against the database, and if correct, creates a signed JWT containing user identity and role information.</p>"},{"location":"JWT-Token-Management.html#token-creation-flow","title":"Token Creation Flow","text":"<pre><code>sequenceDiagram\n  participant Client Browser\n  participant POST /auth\n  participant [src/router.js:532]\n  participant MySQL Database\n  participant usuarios table\n  participant jsonwebtoken Library\n  participant HTTP Cookie\n  participant (token)\n\n  Client Browser-&gt;&gt;POST /auth: \"POST credentials\n  POST /auth-&gt;&gt;MySQL Database: (user, pass)\"\n  MySQL Database--&gt;&gt;POST /auth: \"SELECT * FROM usuarios\n  POST /auth-&gt;&gt;POST /auth: WHERE usuario = ?\"\n  loop [\"Credentials Valid\"]\n    POST /auth-&gt;&gt;POST /auth: \"User record\"\n    POST /auth-&gt;&gt;jsonwebtoken Library: \"bcrypt.compare()\n    jsonwebtoken Library--&gt;&gt;POST /auth: validate password\"\n    POST /auth-&gt;&gt;HTTP Cookie: \"Create payload object\n    HTTP Cookie--&gt;&gt;Client Browser: {user, name, rol, imagen}\"\n    POST /auth--&gt;&gt;Client Browser: \"jwt.sign(payload,\n    POST /auth--&gt;&gt;Client Browser: JWT_SECRET,\n  end</code></pre> <p>Sources: src/router.js L532-L601</p>"},{"location":"JWT-Token-Management.html#payload-structure","title":"Payload Structure","text":"<p>The JWT payload contains the following user attributes extracted from the database query result:</p> Field Source Description <code>user</code> <code>results[0].usuario</code> Username (primary identifier) <code>name</code> <code>results[0].nombre</code> Display name <code>rol</code> <code>results[0].rol</code> User role (<code>admin</code> or <code>user</code>) <code>imagen</code> <code>results[0].imagen</code> Profile image filename <p>The payload is defined at src/router.js L559-L564</p> <p>:</p> <pre><code>const payload = {\n    user: results[0].usuario,\n    name: results[0].nombre,\n    rol: results[0].rol,\n    imagen: results[0].imagen,\n};\n</code></pre> <p>Sources: src/router.js L559-L564</p>"},{"location":"JWT-Token-Management.html#signing-and-expiration","title":"Signing and Expiration","text":"<p>The token is signed using the <code>JWT_SECRET</code> environment variable and configured to expire after 1 hour:</p> <ul> <li>Signing Algorithm: Default HS256 (HMAC with SHA-256)</li> <li>Secret Key: <code>process.env.JWT_SECRET</code> (must be defined in <code>.env</code> file)</li> <li>Expiration: 1 hour (<code>\"1h\"</code>)</li> </ul> <p>The signing operation is performed at src/router.js L567</p> <p>:</p> <pre><code>const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: \"1h\" });\n</code></pre> <p>Sources: src/router.js L567</p> <p>package-lock.json L24</p>"},{"location":"JWT-Token-Management.html#token-storage-in-http-only-cookies","title":"Token Storage in HTTP-Only Cookies","text":"<p>After generation, the JWT is stored in an HTTP-only cookie named <code>token</code>. This storage mechanism prevents client-side JavaScript from accessing the token, mitigating XSS attacks.</p>"},{"location":"JWT-Token-Management.html#cookie-configuration","title":"Cookie Configuration","text":"<p>The cookie is set with the following options at src/router.js L570-L574</p> <p>:</p> Option Value Purpose <code>name</code> <code>\"token\"</code> Cookie identifier <code>httpOnly</code> <code>true</code> Prevents JavaScript access <code>secure</code> <code>false</code> Set to <code>true</code> for HTTPS in production <code>maxAge</code> <code>3600000</code> 1 hour in milliseconds <pre><code>res.cookie(\"token\", token, {\n    httpOnly: true,\n    secure: false, // Set true for HTTPS\n    maxAge: 3600000, // 1 hour\n});\n</code></pre> <p>The <code>httpOnly</code> flag ensures the cookie is only transmitted via HTTP(S) and cannot be accessed by <code>document.cookie</code> in the browser.</p> <p>Sources: src/router.js L570-L574</p>"},{"location":"JWT-Token-Management.html#cookie-lifecycle-diagram","title":"Cookie Lifecycle Diagram","text":"<p>Sources: src/router.js L215-L218</p> <p>src/router.js L570-L574</p> <p>src/middlewares/verifyToken.js L4</p>"},{"location":"JWT-Token-Management.html#token-verification-middleware","title":"Token Verification Middleware","text":"<p>The <code>verifyToken</code> middleware intercepts requests to protected routes and validates the JWT before allowing access. This middleware is defined in src/middlewares/verifyToken.js L1-L18</p>"},{"location":"JWT-Token-Management.html#verification-process","title":"Verification Process","text":"<pre><code>flowchart TD\n\nRequest[\"Incoming Request\"]\nExtract[\"Extract token from cookies&lt;br&gt;req.cookies.token&lt;br&gt;[verifyToken.js:4]\"]\nCheckExists[\"Token exists?\"]\nReturn401[\"return res.status(401)&lt;br&gt;'No autenticado'&lt;br&gt;[verifyToken.js:6]\"]\nVerify[\"jwt.verify(token,&lt;br&gt;process.env.JWT_SECRET)&lt;br&gt;[verifyToken.js:9]\"]\nVerifySuccess[\"Verification&lt;br&gt;successful?\"]\nCatch[\"catch block&lt;br&gt;[verifyToken.js:12]\"]\nReturn403[\"return res.status(403)&lt;br&gt;'Token inv\u00e1lido'&lt;br&gt;[verifyToken.js:13]\"]\nAttachUser[\"req.user = payload&lt;br&gt;[verifyToken.js:10]\"]\nNext[\"next()&lt;br&gt;[verifyToken.js:11]\"]\nRouteHandler[\"Protected Route Handler\"]\nEnd[\"Response Sent\"]\n\nRequest --&gt; Extract\nExtract --&gt; CheckExists\nCheckExists --&gt; Return401\nCheckExists --&gt; Verify\nVerify --&gt; VerifySuccess\nVerifySuccess --&gt; Catch\nCatch --&gt; Return403\nVerifySuccess --&gt; AttachUser\nAttachUser --&gt; Next\nNext --&gt; RouteHandler\nReturn401 --&gt; End\nReturn403 --&gt; End</code></pre> <p>Sources: src/middlewares/verifyToken.js L3-L15</p>"},{"location":"JWT-Token-Management.html#middleware-implementation","title":"Middleware Implementation","text":"<p>The complete middleware function is defined at src/middlewares/verifyToken.js L3-L15</p> <p>:</p> <pre><code>const verifyToken = (req, res, next) =&gt; {\n    const token = req.cookies.token; // Extract token\n\n    if (!token) return res.status(401).send(\"No autenticado\");\n\n    try {\n        const payload = jwt.verify(token, process.env.JWT_SECRET);\n        req.user = payload; // Attach user info to request\n        next(); // Continue to route handler\n    } catch (err) {\n        return res.status(403).send(\"Token inv\u00e1lido\");\n    }\n};\n</code></pre> <p>The middleware:</p> <ol> <li>Extracts the token from <code>req.cookies.token</code> (requires <code>cookie-parser</code> middleware)</li> <li>Returns 401 if no token is present</li> <li>Verifies the token signature and expiration using <code>jwt.verify()</code></li> <li>Attaches the decoded payload to <code>req.user</code> for downstream handlers</li> <li>Returns 403 if verification fails (invalid signature or expired)</li> </ol> <p>Sources: src/middlewares/verifyToken.js L3-L15</p> <p>package-lock.json L13</p>"},{"location":"JWT-Token-Management.html#token-usage-in-protected-routes","title":"Token Usage in Protected Routes","text":"<p>Once verified, the token payload is available in route handlers as <code>req.user</code>. This object contains all fields from the original payload.</p>"},{"location":"JWT-Token-Management.html#example-admin-route","title":"Example: Admin Route","text":"<p>The <code>/admin</code> route uses <code>verifyToken</code> middleware at src/router.js L119</p> <p>:</p> <pre><code>router.get(\"/admin\", verifyToken, (req, res) =&gt; {\n    db.query(\"SELECT * FROM productos\", (error, results) =&gt; {\n        // ...\n        res.render(\"admin\", {\n            productos: results,\n            user: req.user,      // Token payload available here\n            login: true,\n            rol: req.user.rol,   // Role from token\n        });\n    });\n});\n</code></pre> <p>Sources: src/router.js L119-L134</p>"},{"location":"JWT-Token-Management.html#example-support-chat-route","title":"Example: Support Chat Route","text":"<p>The <code>/soporte</code> route accesses token payload at src/router.js L220-L227</p> <p>:</p> <pre><code>router.get(\"/soporte\", verifyToken, (req, res) =&gt; {\n    res.render(\"soporte\", {\n        user: {\n            username: req.user.user,  // From token payload\n            role: req.user.rol        // From token payload\n        }\n    });\n});\n</code></pre> <p>Sources: src/router.js L220-L227</p>"},{"location":"JWT-Token-Management.html#token-usage-map","title":"Token Usage Map","text":"<pre><code>flowchart TD\n\nToken[\"JWT Token&lt;br&gt;{user, name, rol, imagen}\"]\nVT[\"verifyToken Middleware&lt;br&gt;[verifyToken.js:3]\"]\nReqUser[\"req.user object&lt;br&gt;attached to request\"]\nAdmin[\"GET /admin&lt;br&gt;[router.js:119]\"]\nSoporte[\"GET /soporte&lt;br&gt;[router.js:220]\"]\nPDF1[\"GET /pdf/descargar&lt;br&gt;[router.js:317]\"]\nPDF2[\"GET /pdfkit/descargar&lt;br&gt;[router.js:355]\"]\nMessages[\"GET /api/mensajes/mios&lt;br&gt;[router.js:256]\"]\nPdfAdmin[\"GET /pdfAdmin&lt;br&gt;[router.js:136]\"]\nVA[\"verifyAdmin Middleware&lt;br&gt;requires verifyToken first\"]\nAdminAPI1[\"GET /api/mensajes&lt;br&gt;[router.js:229]\"]\nAdminAPI2[\"GET /api/usuarios-conversaciones&lt;br&gt;[router.js:283]\"]\n\nToken --&gt; VT\nVT --&gt; ReqUser\nReqUser --&gt; Admin\nReqUser --&gt; Soporte\nReqUser --&gt; PDF1\nReqUser --&gt; PDF2\nReqUser --&gt; Messages\nReqUser --&gt; PdfAdmin\nReqUser --&gt; VA\nVA --&gt; AdminAPI1\nVA --&gt; AdminAPI2</code></pre> <p>Sources: src/router.js L119</p> <p>src/router.js L220</p> <p>src/router.js L229</p> <p>src/router.js L256</p> <p>src/router.js L283</p> <p>src/router.js L317</p> <p>src/router.js L355</p>"},{"location":"JWT-Token-Management.html#token-expiration-and-logout","title":"Token Expiration and Logout","text":""},{"location":"JWT-Token-Management.html#automatic-expiration","title":"Automatic Expiration","text":"<p>Tokens automatically expire 1 hour after creation due to the <code>expiresIn: \"1h\"</code> option. When an expired token is used, <code>jwt.verify()</code> throws an error, which is caught by the middleware and returns a 403 response.</p>"},{"location":"JWT-Token-Management.html#explicit-logout","title":"Explicit Logout","text":"<p>The <code>/logout</code> route explicitly removes the token cookie at src/router.js L215-L218</p> <p>:</p> <pre><code>router.get(\"/logout\", (req, res) =&gt; {\n    res.clearCookie(\"token\");\n    res.redirect('/');\n});\n</code></pre> <p>The <code>clearCookie()</code> method instructs the browser to delete the <code>token</code> cookie, effectively logging out the user.</p> <p>Sources: src/router.js L215-L218</p>"},{"location":"JWT-Token-Management.html#optional-token-verification","title":"Optional Token Verification","text":"<p>In some routes, token verification is optional. For example, the root route (<code>/</code>) at src/router.js L59-L74</p> <p>checks for a token but doesn't require it:</p> <pre><code>router.get(\"/\", (req, res) =&gt; {\n    if (req.cookies.token) {\n        const payload = jwt.verify(req.cookies.token, process.env.JWT_SECRET);\n        req.user = payload;\n        res.render(\"index\", {\n            user: req.user?.name || \"Usuario\",\n            login: true,\n        });\n    } else {\n        res.render(\"index\", {\n            user: \"Debe iniciar sesi\u00f3n\",\n            login: false,\n        });\n    }\n});\n</code></pre> <p>This pattern allows the page to display personalized content if a token is present but doesn't block access if absent.</p> <p>Sources: src/router.js L59-L74</p>"},{"location":"JWT-Token-Management.html#environment-configuration","title":"Environment Configuration","text":""},{"location":"JWT-Token-Management.html#jwt_secret-variable","title":"JWT_SECRET Variable","text":"<p>The JWT signing and verification processes depend on the <code>JWT_SECRET</code> environment variable. This secret must be:</p> <ul> <li>Defined in <code>.env</code> file: Not committed to version control</li> <li>Sufficiently random: Use a cryptographically secure random string</li> <li>Consistent across instances: All server instances must use the same secret</li> <li>Protected: Never exposed to clients or logs</li> </ul> <p>The secret is accessed via <code>process.env.JWT_SECRET</code> at:</p> <ul> <li>src/router.js L567  during token signing</li> <li>src/middlewares/verifyToken.js L9  during token verification</li> </ul> <p>Sources: src/router.js L567</p> <p>src/middlewares/verifyToken.js L9</p>"},{"location":"JWT-Token-Management.html#integration-with-cookie-parser","title":"Integration with Cookie Parser","text":"<p>The JWT implementation depends on the <code>cookie-parser</code> middleware to extract cookies from HTTP requests. The middleware must be configured before any routes that use token verification.</p> <p>In index.js</p> <p><code>cookie-parser</code> is initialized before the router:</p> <pre><code>const cookieParser = require(\"cookie-parser\");\napp.use(cookieParser());\n</code></pre> <p>This allows <code>req.cookies.token</code> to be accessible in src/middlewares/verifyToken.js L4</p> <p>Sources: src/middlewares/verifyToken.js L4</p> <p>package-lock.json L13</p>"},{"location":"JWT-Token-Management.html#security-considerations","title":"Security Considerations","text":""},{"location":"JWT-Token-Management.html#http-only-flag","title":"HTTP-Only Flag","text":"<p>The <code>httpOnly: true</code> option at src/router.js L571</p> <p>prevents client-side JavaScript from accessing the token, protecting against XSS attacks where an attacker might inject code to steal the token.</p>"},{"location":"JWT-Token-Management.html#https-in-production","title":"HTTPS in Production","text":"<p>The <code>secure: false</code> setting at src/router.js L572</p> <p>should be changed to <code>true</code> in production environments using HTTPS. This ensures the cookie is only transmitted over encrypted connections.</p>"},{"location":"JWT-Token-Management.html#token-expiration","title":"Token Expiration","text":"<p>The 1-hour expiration at src/router.js L567</p> <p>limits the window of opportunity if a token is compromised. After expiration, users must re-authenticate.</p>"},{"location":"JWT-Token-Management.html#secret-key-protection","title":"Secret Key Protection","text":"<p>The <code>JWT_SECRET</code> is the cryptographic foundation of token security. If compromised, an attacker can forge valid tokens. It must be:</p> <ul> <li>Stored securely in environment variables</li> <li>Never committed to version control</li> <li>Rotated periodically in production</li> </ul> <p>Sources: src/router.js L567</p> <p>src/router.js L570-L574</p>"},{"location":"JWT-Token-Management.html#dependencies","title":"Dependencies","text":"<p>The JWT token management system relies on the following npm packages:</p> Package Version Purpose <code>jsonwebtoken</code> 9.0.2 JWT creation and verification <code>cookie-parser</code> 1.4.7 Extract cookies from requests <code>bcryptjs</code> 3.0.2 Password hashing during login <code>dotenv</code> 16.5.0 Load JWT_SECRET from <code>.env</code> <p>Sources: package-lock.json L24</p> <p>package-lock.json L13</p> <p>package-lock.json L12</p> <p>package-lock.json L15</p>"},{"location":"Message-Handling.html","title":"Message Handling","text":"<p>Relevant source files * src/router.js * src/sockets/socketHandler.js</p>"},{"location":"Message-Handling.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the WebSocket event handlers and logic for sending, routing, and persisting real-time chat messages in the support system. The message handling system processes <code>mensaje_privado</code> events from clients, routes messages to appropriate recipients through Socket.IO rooms, and persists all messages to the MySQL database. It also handles disconnect events and provides HTTP APIs for retrieving message history.</p> <p>For information about Socket.IO server initialization, see Socket.IO Server Setup. For room assignment and management, see Room Management. For WebSocket authentication, see WebSocket Authentication.</p> <p>Sources: src/sockets/socketHandler.js L1-L71</p>"},{"location":"Message-Handling.html#event-handler-overview","title":"Event Handler Overview","text":"<p>The Socket.IO server in <code>setupSocket</code> function processes two primary WebSocket events after a client connection is established:</p> Event Name Direction Purpose Handler Location <code>mensaje_privado</code> Client \u2192 Server User sends a private message src/sockets/socketHandler.js L45-L63 <code>mensaje_recibido</code> Server \u2192 Client Server delivers message to recipient(s) src/sockets/socketHandler.js L48-L52 <code>disconnect</code> Client \u2192 Server User disconnects from WebSocket src/sockets/socketHandler.js L65-L67 <p>The <code>mensaje_privado</code> event is received from the client, while <code>mensaje_recibido</code> is emitted by the server to deliver messages to recipients.</p> <pre><code>flowchart TD\n\nClient1[\"Client (User/Admin)\"]\nClient2[\"Client (Recipient)\"]\nClient3[\"Clients (All Admins)\"]\nConnectionHandler[\"connection event handler&lt;br&gt;line 36\"]\nMensajePrivado[\"mensaje_privado handler&lt;br&gt;line 45-63\"]\nDisconnect[\"disconnect handler&lt;br&gt;line 65-67\"]\nCheckRole[\"Check sender rol !== 'admin'&lt;br&gt;line 50\"]\nEmitRecipient[\"io.to(user:para).emit&lt;br&gt;line 48\"]\nEmitAdmins[\"io.to(admins).emit&lt;br&gt;line 51\"]\nDBInsert[\"INSERT INTO mensajes&lt;br&gt;line 55-62\"]\n\nClient1 --&gt; MensajePrivado\nMensajePrivado --&gt; EmitRecipient\nMensajePrivado --&gt; CheckRole\nMensajePrivado --&gt; DBInsert\nEmitRecipient --&gt; Client2\nEmitAdmins --&gt; Client3\nClient1 --&gt; Disconnect\n\nsubgraph Persistence [\"Persistence\"]\n    DBInsert\nend\n\nsubgraph subGraph1 [\"Routing Logic\"]\n    CheckRole\n    EmitRecipient\n    EmitAdmins\n    CheckRole --&gt; EmitAdmins\nend\n\nsubgraph subGraph0 [\"Socket.IO Server - socketHandler.js\"]\n    ConnectionHandler\n    MensajePrivado\n    Disconnect\nend</code></pre> <p>Sources: src/sockets/socketHandler.js L36-L68</p>"},{"location":"Message-Handling.html#mensaje_privado-event-handler","title":"mensaje_privado Event Handler","text":"<p>The <code>mensaje_privado</code> event handler processes incoming private messages from authenticated clients. The handler is attached within the connection event listener after the user has been authenticated via JWT middleware.</p>"},{"location":"Message-Handling.html#event-parameters","title":"Event Parameters","text":"<p>The event expects a payload object with two properties:</p> <pre><code>{ para, mensaje }\n</code></pre> <ul> <li><code>para</code> (string): The username of the message recipient</li> <li><code>mensaje</code> (string): The text content of the message</li> </ul> <p>The sender's username is extracted from the authenticated user context: <code>const de = user;</code> src/sockets/socketHandler.js L46</p>"},{"location":"Message-Handling.html#message-routing-logic","title":"Message Routing Logic","text":"<p>The handler implements a dual-routing strategy:</p> <ol> <li>Direct delivery to recipient: Messages are always emitted to the recipient's personal room using <code>io.to(\\</code>user:${para}<code>).emit(\"mensaje_recibido\", { de, mensaje })</code> src/sockets/socketHandler.js L48</li> <li>Admin broadcast: If the sender is NOT an admin (<code>rol !== \"admin\"</code>), the message is also broadcast to all admins in the <code>\"admins\"</code> room src/sockets/socketHandler.js L50-L52  This allows administrators to monitor all user conversations.</li> </ol> <pre><code>flowchart TD\n\nEvent[\"mensaje_privado event received&lt;br&gt;{para, mensaje}\"]\nExtractSender[\"Extract sender: de = user&lt;br&gt;line 46\"]\nEmitRecipient[\"Emit to recipient room&lt;br&gt;io.to(user:para).emit(mensaje_recibido)&lt;br&gt;line 48\"]\nCheckRole[\"Is sender role&lt;br&gt;!== 'admin'?&lt;br&gt;line 50\"]\nEmitAdmins[\"Broadcast to admins room&lt;br&gt;io.to(admins).emit(mensaje_recibido)&lt;br&gt;line 51\"]\nPersist[\"Insert into mensajes table&lt;br&gt;line 55-62\"]\n\nEvent --&gt; ExtractSender\nExtractSender --&gt; EmitRecipient\nEmitRecipient --&gt; CheckRole\nCheckRole --&gt; EmitAdmins\nCheckRole --&gt; Persist\nEmitAdmins --&gt; Persist</code></pre> <p>Sources: src/sockets/socketHandler.js L45-L63</p>"},{"location":"Message-Handling.html#mensaje_recibido-event-emission","title":"mensaje_recibido Event Emission","text":"<p>The <code>mensaje_recibido</code> event is emitted by the server to deliver messages to connected clients. This event is never sent by clients; it is strictly a server-to-client communication.</p>"},{"location":"Message-Handling.html#event-payload","title":"Event Payload","text":"<p>The emitted event carries:</p> <pre><code>{ de, mensaje }\n</code></pre> <ul> <li><code>de</code> (string): The username of the message sender</li> <li><code>mensaje</code> (string): The message text content</li> </ul>"},{"location":"Message-Handling.html#emission-targets","title":"Emission Targets","text":"<p>The event is emitted to Socket.IO rooms using <code>io.to(roomName).emit()</code>:</p> <ul> <li>Recipient's personal room: <code>io.to(\\</code>user:${para}<code>)</code> - Delivers the message to the intended recipient src/sockets/socketHandler.js L48</li> <li>Admins room (conditional): <code>io.to(\"admins\")</code> - Broadcasts user messages to all connected administrators src/sockets/socketHandler.js L51</li> </ul> <p>The room-based emission ensures messages are only delivered to the intended recipients without iterating through all connected sockets.</p> <p>Sources: src/sockets/socketHandler.js L48-L52</p>"},{"location":"Message-Handling.html#message-routing-scenarios","title":"Message Routing Scenarios","text":"<p>The routing behavior differs based on sender role:</p>"},{"location":"Message-Handling.html#scenario-1-regular-user-sends-message","title":"Scenario 1: Regular User Sends Message","text":"<p>When a user with <code>rol !== \"admin\"</code> sends a message:</p> <ol> <li>Message is emitted to the recipient's personal room</li> <li>Message is broadcast to all administrators in the <code>\"admins\"</code> room</li> <li>Message is persisted to database</li> </ol> <p>This allows administrators to see all user conversations in real-time for support monitoring.</p>"},{"location":"Message-Handling.html#scenario-2-admin-sends-message","title":"Scenario 2: Admin Sends Message","text":"<p>When an administrator sends a message:</p> <ol> <li>Message is emitted ONLY to the recipient's personal room</li> <li>Message is NOT broadcast to the <code>\"admins\"</code> room (preventing echo)</li> <li>Message is persisted to database</li> </ol> <p>The condition <code>if (rol !== \"admin\")</code> src/sockets/socketHandler.js L50</p> <p>prevents admin messages from being broadcast to the admin room, avoiding duplicate notifications.</p> <pre><code>flowchart TD\n\nA1[\"User: admin1&lt;br&gt;rol=admin\"]\nA2[\"User: alice&lt;br&gt;recipient\"]\nA3[\"Admins Room&lt;br&gt;(NOT notified)\"]\nU1[\"User: alice&lt;br&gt;rol=user\"]\nU2[\"User: bob&lt;br&gt;recipient\"]\nU3[\"Admins Room&lt;br&gt;(all admins)\"]\n\nsubgraph subGraph1 [\"Admin Sends Message\"]\n    A1\n    A2\n    A3\n    A1 --&gt; A2\n    A1 --&gt; A3\nend\n\nsubgraph subGraph0 [\"User Sends Message\"]\n    U1\n    U2\n    U3\n    U1 --&gt; U2\n    U1 --&gt; U3\nend</code></pre> <p>Sources: src/sockets/socketHandler.js L45-L52</p>"},{"location":"Message-Handling.html#message-persistence","title":"Message Persistence","text":"<p>All messages, regardless of routing, are persisted to the MySQL <code>mensajes</code> table to maintain a complete conversation history.</p>"},{"location":"Message-Handling.html#database-insertion","title":"Database Insertion","text":"<p>The insertion uses a parameterized SQL query to prevent injection attacks:</p> <pre><code>INSERT INTO mensajes (de_usuario, para_usuario, mensaje) VALUES (?, ?, ?)\n</code></pre> <p>Parameters: <code>[de, para, mensaje]</code> src/sockets/socketHandler.js L55-L56</p> <p>The database operation is asynchronous and logs success or failure:</p> <ul> <li>Success: <code>console.log(\"\ud83d\udcbe Mensaje guardado:\", \\</code>${de} \u27a1\ufe0f ${para}<code>)</code> src/sockets/socketHandler.js L60</li> <li>Error: <code>console.error(\"\u274c Error al guardar mensaje:\", err)</code> src/sockets/socketHandler.js L58</li> </ul>"},{"location":"Message-Handling.html#table-structure","title":"Table Structure","text":"<p>The <code>mensajes</code> table contains:</p> <ul> <li><code>de_usuario</code>: Foreign key to <code>usuarios.usuario</code> (sender)</li> <li><code>para_usuario</code>: Foreign key to <code>usuarios.usuario</code> (recipient)</li> <li><code>mensaje</code>: TEXT field for message content</li> <li><code>fecha</code>: DATETIME field (auto-populated by database default)</li> </ul> <p>For complete database schema details, see mensajes Table.</p> <p>Sources: src/sockets/socketHandler.js L55-L62</p>"},{"location":"Message-Handling.html#disconnect-event-handler","title":"disconnect Event Handler","text":"<p>The <code>disconnect</code> event is automatically fired by Socket.IO when a client WebSocket connection is closed (browser tab closed, network interruption, explicit disconnect).</p> <p>The handler simply logs the disconnection event:</p> <pre><code>socket.on(\"disconnect\", () =&gt; {\n    console.log(`\ud83d\udd34 Usuario desconectado: ${user}`);\n});\n</code></pre> <p>src/sockets/socketHandler.js L65-L67</p> <p>When a user disconnects:</p> <ol> <li>Socket.IO automatically removes them from all rooms they joined</li> <li>The socket instance is destroyed</li> <li>No database operations are performed</li> <li>No cleanup of messages is required (messages persist in database)</li> </ol> <p>Sources: src/sockets/socketHandler.js L65-L67</p>"},{"location":"Message-Handling.html#http-message-retrieval-apis","title":"HTTP Message Retrieval APIs","text":"<p>While real-time messages are delivered via WebSocket events, the system provides HTTP REST endpoints for retrieving historical messages. These endpoints are used by clients when first loading the chat interface or when reconnecting after a disconnection.</p>"},{"location":"Message-Handling.html#get-apimensajes-admin-only","title":"GET /api/mensajes (Admin Only)","text":"<p>Retrieves all messages for a specific user's conversation. Requires admin authentication via <code>verifyAdmin</code> middleware.</p> <p>Query Parameter:</p> <ul> <li><code>con</code> (required): Username to retrieve messages for</li> </ul> <p>SQL Query:</p> <pre><code>SELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <p>src/router.js L236-L242</p> <p>The query retrieves messages where the specified user is either the sender OR recipient, ordered chronologically.</p> <p>Response: JSON array of message objects Authorization: Admin role required src/router.js L229</p>"},{"location":"Message-Handling.html#get-apimensajesmios-authenticated-users","title":"GET /api/mensajes/mios (Authenticated Users)","text":"<p>Retrieves all messages for the currently authenticated user. Requires token authentication via <code>verifyToken</code> middleware.</p> <p>The username is extracted from the JWT payload: <code>const usuario = req.user.user;</code> src/router.js L257</p> <p>SQL Query: Same as admin endpoint, but filters by the authenticated user's username src/router.js L263-L269</p> <p>Response: JSON array of message objects Authorization: Any authenticated user src/router.js L256</p>"},{"location":"Message-Handling.html#get-apiusuarios-conversaciones-admin-only","title":"GET /api/usuarios-conversaciones (Admin Only)","text":"<p>Retrieves a list of all users who have active conversations with administrators. Used by the admin interface to populate the user list sidebar.</p> <p>SQL Query:</p> <pre><code>SELECT DISTINCT usuario\nFROM (\n  SELECT de_usuario AS usuario FROM mensajes\n  WHERE para_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n\n  UNION\n\n  SELECT para_usuario AS usuario FROM mensajes\n  WHERE de_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n) AS conversaciones\nWHERE usuario NOT IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n</code></pre> <p>src/router.js L292-L304</p> <p>The query uses UNION to find users who either:</p> <ol> <li>Sent messages TO admins, OR</li> <li>Received messages FROM admins</li> </ol> <p>It excludes admin usernames from the results.</p> <p>Response: JSON array of usernames (strings) src/router.js L312-L313</p> <p>Authorization: Admin role required src/router.js L283</p> <p>Sources: src/router.js L229-L315</p>"},{"location":"Message-Handling.html#complete-message-flow","title":"Complete Message Flow","text":"<p>The following diagram illustrates the complete lifecycle of a message from client initiation through delivery and persistence:</p> <pre><code>sequenceDiagram\n  participant Client (Sender)\n  participant Socket.IO Server\n  participant Room: user:recipient\n  participant Room: admins\n  participant MySQL mensajes table\n\n  note over Client (Sender): User clicks send in chat UI\n  Client (Sender)-&gt;&gt;Socket.IO Server: emit(\"mensaje_privado\", {para, mensaje})\n  note over Socket.IO Server: Handler at line 45\n  Socket.IO Server-&gt;&gt;Socket.IO Server: Extract de = user (line 46)\n  Socket.IO Server-&gt;&gt;Room: user:recipient: emit(\"mensaje_recibido\", {de, mensaje})\n  note over Room: user:recipient: Recipient receives message\n  loop [Sender is NOT admin]\n    Socket.IO Server-&gt;&gt;Room: admins: emit(\"mensaje_recibido\", {de, mensaje})\n    note over Room: admins: All admins receive notification\n    Socket.IO Server-&gt;&gt;MySQL mensajes table: INSERT INTO mensajes\n    MySQL mensajes table--&gt;&gt;Socket.IO Server: (de_usuario, para_usuario, mensaje)\n    note over Socket.IO Server: Log: \ud83d\udcbe Mensaje guardado\n    note over Socket.IO Server: Log: \u274c Error al guardar mensaje\n  end</code></pre> <p>Sources: src/sockets/socketHandler.js L45-L63</p>"},{"location":"Message-Handling.html#error-handling","title":"Error Handling","text":"<p>The message handling system includes basic error handling:</p> <ol> <li>Database errors: Caught in the callback of <code>db.query()</code> and logged to console src/sockets/socketHandler.js L57-L61  The message is still delivered to recipients even if persistence fails.</li> <li>Authentication errors: Handled by the Socket.IO middleware before messages can be sent (see WebSocket Authentication)</li> <li>Missing parameters: No explicit validation exists in the handler. If <code>para</code> or <code>mensaje</code> are undefined, the emission will still occur but may fail at the client level.</li> <li>Room not found: Socket.IO silently ignores emissions to rooms with no members. Messages to offline users are persisted but not delivered until reconnection.</li> </ol> <p>Sources: src/sockets/socketHandler.js L45-L63</p>"},{"location":"Message-Handling.html#integration-points","title":"Integration Points","text":"<p>The message handling system integrates with:</p> Component Integration Point Purpose JWT Authentication <code>socket.request.user</code> src/sockets/socketHandler.js L37 Extracts sender identity Room Management <code>socket.join()</code> called in connection handler src/sockets/socketHandler.js L42-L43 Establishes room membership MySQL Database <code>db.query()</code> src/sockets/socketHandler.js L56 Persists message history HTTP API <code>/api/mensajes</code> endpoints src/router.js L229-L280 Retrieves historical messages Client UI <code>views/soporte.ejs</code> Emits <code>mensaje_privado</code>, listens for <code>mensaje_recibido</code> <p>For Socket.IO room assignments, see Room Management. For database table structure, see mensajes Table. For client-side implementation, see Support Chat System.</p> <p>Sources: src/sockets/socketHandler.js L1-L71</p> <p>src/router.js L229-L315</p>"},{"location":"Overview.html","title":"Overview","text":"<p>Relevant source files * index.js * package-lock.json * package.json</p>"},{"location":"Overview.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>The registro-sesiones system is a full-stack web application built on Node.js that provides session registration and management capabilities with real-time communication features. The system implements user authentication, role-based access control, product inventory management, and a live support chat system. It is designed as a dual-server application where a single HTTP server hosts both traditional request-response patterns via Express and bidirectional real-time communication via Socket.IO.</p> <p>This document provides a high-level overview of the system architecture, core capabilities, and technology stack. For detailed information about specific subsystems:</p> <ul> <li>Application bootstrap and server initialization: see Getting Started</li> <li>Authentication and authorization flows: see Authentication &amp; Authorization</li> <li>Real-time messaging implementation: see Real-time Communication System</li> <li>View rendering and templating: see View Layer &amp; Templates</li> <li>Database schema and tables: see Database Schema</li> </ul> <p>Sources: index.js L1-L86</p> <p>package.json L1-L49</p>"},{"location":"Overview.html#core-capabilities","title":"Core Capabilities","text":"<p>The system provides four primary functional areas:</p> Capability Description Primary Users User Authentication JWT-based authentication with bcrypt password hashing, session management, and HTTP-only cookie storage All users Product Management Full CRUD operations for product inventory including reference numbers, names, prices, and stock levels Admin users Support Chat Real-time bidirectional messaging between users and administrators using Socket.IO with message persistence All authenticated users Report Generation PDF export of product data using both Puppeteer (HTML-to-PDF) and PDFKit (programmatic) approaches Admin users <p>Additional cross-cutting features include:</p> <ul> <li>Internationalization: English and Spanish language support via <code>i18n</code> library</li> <li>Security: Helmet security headers, rate limiting, input validation, and CSRF protection</li> <li>API Documentation: Swagger UI integration for REST API exploration</li> </ul> <p>Sources: package.json L22-L43</p> <p>index.js L1-L65</p>"},{"location":"Overview.html#system-architecture-map","title":"System Architecture Map","text":"<p>The following diagram maps the high-level system components to their corresponding code entities in the codebase:</p> <pre><code>flowchart TD\n\nIndexJS[\"index.js&lt;br&gt;Server Bootstrap\"]\nExpressApp[\"Express Application&lt;br&gt;app: express()\"]\nHTTPServer[\"HTTP Server&lt;br&gt;http.createServer(app)\"]\nRouterModule[\"src/router.js&lt;br&gt;Route Definitions\"]\nSocketIOServer[\"Socket.IO Server&lt;br&gt;socketIO(server)\"]\nSocketHandler[\"src/sockets/socketHandler.js&lt;br&gt;setupSocket(io)\"]\nSecurityMW[\"src/middlewares/security.js&lt;br&gt;helmet + rate limiting\"]\nVerifyTokenMW[\"src/middlewares/verifyToken.js&lt;br&gt;JWT validation\"]\nVerifyAdminMW[\"src/middlewares/verifyAdmin.js&lt;br&gt;Role check\"]\nSetGlobalsMW[\"src/middlewares/setGlobals.js&lt;br&gt;Global context\"]\nControllers[\"src/controllers.js&lt;br&gt;Request handlers\"]\nDBModule[\"database/db.js&lt;br&gt;MySQL connection pool\"]\nUsuariosTable[\"usuarios table&lt;br&gt;Authentication &amp; profiles\"]\nProductosTable[\"productos table&lt;br&gt;Inventory data\"]\nMensajesTable[\"mensajes table&lt;br&gt;Chat message history\"]\nEJSEngine[\"EJS Template Engine&lt;br&gt;app.set('view engine', 'ejs')\"]\nViewsDir[\"views/&lt;br&gt;Template files\"]\nI18nModule[\"i18n.init&lt;br&gt;locales/en.json, locales/es.json\"]\n\nIndexJS --&gt; ExpressApp\nIndexJS --&gt; HTTPServer\nIndexJS --&gt; SocketIOServer\nIndexJS --&gt; SecurityMW\nIndexJS --&gt; RouterModule\nIndexJS --&gt; I18nModule\nExpressApp --&gt; SecurityMW\nSecurityMW --&gt; RouterModule\nRouterModule --&gt; VerifyTokenMW\nRouterModule --&gt; VerifyAdminMW\nRouterModule --&gt; Controllers\nRouterModule --&gt; EJSEngine\nHTTPServer --&gt; SocketIOServer\nControllers --&gt; DBModule\nSocketHandler --&gt; DBModule\nRouterModule --&gt; SetGlobalsMW\n\nsubgraph subGraph6 [\"View Rendering\"]\n    EJSEngine\n    ViewsDir\n    I18nModule\n    EJSEngine --&gt; ViewsDir\n    EJSEngine --&gt; I18nModule\nend\n\nsubgraph subGraph5 [\"Data Layer\"]\n    DBModule\n    UsuariosTable\n    ProductosTable\n    MensajesTable\n    DBModule --&gt; UsuariosTable\n    DBModule --&gt; ProductosTable\n    DBModule --&gt; MensajesTable\nend\n\nsubgraph subGraph4 [\"Business Logic\"]\n    Controllers\nend\n\nsubgraph subGraph3 [\"Security &amp; Middleware\"]\n    SecurityMW\n    VerifyTokenMW\n    VerifyAdminMW\n    SetGlobalsMW\nend\n\nsubgraph subGraph2 [\"WebSocket Layer\"]\n    SocketIOServer\n    SocketHandler\n    SocketIOServer --&gt; SocketHandler\nend\n\nsubgraph subGraph1 [\"HTTP Layer\"]\n    ExpressApp\n    HTTPServer\n    RouterModule\nend\n\nsubgraph subGraph0 [\"Application Entry Point\"]\n    IndexJS\nend</code></pre> <p>Diagram: System Architecture Component Map</p> <p>This diagram shows how the main functional areas map to specific files and code entities. The <code>index.js</code> file serves as the bootstrap that initializes all major subsystems. The HTTP layer is handled by Express with routing defined in <code>src/router.js</code>, while real-time communication is managed by Socket.IO with handlers in <code>src/sockets/socketHandler.js</code>. All data operations flow through <code>database/db.js</code> to the MySQL tables.</p> <p>Sources: index.js L1-L65</p> <p>Diagram 1, Diagram 4</p>"},{"location":"Overview.html#technology-stack","title":"Technology Stack","text":"<p>The system is built on the following core technologies and libraries:</p> Layer Technology Version Purpose Runtime Node.js \u226518.0.0 JavaScript runtime environment Web Framework Express 5.1.0 HTTP server and routing Real-time Socket.IO 4.8.1 WebSocket-based bidirectional communication Database MySQL via mysql2 3.14.1 Relational data storage Authentication jsonwebtoken 9.0.2 JWT token generation and validation Password Hashing bcryptjs 3.0.2 One-way password encryption View Engine EJS 3.1.10 Server-side HTML templating PDF Generation Puppeteer 24.14.0 HTML-to-PDF conversion PDF Generation PDFKit 0.17.1 Programmatic PDF creation Security Helmet 8.1.0 HTTP security headers Rate Limiting express-rate-limit 6.7.0 Brute-force protection Validation express-validator 7.2.1 Input sanitization and validation i18n i18n 0.15.1 Multi-language support File Upload Multer 2.0.2 Multipart form data handling API Docs swagger-ui-express 5.0.1 Interactive API documentation <p>Sources: package.json L22-L42</p>"},{"location":"Overview.html#application-bootstrap-flow","title":"Application Bootstrap Flow","text":"<p>The following diagram illustrates the initialization sequence when the application starts:</p> <pre><code>sequenceDiagram\n  participant Node.js Runtime\n  participant index.js\n  participant Express App\n  participant HTTP Server\n  participant Socket.IO Server\n  participant src/router.js\n  participant src/sockets/socketHandler.js\n  participant MySQL Database\n\n  Node.js Runtime-&gt;&gt;index.js: Execute entry point\n  index.js-&gt;&gt;Express App: require('express')\n  index.js-&gt;&gt;index.js: create app instance\n  index.js-&gt;&gt;HTTP Server: Load dotenv config\n  index.js-&gt;&gt;Socket.IO Server: from env/.env\n  index.js-&gt;&gt;Express App: http.createServer(app)\n  note over Express App: cookie-parser\n  index.js-&gt;&gt;src/router.js: socketIO(server)\n  src/router.js--&gt;&gt;Express App: Configure middleware stack\n  index.js-&gt;&gt;Express App: line 37-47\n  index.js-&gt;&gt;src/sockets/socketHandler.js: app.use('/', router)\n  src/sockets/socketHandler.js--&gt;&gt;Socket.IO Server: Mount all routes\n  index.js-&gt;&gt;HTTP Server: app.set('view engine', 'ejs')\n  HTTP Server-&gt;&gt;MySQL Database: setupSocket(io)\n  note over HTTP Server,MySQL Database: Server running at</code></pre> <p>Diagram: Application Initialization Sequence</p> <p>The bootstrap process follows these steps:</p> <ol> <li>Environment Configuration (index.js L4 ): Load environment variables from <code>env/.env</code> using <code>dotenv</code></li> <li>Express Setup (index.js L2-L3 ): Create Express application instance</li> <li>HTTP Server Creation (index.js L8-L10 ): Wrap Express app in HTTP server for Socket.IO compatibility</li> <li>Socket.IO Initialization (index.js L12 ): Attach Socket.IO to HTTP server</li> <li>Middleware Stack (index.js L37-L47 ): Configure security, parsing, sessions, and internationalization</li> <li>View Engine (index.js L52 ): Set EJS as template renderer</li> <li>Socket Configuration (index.js L57 ): Call <code>setupSocket(io)</code> to register WebSocket event handlers</li> <li>Server Start (index.js L62-L65 ): Begin listening on port 3000</li> </ol> <p>Sources: index.js L1-L65</p>"},{"location":"Overview.html#database-schema-overview","title":"Database Schema Overview","text":"<p>The system uses a MySQL database with three primary tables:</p> Table Primary Key Purpose Key Relationships <code>usuarios</code> <code>usuario</code> (VARCHAR) Stores user credentials, roles (admin/user), and profile data including bcrypt-hashed passwords and profile image filenames Referenced by <code>mensajes</code> table <code>productos</code> <code>ref</code> (INT AUTO_INCREMENT) Manages product inventory with name, price (DECIMAL), and stock (INT) None <code>mensajes</code> Composite Persists chat messages with sender (<code>de_usuario</code>), recipient (<code>para_usuario</code>), message text, and timestamp Foreign keys to <code>usuarios.usuario</code> <p>The database connection is established via a connection pool in database/db.js</p> <p>which is imported by route controllers and the Socket.IO handler.</p> <p>Sources: Diagram 5, index.js L13</p>"},{"location":"Overview.html#request-processing-overview","title":"Request Processing Overview","text":"<p>All incoming HTTP requests flow through a seven-layer middleware stack before reaching route handlers:</p> <ol> <li>helmet (index.js L45 ): Security headers (CSP, XSS protection, etc.)</li> <li>express-rate-limit: Configured in src/middlewares/security.js  for brute-force prevention</li> <li>cookie-parser (index.js L37 ): Parse JWT cookies</li> <li>express.urlencoded and express.json (index.js L41-L42 ): Body parsing</li> <li>express-session: Session management compatibility layer</li> <li>i18n.init (index.js L46 ): Language detection from <code>lang</code> cookie or query parameter</li> <li>setGlobals (index.js L47 ): Inject global template variables</li> </ol> <p>After middleware processing, requests are routed by src/router.js</p> <p>to appropriate handlers. Routes requiring authentication pass through <code>verifyToken</code> middleware (src/middlewares/verifyToken.js</p> <p>), and admin-only routes additionally require <code>verifyAdmin</code> middleware (src/middlewares/verifyAdmin.js</p> <p>).</p> <p>Sources: index.js L37-L48</p> <p>Diagram 4</p>"},{"location":"Overview.html#websocket-communication","title":"WebSocket Communication","text":"<p>Real-time features are implemented using Socket.IO with a room-based routing architecture:</p> <ul> <li>Personal Rooms: Each user is assigned to a room named <code>user:{username}</code> for direct message delivery</li> <li>Admin Room: All users with <code>rol=admin</code> join a collective <code>admins</code> room to receive all user messages</li> <li>Event Handlers: The <code>setupSocket</code> function in src/sockets/socketHandler.js  registers handlers for: * <code>mensaje_privado</code>: Send and persist messages * <code>mensaje_recibido</code>: Emit messages to appropriate rooms * <code>disconnect</code>: Cleanup on connection close</li> </ul> <p>WebSocket connections are authenticated using the same JWT tokens from HTTP-only cookies, ensuring consistent security across both communication channels.</p> <p>Sources: index.js L57</p> <p>index.js L12</p> <p>Diagram 3</p>"},{"location":"Overview.html#api-documentation","title":"API Documentation","text":"<p>The system includes Swagger UI for interactive API documentation, accessible at <code>/api-docs</code> when the server is running (index.js L44</p> <p>). The Swagger specification is generated from JSDoc annotations using <code>swagger-jsdoc</code> (index.js L19</p> <p>).</p> <p>Sources: index.js L44</p> <p>index.js L64</p> <p>package.json L41-L42</p>"},{"location":"Overview.html#project-structure-summary","title":"Project Structure Summary","text":"<pre><code>registro/\n\u251c\u2500\u2500 index.js                    # Application entry point and bootstrap\n\u251c\u2500\u2500 package.json                # Dependencies and project metadata\n\u251c\u2500\u2500 env/.env                    # Environment variables (DB credentials, JWT secret)\n\u251c\u2500\u2500 database/\n\u2502   \u2514\u2500\u2500 db.js                   # MySQL connection pool configuration\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 router.js               # HTTP route definitions\n\u2502   \u251c\u2500\u2500 controllers.js          # Business logic for route handlers\n\u2502   \u251c\u2500\u2500 middlewares/\n\u2502   \u2502   \u251c\u2500\u2500 security.js         # Helmet and rate limiting configuration\n\u2502   \u2502   \u251c\u2500\u2500 verifyToken.js      # JWT authentication middleware\n\u2502   \u2502   \u251c\u2500\u2500 verifyAdmin.js      # Role-based authorization middleware\n\u2502   \u2502   \u2514\u2500\u2500 setGlobals.js       # Global template variable injection\n\u2502   \u2514\u2500\u2500 sockets/\n\u2502       \u2514\u2500\u2500 socketHandler.js    # Socket.IO event handler registration\n\u251c\u2500\u2500 views/                      # EJS templates\n\u2502   \u251c\u2500\u2500 layout.ejs              # Master template\n\u2502   \u251c\u2500\u2500 partials/               # Reusable components (header, footer)\n\u2502   \u251c\u2500\u2500 index.ejs               # Homepage\n\u2502   \u251c\u2500\u2500 login.ejs               # Login form\n\u2502   \u251c\u2500\u2500 register.ejs            # Registration form\n\u2502   \u251c\u2500\u2500 admin.ejs               # Product management UI\n\u2502   \u251c\u2500\u2500 soporte.ejs             # Support chat interface\n\u2502   \u2514\u2500\u2500 pdfTabla.ejs            # PDF template for Puppeteer\n\u251c\u2500\u2500 public/                     # Static assets served at /resources\n\u2502   \u251c\u2500\u2500 css/                    # Stylesheets\n\u2502   \u251c\u2500\u2500 resources/\n\u2502   \u2502   \u251c\u2500\u2500 img/                # UI images and flags\n\u2502   \u2502   \u2514\u2500\u2500 uploads/            # User-uploaded profile images\n\u2502   \u2514\u2500\u2500 docs/fonts/             # Custom fonts (Montserrat, Open Sans)\n\u2514\u2500\u2500 locales/                    # Internationalization files\n    \u251c\u2500\u2500 en.json                 # English translations\n    \u2514\u2500\u2500 es.json                 # Spanish translations\n</code></pre> <p>This structure follows a layered architecture pattern with clear separation of concerns: routing, business logic, data access, presentation, and real-time communication are each isolated into dedicated modules.</p> <p>Sources: index.js L1-L86</p> <p>package.json L1-L49</p> <p>Diagram 6</p>"},{"location":"PDF-Generation.html","title":"PDF Generation","text":"<p>Relevant source files * package-lock.json * src/router.js</p> <p>This document describes the two PDF generation systems implemented in the application: Puppeteer-based HTML-to-PDF conversion and PDFKit-based programmatic PDF creation. Both approaches generate downloadable product reports from the <code>productos</code> database table.</p> <p>For information about routing and authentication middleware that protect these endpoints, see Routing System and Authentication &amp; Authorization.</p> <p>Sources: src/router.js L317-L396</p>"},{"location":"PDF-Generation.html#overview","title":"Overview","text":"<p>The application provides two distinct methods for generating PDF documents containing product data:</p> Approach Route Library Method HTML-to-PDF <code>/pdf/descargar</code> Puppeteer v24.14.0 Renders EJS template, converts HTML to PDF via headless Chrome Programmatic <code>/pdfkit/descargar</code> PDFKit v0.17.1 Direct PDF construction using drawing commands <p>Both routes are protected by the <code>verifyToken</code> middleware and query the <code>productos</code> table from the MySQL database before generating output.</p> <p>Sources: src/router.js L317-L396</p> <p>package-lock.json L27-L28</p>"},{"location":"PDF-Generation.html#pdf-generation-architecture","title":"PDF Generation Architecture","text":"<pre><code>flowchart TD\n\nClient[\"Client Browser\"]\nAuth[\"verifyToken Middleware&lt;br&gt;(src/middlewares/verifyToken.js)\"]\nPuppeteerRoute[\"GET /pdf/descargar&lt;br&gt;(router.js:317)\"]\nPDFKitRoute[\"GET /pdfkit/descargar&lt;br&gt;(router.js:355)\"]\nDB[\"MySQL Database&lt;br&gt;productos table\"]\nEJS[\"ejs.renderFile()&lt;br&gt;views/pdfTabla.ejs\"]\nPuppeteer[\"puppeteer.launch()&lt;br&gt;Headless Chrome\"]\nPDFDoc[\"new PDFDocument()&lt;br&gt;PDFKit API\"]\nPDFBuffer[\"PDF Buffer in Memory\"]\nDownload[\"Content-Disposition:&lt;br&gt;attachment\"]\n\nClient --&gt; Auth\nClient --&gt; Auth\nAuth --&gt; PuppeteerRoute\nAuth --&gt; PDFKitRoute\nPuppeteerRoute --&gt; DB\nPDFKitRoute --&gt; DB\nDB --&gt; PuppeteerRoute\nDB --&gt; PDFKitRoute\nPuppeteerRoute --&gt; EJS\nEJS --&gt; Puppeteer\nPuppeteer --&gt; PDFBuffer\nPDFKitRoute --&gt; PDFDoc\nPDFDoc --&gt; PDFBuffer\nPDFBuffer --&gt; Download\nDownload --&gt; Client</code></pre> <p>Diagram: PDF Generation Request Flow</p> <p>This diagram shows how both PDF generation routes start with authentication via <code>verifyToken</code>, query the database, then diverge into their respective generation strategies before sending the PDF to the client.</p> <p>Sources: src/router.js L317-L396</p> <p>src/middlewares/verifyToken.js</p>"},{"location":"PDF-Generation.html#puppeteer-based-pdf-generation","title":"Puppeteer-Based PDF Generation","text":""},{"location":"PDF-Generation.html#route-definition","title":"Route Definition","text":"<p>The Puppeteer approach is implemented at the <code>/pdf/descargar</code> endpoint src/router.js L317-L353</p> <p>It follows this sequence:</p> <ol> <li>Database Query: Executes <code>SELECT * FROM productos</code> via <code>db.query()</code> src/router.js L318</li> <li>EJS Rendering: Calls <code>ejs.renderFile()</code> with <code>views/pdfTabla.ejs</code> and product data src/router.js L324-L326</li> <li>Browser Launch: Starts headless Chrome with <code>puppeteer.launch()</code> src/router.js L328-L331</li> <li>HTML Loading: Creates new page and loads HTML with <code>page.setContent()</code> src/router.js L333-L334</li> <li>PDF Conversion: Generates PDF buffer with <code>page.pdf()</code> src/router.js L336-L340</li> <li>Cleanup: Closes browser with <code>browser.close()</code> src/router.js L342</li> <li>Response: Sets headers and sends buffer src/router.js L344-L346</li> </ol>"},{"location":"PDF-Generation.html#puppeteer-launch-configuration","title":"Puppeteer Launch Configuration","text":"<pre><code>const browser = await puppeteer.launch({\n    headless: true,\n    args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\n});\n</code></pre> <p>The launch arguments <code>--no-sandbox</code> and <code>--disable-setuid-sandbox</code> are necessary for running Chrome in containerized or restricted environments src/router.js L328-L331</p>"},{"location":"PDF-Generation.html#pdf-generation-options","title":"PDF Generation Options","text":"<pre><code>const pdfBuffer = await page.pdf({\n    format: \"A4\",\n    printBackground: true,\n    margin: { top: \"20px\", bottom: \"20px\" },\n});\n</code></pre> <p>The <code>page.pdf()</code> method converts the rendered HTML to a PDF with A4 format, background graphics enabled, and 20px top/bottom margins src/router.js L336-L340</p>"},{"location":"PDF-Generation.html#ejs-template","title":"EJS Template","text":"<p>The template rendered is <code>views/pdfTabla.ejs</code>, which receives a <code>productos</code> array containing database query results src/router.js L324-L326</p> <p>This template is also used for the <code>/pdfAdmin</code> route preview src/router.js L136-L151</p>"},{"location":"PDF-Generation.html#error-handling","title":"Error Handling","text":"<p>The route wraps the entire generation process in a try-catch block. If any step fails, it logs the error and returns a 500 status with message \"Error interno al generar el PDF\" src/router.js L348-L351</p> <p>Sources: src/router.js L317-L353</p>"},{"location":"PDF-Generation.html#pdfkit-based-pdf-generation","title":"PDFKit-Based PDF Generation","text":""},{"location":"PDF-Generation.html#route-definition_1","title":"Route Definition","text":"<p>The PDFKit approach is implemented at the <code>/pdfkit/descargar</code> endpoint src/router.js L355-L396</p> <p>It constructs the PDF programmatically without any HTML intermediate step.</p> <pre><code>sequenceDiagram\n  participant Client\n  participant /pdfkit/descargar\n  participant MySQL productos\n  participant PDFDocument\n  participant HTTP Response Stream\n\n  Client-&gt;&gt;/pdfkit/descargar: GET /pdfkit/descargar\n  /pdfkit/descargar-&gt;&gt;MySQL productos: SELECT * FROM productos\n  MySQL productos--&gt;&gt;/pdfkit/descargar: results array\n  /pdfkit/descargar-&gt;&gt;PDFDocument: new PDFDocument()\n  /pdfkit/descargar-&gt;&gt;HTTP Response Stream: doc.pipe(res)\n  PDFDocument-&gt;&gt;HTTP Response Stream: Title (fontSize 18, centered)\n  PDFDocument-&gt;&gt;HTTP Response Stream: Table Headers (Helvetica-Bold, 12pt)\n  loop [Each Product]\n    PDFDocument-&gt;&gt;HTTP Response Stream: Row Data (Helvetica, 11pt)\n  end\n  PDFDocument-&gt;&gt;HTTP Response Stream: doc.end()\n  HTTP Response Stream--&gt;&gt;Client: productos_desde_cero.pdf</code></pre> <p>Diagram: PDFKit Generation Sequence</p> <p>The diagram shows how PDFKit streams the PDF directly to the HTTP response as it's being constructed, rather than building in memory first.</p> <p>Sources: src/router.js L355-L396</p>"},{"location":"PDF-Generation.html#document-initialization","title":"Document Initialization","text":"<pre><code>const doc = new PDFDocument({ margin: 40, size: 'A4' });\n</code></pre> <p>The <code>PDFDocument</code> constructor sets a 40-point margin on all sides and A4 page size src/router.js L361</p>"},{"location":"PDF-Generation.html#response-headers","title":"Response Headers","text":"<pre><code>res.setHeader(\"Content-Disposition\", 'attachment; filename=\"productos_desde_cero.pdf\"');\nres.setHeader(\"Content-Type\", \"application/pdf\");\ndoc.pipe(res);\n</code></pre> <p>The document is piped directly to the response stream, allowing immediate transmission without buffering the entire PDF in memory src/router.js L364-L367</p>"},{"location":"PDF-Generation.html#content-rendering","title":"Content Rendering","text":"<p>The document constructs a table layout through manual positioning:</p> Operation Method Position Purpose Title <code>doc.fontSize(18).text()</code> Centered \"Listado de Productos\" heading Headers <code>doc.font(\"Helvetica-Bold\").fontSize(12)</code> Fixed X coordinates Column labels Data Rows <code>doc.font(\"Helvetica\").fontSize(11)</code> Incremental Y Product records <p>Column X Coordinates:</p> <ul> <li>Referencia: 50</li> <li>Nombre: 150</li> <li>Precio: 300</li> <li>Stock: 380</li> </ul> <p>The Y coordinate starts at <code>doc.y</code> after the title and increments by 20 points per row src/router.js L369-L392</p>"},{"location":"PDF-Generation.html#font-switching","title":"Font Switching","text":"<p>The implementation alternates between <code>Helvetica-Bold</code> for headers and <code>Helvetica</code> for data using <code>doc.font()</code> src/router.js L374-L384</p>"},{"location":"PDF-Generation.html#data-type-formatting","title":"Data Type Formatting","text":"<pre><code>doc.text(p.ref.toString(), 50, y);\ndoc.text(p.nombre, 150, y);\ndoc.text(Number(p.precio).toFixed(2), 300, y);\ndoc.text(p.stock.toString(), 380, y);\n</code></pre> <ul> <li><code>ref</code> and <code>stock</code>: Converted to string</li> <li><code>precio</code>: Converted to Number and formatted to 2 decimal places</li> <li><code>nombre</code>: Used directly as string</li> </ul> <p>src/router.js L387-L390</p> <p>Sources: src/router.js L355-L396</p>"},{"location":"PDF-Generation.html#comparison-and-trade-offs","title":"Comparison and Trade-offs","text":"<pre><code>flowchart TD\n\nP1[\"EJS Template\"]\nP2[\"HTML String\"]\nP3[\"Headless Chrome\"]\nP4[\"PDF Buffer\"]\nP5[\"Response\"]\nK1[\"Product Data\"]\nK2[\"PDFDocument API\"]\nK3[\"Streamed PDF\"]\nK4[\"Response\"]\nData[\"productos table\"]\n\nData --&gt; P1\nData --&gt; K1\n\nsubgraph PDFKit [\"PDFKit Approach\"]\n    K1\n    K2\n    K3\n    K4\n    K1 --&gt; K2\n    K2 --&gt; K3\n    K3 --&gt; K4\nend\n\nsubgraph Puppeteer [\"Puppeteer Approach\"]\n    P1\n    P2\n    P3\n    P4\n    P5\n    P1 --&gt; P2\n    P2 --&gt; P3\n    P3 --&gt; P4\n    P4 --&gt; P5\nend</code></pre> <p>Diagram: Architectural Comparison</p>"},{"location":"PDF-Generation.html#performance-characteristics","title":"Performance Characteristics","text":"Aspect Puppeteer PDFKit Memory High (browser process + HTML + buffer) Low (streaming output) CPU High (Chrome rendering engine) Low (direct PDF writing) Startup Time ~1-2s (browser launch) &lt;50ms (library init) Template Reuse Yes (<code>pdfTabla.ejs</code>) No (hardcoded layout) CSS Support Full CSS/HTML None (manual positioning)"},{"location":"PDF-Generation.html#use-case-suitability","title":"Use Case Suitability","text":"<p>Puppeteer src/router.js L317-L353</p> <p>is appropriate when:</p> <ul> <li>Complex layouts require CSS flexbox/grid</li> <li>Design consistency with web views matters (<code>/pdfAdmin</code> route uses same template)</li> <li>PDF design is managed by frontend developers familiar with HTML/CSS</li> <li>Server has adequate resources for headless browser instances</li> </ul> <p>PDFKit src/router.js L355-L396</p> <p>is appropriate when:</p> <ul> <li>Performance and resource efficiency are critical</li> <li>Layout is simple and tabular</li> <li>Fine control over PDF metadata/structure is needed</li> <li>Deployment environment restricts browser execution</li> </ul>"},{"location":"PDF-Generation.html#file-size","title":"File Size","text":"<p>Both routes produce similar file sizes for the same data because both:</p> <ul> <li>Use standard fonts (Helvetica)</li> <li>Avoid embedded images</li> <li>Contain identical textual content</li> </ul> <p>The primary difference is metadata and internal structure, not compressed size.</p> <p>Sources: src/router.js L317-L396</p>"},{"location":"PDF-Generation.html#dependencies-and-installation","title":"Dependencies and Installation","text":"<p>Both libraries are declared in <code>package.json</code> dependencies:</p> <pre><code>{\n  \"pdfkit\": \"^0.17.1\",\n  \"puppeteer\": \"^24.14.0\"\n}\n</code></pre> <p>Puppeteer Installation: Downloads Chromium binary (~170-300 MB depending on platform) during <code>npm install</code>. The download can be skipped by setting <code>PUPPETEER_SKIP_DOWNLOAD=true</code> and providing a custom executable path package-lock.json L208-L228</p> <p>PDFKit Installation: Pure JavaScript library with no binary dependencies. Includes font support for OpenType/TrueType fonts package-lock.json L1533-L1549</p>"},{"location":"PDF-Generation.html#puppeteer-browser-management","title":"Puppeteer Browser Management","text":"<p>Puppeteer's browser is managed via <code>@puppeteer/browsers</code> package which handles:</p> <ul> <li>Browser download and extraction</li> <li>Version management</li> <li>Executable location resolution</li> </ul> <p>The browser cache is stored in <code>node_modules/puppeteer/.local-chromium/</code> by default package-lock.json L208-L228</p> <p>Sources: package-lock.json L27-L28</p> <p>package-lock.json L208-L228</p> <p>package-lock.json L1533-L1549</p>"},{"location":"PDF-Generation.html#integration-with-application-flow","title":"Integration with Application Flow","text":"<p>Both PDF routes integrate with the authentication and routing layers:</p> <pre><code>flowchart TD\n\nRouter[\"Express Router&lt;br&gt;(src/router.js)\"]\nVerify[\"verifyToken&lt;br&gt;(src/middlewares/verifyToken.js)\"]\nPuppeteerHandler[\"async (req, res) =&gt; {&lt;br&gt;  db.query(...)&lt;br&gt;  puppeteer.launch(...)&lt;br&gt;}\"]\nPDFKitHandler[\"(req, res) =&gt; {&lt;br&gt;  db.query(...)&lt;br&gt;  new PDFDocument(...)&lt;br&gt;}\"]\nDB[\"db.query()&lt;br&gt;database/db.js\"]\n\nRouter --&gt; Verify\nRouter --&gt; Verify\nVerify --&gt; PuppeteerHandler\nVerify --&gt; PDFKitHandler\nPuppeteerHandler --&gt; DB\nPDFKitHandler --&gt; DB</code></pre> <p>Diagram: PDF Routes in Routing System</p>"},{"location":"PDF-Generation.html#authentication-dependency","title":"Authentication Dependency","text":"<p>Both routes use <code>verifyToken</code> middleware, which:</p> <ol> <li>Extracts JWT from <code>req.cookies.token</code></li> <li>Verifies signature with <code>process.env.JWT_SECRET</code></li> <li>Attaches decoded payload to <code>req.user</code></li> <li>Returns 401 if token is invalid or missing</li> </ol> <p>This ensures only authenticated users can generate PDFs src/router.js L16-L355</p>"},{"location":"PDF-Generation.html#database-connection","title":"Database Connection","text":"<p>Both routes access the MySQL database via the shared <code>db</code> connection pool imported from <code>database/db.js</code> src/router.js L5</p> <p>The connection is configured during application startup index.js</p> <p>Sources: src/router.js L5-L355</p> <p>src/middlewares/verifyToken.js</p>"},{"location":"PDF-Generation.html#response-headers_1","title":"Response Headers","text":"<p>Both implementations set identical HTTP headers for file download:</p> <pre><code>res.setHeader(\"Content-Type\", \"application/pdf\");\nres.setHeader(\"Content-Disposition\", 'attachment; filename=\"...\"');\n</code></pre> <p>The <code>Content-Disposition: attachment</code> header triggers browser download dialog rather than inline display src/router.js L344-L365</p>"},{"location":"PDF-Generation.html#filename-differentiation","title":"Filename Differentiation","text":"<ul> <li>Puppeteer route: <code>productos.pdf</code> src/router.js L345</li> <li>PDFKit route: <code>productos_desde_cero.pdf</code> src/router.js L364</li> </ul> <p>This allows distinguishing which generation method was used when testing both endpoints.</p> <p>Sources: src/router.js L344-L365</p>"},{"location":"PDF-Generation.html#error-handling-comparison","title":"Error Handling Comparison","text":""},{"location":"PDF-Generation.html#puppeteer-route","title":"Puppeteer Route","text":"<p>Uses async/await with try-catch wrapper:</p> <pre><code>try {\n    const html = await ejs.renderFile(...);\n    const browser = await puppeteer.launch(...);\n    // ... generation logic\n    await browser.close();\n    res.send(pdfBuffer);\n} catch (err) {\n    console.error(\"\u274c Error al generar el PDF:\", err);\n    res.status(500).send(\"Error interno al generar el PDF\");\n}\n</code></pre> <p>Handles both EJS rendering failures and Puppeteer errors uniformly src/router.js L323-L351</p>"},{"location":"PDF-Generation.html#pdfkit-route","title":"PDFKit Route","text":"<p>Uses traditional callback error handling from <code>db.query()</code>:</p> <pre><code>db.query(\"SELECT * FROM productos\", (error, results) =&gt; {\n    if (error) {\n        return res.status(500).send(\"Error al obtener productos\");\n    }\n    // ... generation logic (no try-catch)\n});\n</code></pre> <p>PDFKit operations lack error handling because document stream errors would typically close the connection automatically src/router.js L356-L395</p> <p>Sources: src/router.js L318-L395</p>"},{"location":"PDFKit-PDF-Generation.html","title":"PDFKit PDF Generation","text":"<p>Relevant source files * package-lock.json * src/router.js</p>"},{"location":"PDFKit-PDF-Generation.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document covers the PDFKit-based programmatic PDF generation system that creates product reports with precise layout control. This approach directly generates PDF documents using drawing commands and coordinate positioning, contrasting with the HTML-to-PDF rendering approach. For the Puppeteer-based HTML rendering approach, see Puppeteer PDF Generation. For general PDF generation features, see PDF Generation.</p> <p>The PDFKit implementation provides:</p> <ul> <li>Programmatic PDF creation without HTML templates</li> <li>Direct control over layout positioning and styling</li> <li>Streaming response for efficient memory usage</li> <li>Product data export functionality for authenticated users</li> </ul>"},{"location":"PDFKit-PDF-Generation.html#overview","title":"Overview","text":"<p>The PDFKit PDF generation system creates product reports by programmatically drawing content onto a PDF document. Unlike the Puppeteer approach that renders HTML templates, PDFKit uses low-level drawing commands to place text at specific coordinates, providing precise control over layout but requiring manual positioning calculations.</p> <p>Key Characteristics:</p> <ul> <li>Route: <code>GET /pdfkit/descargar</code></li> <li>Authentication: Requires valid JWT via <code>verifyToken</code> middleware</li> <li>Data Source: <code>productos</code> table in MySQL database</li> <li>Output Format: PDF file with filename <code>productos_desde_cero.pdf</code></li> <li>Delivery Method: Direct streaming via <code>doc.pipe(res)</code></li> </ul> <p>Sources: src/router.js L355-L396</p> <p>package-lock.json L27</p>"},{"location":"PDFKit-PDF-Generation.html#request-flow-architecture","title":"Request Flow Architecture","text":"<pre><code>flowchart TD\n\nClient[\"Client Browser\"]\nRoute[\"GET /pdfkit/descargar&lt;br&gt;router.js:355\"]\nVerifyToken[\"verifyToken&lt;br&gt;Middleware\"]\nDBQuery[\"db.query&lt;br&gt;SELECT * FROM productos\"]\nPDFDoc[\"new PDFDocument&lt;br&gt;margin: 40, size: A4\"]\nSetHeaders[\"res.setHeader&lt;br&gt;Content-Disposition&lt;br&gt;Content-Type\"]\nPipeStream[\"doc.pipe(res)\"]\nDrawTitle[\"doc.fontSize(18).text&lt;br&gt;Listado de Productos\"]\nDrawHeaders[\"Draw Table Headers&lt;br&gt;x,y coordinates\"]\nDrawRows[\"forEach productos&lt;br&gt;Draw data rows\"]\nEndDoc[\"doc.end()\"]\nResponse[\"PDF Stream to Client\"]\nMySQL[\"MySQL Database&lt;br&gt;productos table\"]\n\nClient --&gt; Route\nRoute --&gt; VerifyToken\nVerifyToken --&gt; DBQuery\nDBQuery --&gt; PDFDoc\nPDFDoc --&gt; SetHeaders\nSetHeaders --&gt; PipeStream\nPipeStream --&gt; DrawTitle\nDrawTitle --&gt; DrawHeaders\nDrawHeaders --&gt; DrawRows\nDrawRows --&gt; EndDoc\nEndDoc --&gt; Response\nResponse --&gt; Client\nDBQuery --&gt; MySQL</code></pre> <p>Sources: src/router.js L355-L396</p>"},{"location":"PDFKit-PDF-Generation.html#route-definition-and-configuration","title":"Route Definition and Configuration","text":"<p>The PDFKit route is defined at src/router.js L355-L396</p> <p>with the following structure:</p> Aspect Configuration HTTP Method GET Path <code>/pdfkit/descargar</code> Authentication <code>verifyToken</code> middleware Authorization User-level access (any authenticated user) Database Query <code>SELECT * FROM productos</code> Response Type <code>application/pdf</code> Content-Disposition <code>attachment; filename=\"productos_desde_cero.pdf\"</code> <p>Authentication Flow:</p> <ol> <li>Client must have valid JWT in <code>token</code> cookie</li> <li><code>verifyToken</code> middleware validates JWT signature and expiration</li> <li>User information attached to <code>req.user</code> for potential logging</li> <li>No role-based restriction (both users and admins can access)</li> </ol> <p>Sources: src/router.js L355-L396</p> <p>src/router.js L16</p>"},{"location":"PDFKit-PDF-Generation.html#pdf-document-initialization","title":"PDF Document Initialization","text":"<p>The PDF document is created with specific configuration parameters:</p> <pre><code>const doc = new PDFDocument({ margin: 40, size: 'A4' });\n</code></pre> <p>Configuration Parameters:</p> Parameter Value Purpose <code>margin</code> <code>40</code> Sets 40-point margin on all sides <code>size</code> <code>'A4'</code> Standard paper size (210mm \u00d7 297mm) <p>Response Headers:</p> <ul> <li><code>Content-Disposition: attachment; filename=\"productos_desde_cero.pdf\"</code> - Forces browser download</li> <li><code>Content-Type: application/pdf</code> - Specifies MIME type</li> </ul> <p>Streaming Architecture: The document is piped directly to the response object at src/router.js L367</p> <p>:</p> <pre><code>doc.pipe(res);\n</code></pre> <p>This approach streams the PDF content as it's generated rather than buffering the entire document in memory, providing efficient memory usage for large reports.</p> <p>Sources: src/router.js L361-L367</p>"},{"location":"PDFKit-PDF-Generation.html#content-rendering-process","title":"Content Rendering Process","text":"<pre><code>flowchart TD\n\nStart[\"Start Rendering\"]\nTitle[\"Render Title&lt;br&gt;fontSize(18)&lt;br&gt;text('Listado de Productos')&lt;br&gt;align: center&lt;br&gt;moveDown()\"]\nHeaderFont[\"Set Header Font&lt;br&gt;font('Helvetica-Bold')&lt;br&gt;fontSize(12)\"]\nGetY[\"y = doc.y&lt;br&gt;Current vertical position\"]\nHeaderText[\"Draw Headers&lt;br&gt;Referencia (50, y)&lt;br&gt;Nombre (150, y)&lt;br&gt;Precio (300, y)&lt;br&gt;Stock (380, y)\"]\nIncrementY1[\"y += 20&lt;br&gt;Space after headers\"]\nDataFont[\"Set Data Font&lt;br&gt;font('Helvetica')&lt;br&gt;fontSize(11)\"]\nLoopStart[\"For each&lt;br&gt;producto\"]\nDrawRow[\"Draw Row Data&lt;br&gt;ref (50, y)&lt;br&gt;nombre (150, y)&lt;br&gt;precio (300, y)&lt;br&gt;stock (380, y)\"]\nIncrementY2[\"y += 20&lt;br&gt;Next row\"]\nLoopEnd[\"End Loop\"]\nFinalize[\"doc.end()\"]\n\nStart --&gt; Title\nTitle --&gt; HeaderFont\nHeaderFont --&gt; GetY\nGetY --&gt; HeaderText\nHeaderText --&gt; IncrementY1\nIncrementY1 --&gt; DataFont\nDataFont --&gt; LoopStart\nLoopStart --&gt; DrawRow\nDrawRow --&gt; IncrementY2\nIncrementY2 --&gt; LoopStart\nLoopStart --&gt; Finalize</code></pre> <p>Sources: src/router.js L369-L395</p>"},{"location":"PDFKit-PDF-Generation.html#layout-positioning-system","title":"Layout Positioning System","text":"<p>The PDFKit implementation uses absolute positioning with fixed X-coordinates for table columns:</p>"},{"location":"PDFKit-PDF-Generation.html#column-layout","title":"Column Layout","text":"Column X Position Content Data Type Referencia 50 <code>p.ref.toString()</code> Integer (AUTO_INCREMENT) Nombre 150 <code>p.nombre</code> String (varchar(30)) Precio 300 <code>Number(p.precio).toFixed(2)</code> Decimal (10,2) Stock 380 <code>p.stock.toString()</code> Integer"},{"location":"PDFKit-PDF-Generation.html#vertical-positioning","title":"Vertical Positioning","text":"<p>The Y-coordinate is managed dynamically:</p> <ol> <li>Initial Position: Retrieved via <code>doc.y</code> after title at src/router.js L375</li> <li>Header Row: Headers placed at current Y position</li> <li>Row Spacing: Y incremented by 20 points between rows at src/router.js L382  and src/router.js L391</li> </ol> <p>Coordinate System Diagram:</p> <pre><code>flowchart TD\n\nP50[\"X=50&lt;br&gt;Referencia\"]\nP150[\"X=150&lt;br&gt;Nombre\"]\nP300[\"X=300&lt;br&gt;Precio\"]\nP380[\"X=380&lt;br&gt;Stock\"]\nTitle[\"Title (centered)&lt;br&gt;Y = initial\"]\nHeaders[\"Headers Row&lt;br&gt;Y = doc.y\"]\nRow1[\"Data Row 1&lt;br&gt;Y += 20\"]\nRow2[\"Data Row 2&lt;br&gt;Y += 20\"]\nRowN[\"Data Row N&lt;br&gt;Y += 20\"]\n\nTitle --&gt; Headers\nHeaders --&gt; Row1\nRow1 --&gt; Row2\nRow2 --&gt; RowN\n\nsubgraph subGraph0 [\"PDF Coordinate Space\"]\n    P50\n    P150\n    P300\n    P380\n    P50 --&gt; P150\n    P150 --&gt; P300\n    P300 --&gt; P380\nend</code></pre> <p>Sources: src/router.js L373-L391</p>"},{"location":"PDFKit-PDF-Generation.html#font-and-typography-configuration","title":"Font and Typography Configuration","text":""},{"location":"PDFKit-PDF-Generation.html#font-specifications","title":"Font Specifications","text":"<p>The implementation uses two font weights from the Helvetica family:</p> Context Font Size Code Location Title (default) 18 src/router.js L370 Table Headers Helvetica-Bold 12 src/router.js L374 Table Data Helvetica 11 src/router.js L384"},{"location":"PDFKit-PDF-Generation.html#text-rendering-methods","title":"Text Rendering Methods","text":"<p>Title Rendering:</p> <pre><code>doc.fontSize(18).text(\"Listado de Productos\", { align: \"center\" }).moveDown();\n</code></pre> <ul> <li>Method chaining for font size, content, and alignment</li> <li><code>moveDown()</code> adds vertical spacing after title</li> </ul> <p>Positioned Text:</p> <pre><code>doc.text(content, x, y);\n</code></pre> <ul> <li>Explicit X,Y coordinates for table cells</li> <li>No automatic line wrapping or overflow handling</li> </ul> <p>Sources: src/router.js L370-L390</p>"},{"location":"PDFKit-PDF-Generation.html#data-processing-and-type-conversion","title":"Data Processing and Type Conversion","text":"<p>Products retrieved from the database undergo type conversion before rendering:</p>"},{"location":"PDFKit-PDF-Generation.html#type-conversions","title":"Type Conversions","text":"Field Database Type Conversion Reason <code>ref</code> INT(11) <code>p.ref.toString()</code> PDFKit requires strings <code>nombre</code> VARCHAR(30) <code>p.nombre</code> Already string <code>precio</code> DECIMAL(10,2) <code>Number(p.precio).toFixed(2)</code> Format to 2 decimals <code>stock</code> INT(11) <code>p.stock.toString()</code> PDFKit requires strings"},{"location":"PDFKit-PDF-Generation.html#iteration-pattern","title":"Iteration Pattern","text":"<p>The data rendering loop at src/router.js L386-L392</p> <p>uses <code>forEach</code> to iterate through the <code>results</code> array:</p> <pre><code>results.forEach((p) =&gt; {\n    doc.text(p.ref.toString(), 50, y);\n    doc.text(p.nombre, 150, y);\n    doc.text(Number(p.precio).toFixed(2), 300, y);\n    doc.text(p.stock.toString(), 380, y);\n    y += 20;\n});\n</code></pre> <p>Sources: src/router.js L386-L392</p>"},{"location":"PDFKit-PDF-Generation.html#database-integration","title":"Database Integration","text":"<pre><code>flowchart TD\n\nQuery[\"db.query&lt;br&gt;SELECT * FROM productos\"]\nCallback[\"Callback Function&lt;br&gt;(error, results)\"]\nErrorCheck[\"error?\"]\nErrorResponse[\"res.status(500)&lt;br&gt;Error al obtener productos\"]\nPDFGeneration[\"Generate PDF&lt;br&gt;with results\"]\nProductosTable[\"productos table&lt;br&gt;ref (PK)&lt;br&gt;nombre&lt;br&gt;precio&lt;br&gt;stock\"]\n\nQuery --&gt; Callback\nCallback --&gt; ErrorCheck\nErrorCheck --&gt; ErrorResponse\nErrorCheck --&gt; PDFGeneration\nQuery --&gt; ProductosTable\nProductosTable --&gt; Callback</code></pre> <p>Query Details:</p> <ul> <li>SQL: <code>SELECT * FROM productos</code></li> <li>Returns: Array of product objects</li> <li>Error Handling: Returns HTTP 500 on query failure</li> <li>Callback Pattern: Traditional callback at src/router.js L356-L396</li> </ul> <p>Database Schema Reference: For complete <code>productos</code> table schema, see productos Table.</p> <p>Sources: src/router.js L356-L359</p>"},{"location":"PDFKit-PDF-Generation.html#pdfkit-vs-puppeteer-comparison","title":"PDFKit vs Puppeteer Comparison","text":"Aspect PDFKit Puppeteer Route <code>/pdfkit/descargar</code> <code>/pdf/descargar</code> Approach Programmatic drawing HTML template rendering Template None (code-based) <code>views/pdfTabla.ejs</code> Layout Method Absolute coordinates CSS styling Memory Usage Low (streaming) Higher (browser instance) Dependencies PDFKit only Puppeteer + EJS + Chrome Flexibility Manual positioning HTML/CSS flexibility Complexity Low-level control Higher abstraction Performance Fast (direct PDF) Slower (browser startup) Maintenance Position calculations Template maintenance"},{"location":"PDFKit-PDF-Generation.html#when-to-use-each-approach","title":"When to Use Each Approach","text":"<p>PDFKit (Current Page):</p> <ul> <li>Simple tabular reports</li> <li>Known, fixed layouts</li> <li>Performance-critical scenarios</li> <li>Minimal external dependencies</li> </ul> <p>Puppeteer (Page 10.1):</p> <ul> <li>Complex layouts with CSS</li> <li>Existing HTML templates</li> <li>Rich typography and graphics</li> <li>Need for print CSS features</li> </ul> <p>Sources: src/router.js L355-L396</p> <p>src/router.js L317-L353</p>"},{"location":"PDFKit-PDF-Generation.html#complete-generation-flow-diagram","title":"Complete Generation Flow Diagram","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant Router\n  participant verifyToken\n  participant MySQL Database\n  participant PDFDocument\n  participant Response Stream\n\n  Client-&gt;&gt;Router: GET /pdfkit/descargar\n  Router-&gt;&gt;verifyToken: Verify JWT token\n  verifyToken-&gt;&gt;Router: User authenticated\n  Router-&gt;&gt;MySQL Database: SELECT * FROM productos\n  MySQL Database-&gt;&gt;Router: results array\n  Router-&gt;&gt;PDFDocument: new PDFDocument({margin:40, size:'A4'})\n  Router-&gt;&gt;Response Stream: Set headers (Content-Type, Content-Disposition)\n  Router-&gt;&gt;PDFDocument: doc.pipe(res)\n  note over PDFDocument: Streaming begins\n  PDFDocument-&gt;&gt;Response Stream: Write title\n  PDFDocument-&gt;&gt;Response Stream: Write table headers\n  loop [For each producto]\n    PDFDocument-&gt;&gt;Response Stream: Write row data\n  end\n  PDFDocument-&gt;&gt;Response Stream: doc.end()\n  Response Stream-&gt;&gt;Client: PDF file stream</code></pre> <p>Sources: src/router.js L355-L396</p>"},{"location":"PDFKit-PDF-Generation.html#error-handling","title":"Error Handling","text":""},{"location":"PDFKit-PDF-Generation.html#database-query-errors","title":"Database Query Errors","text":"<p>If the database query fails at src/router.js L357</p> <p>:</p> <pre><code>if (error) {\n    return res.status(500).send(\"Error al obtener productos\");\n}\n</code></pre> <p>Error Response:</p> <ul> <li>HTTP Status: 500</li> <li>Content-Type: text/html</li> <li>Body: \"Error al obtener productos\"</li> </ul>"},{"location":"PDFKit-PDF-Generation.html#authentication-errors","title":"Authentication Errors","text":"<p>Authentication failures are handled by the <code>verifyToken</code> middleware before reaching the route handler:</p> <ul> <li>Missing token \u2192 401 response</li> <li>Invalid token \u2192 401 response</li> <li>Expired token \u2192 401 response</li> </ul> <p>For authentication details, see verifyToken Middleware.</p> <p>Sources: src/router.js L355-L359</p>"},{"location":"PDFKit-PDF-Generation.html#document-finalization","title":"Document Finalization","text":"<p>The PDF document is finalized at src/router.js L394</p> <p>:</p> <pre><code>doc.end();\n</code></pre> <p>Finalization Process:</p> <ol> <li><code>doc.end()</code> signals end of content writing</li> <li>Remaining buffered content flushed to stream</li> <li>PDF structure finalized (xref table, trailer)</li> <li>Stream closed automatically</li> <li>Client receives complete PDF file</li> </ol> <p>No Explicit Response Closure: The response is closed automatically when the piped stream ends. The route handler does not explicitly call <code>res.end()</code> because the stream handles this.</p> <p>Sources: src/router.js L394</p>"},{"location":"PDFKit-PDF-Generation.html#usage-example","title":"Usage Example","text":"<p>Client Request:</p> <pre><code>GET /pdfkit/descargar HTTP/1.1\nHost: example.com\nCookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>Server Response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/pdf\nContent-Disposition: attachment; filename=\"productos_desde_cero.pdf\"\nContent-Length: [file size]\n\n%PDF-1.3\n[binary PDF content]\n</code></pre> <p>Browser Behavior: The <code>attachment</code> disposition triggers a file download dialog with the suggested filename <code>productos_desde_cero.pdf</code>.</p> <p>Sources: src/router.js L364-L365</p>"},{"location":"PDFKit-PDF-Generation.html#implementation-dependencies","title":"Implementation Dependencies","text":""},{"location":"PDFKit-PDF-Generation.html#npm-packages","title":"NPM Packages","text":"Package Version Purpose <code>pdfkit</code> 0.17.1 PDF document generation <code>express</code> 5.1.0 HTTP routing framework <code>mysql2</code> 3.14.1 Database connectivity <code>jsonwebtoken</code> 9.0.2 JWT authentication"},{"location":"PDFKit-PDF-Generation.html#internal-dependencies","title":"Internal Dependencies","text":"<ul> <li><code>src/middlewares/verifyToken.js</code> - JWT validation</li> <li><code>database/db.js</code> - MySQL connection pool</li> <li><code>process.env.JWT_SECRET</code> - Token signing key</li> </ul> <p>Sources: package-lock.json L27-L28</p> <p>src/router.js L1-L19</p>"},{"location":"PDFKit-PDF-Generation.html#performance-considerations","title":"Performance Considerations","text":""},{"location":"PDFKit-PDF-Generation.html#memory-efficiency","title":"Memory Efficiency","text":"<p>Streaming Approach:</p> <ul> <li>PDF content is piped directly to response stream</li> <li>No intermediate buffer for entire document</li> <li>Constant memory usage regardless of document size</li> <li>Suitable for large product catalogs</li> </ul>"},{"location":"PDFKit-PDF-Generation.html#comparison-metrics","title":"Comparison Metrics","text":"Metric PDFKit Puppeteer Startup Time ~0ms (library load) ~500-1000ms (browser launch) Memory Overhead ~10-20MB ~100-200MB CPU Usage Low High (rendering engine) Concurrency High (lightweight) Limited (browser instances) <p>Sources: src/router.js L355-L396</p>"},{"location":"PDFKit-PDF-Generation.html#limitations-and-constraints","title":"Limitations and Constraints","text":""},{"location":"PDFKit-PDF-Generation.html#layout-limitations","title":"Layout Limitations","text":"<ol> <li>Fixed Positioning: All coordinates are hardcoded</li> <li>No Overflow Handling: Text exceeding column width is not wrapped</li> <li>No Pagination: Large datasets may exceed single page</li> <li>Single Page Assumption: No automatic page breaks</li> </ol>"},{"location":"PDFKit-PDF-Generation.html#data-constraints","title":"Data Constraints","text":"<p>Column Width Assumptions:</p> <ul> <li>Referencia: Assumes short integer values</li> <li>Nombre: Maximum 30 characters (database constraint)</li> <li>Precio: Assumes standard currency format</li> <li>Stock: Assumes reasonable integer values</li> </ul>"},{"location":"PDFKit-PDF-Generation.html#missing-features","title":"Missing Features","text":"<ul> <li>No page headers/footers</li> <li>No page numbering</li> <li>No automatic table continuation across pages</li> <li>No grid lines or borders</li> <li>No sorting or filtering options</li> </ul> <p>Sources: src/router.js L373-L391</p>"},{"location":"PDFKit-PDF-Generation.html#future-enhancement-possibilities","title":"Future Enhancement Possibilities","text":""},{"location":"PDFKit-PDF-Generation.html#pagination-support","title":"Pagination Support","text":"<p>To handle large datasets, the implementation could:</p> <ol> <li>Track vertical position (<code>y</code> coordinate)</li> <li>Detect when approaching page bottom</li> <li>Call <code>doc.addPage()</code> to create new page</li> <li>Repeat headers on each page</li> </ol>"},{"location":"PDFKit-PDF-Generation.html#dynamic-column-widths","title":"Dynamic Column Widths","text":"<p>Calculate column widths based on:</p> <ul> <li>Actual content length</li> <li>Available page width</li> <li>Font metrics</li> </ul>"},{"location":"PDFKit-PDF-Generation.html#styling-enhancements","title":"Styling Enhancements","text":"<ul> <li>Add table borders and grid lines</li> <li>Alternate row background colors</li> <li>Header background styling</li> <li>Footer with timestamp or page numbers</li> </ul> <p>Sources: src/router.js L355-L396</p>"},{"location":"Page-Views.html","title":"Page Views","text":"<p>Relevant source files * proyecto.zip * public/css/style.css * views/admin.ejs * views/index.ejs * views/register.ejs * views/soporte.ejs</p>"},{"location":"Page-Views.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides detailed documentation for all individual page templates (views) in the EJS-based presentation layer. Each page view is a template file that renders specific functionality such as user authentication, product management, or real-time chat.</p> <p>For information about the master layout structure that these views extend, see Template Structure. For documentation on reusable components included in these views, see Partial Components.</p>"},{"location":"Page-Views.html#overview-of-page-views","title":"Overview of Page Views","text":"<p>The application contains the following page templates:</p> View File Route Access Level Purpose <code>index.ejs</code> <code>/</code> Public Homepage with welcome message <code>login.ejs</code> <code>/login</code> Public User authentication form <code>register.ejs</code> <code>/registro</code> Public New user registration form <code>admin.ejs</code> <code>/admin</code> Admin only Product management dashboard <code>create.ejs</code> <code>/create</code> Admin only Product creation form <code>edit.ejs</code> <code>/edit/:ref</code> Admin only Product edit form <code>soporte.ejs</code> <code>/soporte</code> Authenticated Real-time support chat interface <code>administrador.ejs</code> N/A N/A Placeholder/unused template <p>Sources: views/index.ejs</p> <p>views/login.ejs</p> <p>views/register.ejs</p> <p>views/admin.ejs</p> <p>views/create.ejs</p> <p>views/edit.ejs</p> <p>views/soporte.ejs</p> <p>views/administrador.ejs</p>"},{"location":"Page-Views.html#route-to-view-mapping","title":"Route-to-View Mapping","text":"<pre><code>flowchart TD\n\nR1[\"GET /\"]\nR2[\"GET /login\"]\nR3[\"GET /registro\"]\nR4[\"GET /soporte&lt;br&gt;verifyToken\"]\nR5[\"GET /admin&lt;br&gt;verifyToken + verifyAdmin\"]\nR6[\"GET /create&lt;br&gt;verifyToken + verifyAdmin\"]\nR7[\"GET /edit/:ref&lt;br&gt;verifyToken + verifyAdmin\"]\nV1[\"index.ejs\"]\nV2[\"login.ejs\"]\nV3[\"register.ejs\"]\nV4[\"soporte.ejs\"]\nV5[\"admin.ejs\"]\nV6[\"create.ejs\"]\nV7[\"edit.ejs\"]\n\nR1 --&gt; V1\nR2 --&gt; V2\nR3 --&gt; V3\nR4 --&gt; V4\nR5 --&gt; V5\nR6 --&gt; V6\nR7 --&gt; V7\n\nsubgraph subGraph3 [\"View Templates\"]\n    V1\n    V2\n    V3\n    V4\n    V5\n    V6\n    V7\nend\n\nsubgraph subGraph2 [\"Admin Routes\"]\n    R5\n    R6\n    R7\nend\n\nsubgraph subGraph1 [\"Authenticated Routes\"]\n    R4\nend\n\nsubgraph subGraph0 [\"Public Routes\"]\n    R1\n    R2\n    R3\nend</code></pre> <p>Sources: src/router.js L1-L300</p> <p>views/index.ejs</p> <p>views/login.ejs</p> <p>views/register.ejs</p> <p>views/admin.ejs</p> <p>views/create.ejs</p> <p>views/edit.ejs</p> <p>views/soporte.ejs</p>"},{"location":"Page-Views.html#indexejs-homepage","title":"index.ejs - Homepage","text":""},{"location":"Page-Views.html#purpose","title":"Purpose","text":"<p>The homepage provides a welcome message and displays the current authentication status. It adapts its content based on whether the user is logged in.</p>"},{"location":"Page-Views.html#template-structure","title":"Template Structure","text":"<p>views/index.ejs L1-L35</p>"},{"location":"Page-Views.html#data-requirements","title":"Data Requirements","text":"Variable Type Description <code>login</code> Boolean Whether user is authenticated <code>user</code> String/Object Username or user object <code>__</code> Function i18n translation function"},{"location":"Page-Views.html#conditional-rendering","title":"Conditional Rendering","text":"<p>The view contains two primary branches:</p> <ul> <li>Authenticated users: Displays username and logout link with translation key <code>'cerrarSesion'</code></li> <li>Unauthenticated users: Displays login link with translation key <code>'iniciarSesion'</code></li> </ul>"},{"location":"Page-Views.html#internationalization","title":"Internationalization","text":"<p>The template uses i18n keys:</p> <ul> <li><code>__('saludo')</code> - Welcome greeting</li> <li><code>__('usuario')</code> - User label</li> <li><code>__('cerrarSesion')</code> - Logout text</li> <li><code>__('iniciarSesion')</code> - Login text</li> </ul> <p>views/index.ejs L13-L31</p>"},{"location":"Page-Views.html#included-components","title":"Included Components","text":"<ul> <li><code>partials/head</code> - HTML head metadata</li> <li><code>partials/header</code> - Navigation header</li> <li><code>partials/popover</code> - Popover component (if enabled)</li> <li><code>partials/footer</code> - Page footer</li> </ul> <p>Sources: views/index.ejs L1-L35</p>"},{"location":"Page-Views.html#loginejs-login-form","title":"login.ejs - Login Form","text":""},{"location":"Page-Views.html#purpose_1","title":"Purpose","text":"<p>Provides the authentication form where users enter credentials to access the system. Handles JWT-based authentication with rate limiting.</p>"},{"location":"Page-Views.html#template-structure_1","title":"Template Structure","text":"<p>views/login.ejs L1-L50</p>"},{"location":"Page-Views.html#form-configuration","title":"Form Configuration","text":"Field Type Attributes <code>user</code> text input <code>name=\"user\"</code>, placeholder, retained on validation error <code>pass</code> password input <code>name=\"pass\"</code>, placeholder, cleared on submission"},{"location":"Page-Views.html#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n  participant User\n  participant login.ejs\n  participant Rate Limiter\n  participant POST /auth\n  participant MySQL usuarios\n\n  User-&gt;&gt;login.ejs: Enter credentials\n  login.ejs-&gt;&gt;POST /auth: POST form data\n  POST /auth-&gt;&gt;Rate Limiter: Check request count\n  loop [Valid credentials]\n    Rate Limiter--&gt;&gt;login.ejs: 429 Too Many Requests\n    Rate Limiter-&gt;&gt;POST /auth: Allow\n    POST /auth-&gt;&gt;MySQL usuarios: Query user + bcrypt verify\n    MySQL usuarios--&gt;&gt;POST /auth: User record\n    POST /auth--&gt;&gt;login.ejs: Redirect with JWT cookie\n    MySQL usuarios--&gt;&gt;POST /auth: No match\n    POST /auth--&gt;&gt;login.ejs: Render with error\n  end</code></pre>"},{"location":"Page-Views.html#client-side-features","title":"Client-Side Features","text":"<p>The login view includes SweetAlert2 integration for displaying alerts views/login.ejs L35-L50</p> <p>Alert configuration:</p> <ul> <li><code>alertTitle</code> - Alert header text</li> <li><code>alertMessage</code> - Alert body text</li> <li><code>alertIcon</code> - Icon type (success, error, warning)</li> <li><code>showConfirmButton</code> - Boolean to show/hide confirmation</li> <li><code>timer</code> - Auto-dismiss timer in milliseconds</li> <li><code>ruta</code> - Redirect path after alert</li> </ul>"},{"location":"Page-Views.html#validation-display","title":"Validation Display","text":"<p>When validation fails, the template can display error messages passed from the server views/login.ejs L20-L28</p> <p>Sources: views/login.ejs L1-L50</p>"},{"location":"Page-Views.html#registerejs-registration-form","title":"register.ejs - Registration Form","text":""},{"location":"Page-Views.html#purpose_2","title":"Purpose","text":"<p>New user registration form with file upload support for profile images. Includes comprehensive validation and feedback.</p>"},{"location":"Page-Views.html#template-structure_2","title":"Template Structure","text":"<p>views/register.ejs L1-L85</p>"},{"location":"Page-Views.html#form-configuration_1","title":"Form Configuration","text":"Field Name Type Description Username <code>user</code> text Unique user identifier Name <code>name</code> text Full name Role <code>rol</code> select \"admin\" or \"user\" Password <code>pass</code> password Hashed with bcrypt Email <code>email</code> text Email address Age <code>edad</code> text User's age Profile Image <code>profileImage</code> file Image upload (optional) <p>views/register.ejs L7-L36</p>"},{"location":"Page-Views.html#form-encoding","title":"Form Encoding","text":"<p>The form uses <code>enctype=\"multipart/form-data\"</code> to support file uploads for profile images views/register.ejs L7</p>"},{"location":"Page-Views.html#value-retention-on-error","title":"Value Retention on Error","text":"<p>When validation fails, the form retains previously entered values (except password) using conditional rendering:</p> <p>views/register.ejs L9-L33</p>"},{"location":"Page-Views.html#validation-feedback","title":"Validation Feedback","text":"<pre><code>flowchart TD\n\nSubmit[\"Form Submission\"]\nValidation[\"express-validator\"]\nValid[\"Valid?\"]\nSuccess[\"SweetAlert Success&lt;br&gt;Redirect to /\"]\nErrors[\"Display validaciones array\"]\nAlertList[\"Bootstrap Alert&lt;br&gt;for each error\"]\n\nSubmit --&gt; Validation\nValidation --&gt; Valid\nValid --&gt; Success\nValid --&gt; Errors\nErrors --&gt; AlertList</code></pre> <p>The template displays validation errors using Bootstrap alert components views/register.ejs L44-L56</p> <p>Each validation error contains:</p> <ul> <li><code>msg</code> - Error message text</li> <li>Rendered as a dismissible alert with icon</li> </ul>"},{"location":"Page-Views.html#sweetalert-integration","title":"SweetAlert Integration","text":"<p>Success or error feedback is displayed via SweetAlert2 views/register.ejs L60-L74</p> <p>Variables:</p> <ul> <li><code>alert</code> - Boolean to trigger alert</li> <li><code>alertTitle</code> - Title text</li> <li><code>alertMessage</code> - Message text</li> <li><code>alertIcon</code> - Icon type</li> <li><code>showConfirmButton</code> - Show/hide confirm button</li> <li><code>timer</code> - Auto-close timer</li> <li><code>ruta</code> - Post-alert redirect path</li> </ul>"},{"location":"Page-Views.html#svg-icon-definitions","title":"SVG Icon Definitions","text":"<p>The template includes inline SVG symbol definitions for validation icons views/register.ejs L77-L83</p> <p>Sources: views/register.ejs L1-L85</p>"},{"location":"Page-Views.html#adminejs-product-management-dashboard","title":"admin.ejs - Product Management Dashboard","text":""},{"location":"Page-Views.html#purpose_3","title":"Purpose","text":"<p>Administrative dashboard displaying all products in a table with CRUD operations. Provides access to product creation, editing, deletion, and PDF export functionality.</p>"},{"location":"Page-Views.html#template-structure_3","title":"Template Structure","text":"<p>views/admin.ejs L1-L71</p>"},{"location":"Page-Views.html#data-requirements_1","title":"Data Requirements","text":"Variable Type Description <code>login</code> Boolean Authentication status <code>user</code> Object User object with <code>imagen</code> property <code>rol</code> String User role (\"admin\" or \"user\") <code>productos</code> Array Array of product objects <code>msg</code> String Error/info message (if not logged in)"},{"location":"Page-Views.html#user-profile-display","title":"User Profile Display","text":"<p>If the user has a profile image, it's displayed at the top views/admin.ejs L4-L7</p>"},{"location":"Page-Views.html#product-table-structure","title":"Product Table Structure","text":"<pre><code>flowchart TD\n\nAdminView[\"admin.ejs\"]\nAuthCheck[\"login?\"]\nShowLogin[\"Show login link\"]\nShowTable[\"Render product table\"]\nTableHeader[\"Table Headers:&lt;br&gt;Referencia, Nombre,&lt;br&gt;Precio, Stock\"]\nRoleCheck[\"rol === 'admin'?\"]\nAdminActions[\"Add 'Acciones' column&lt;br&gt;Edit + Delete buttons\"]\nViewOnly[\"View-only table\"]\nLoopProducts[\"forEach producto in productos\"]\nRenderRow[\"Render table row&lt;br&gt;ref, nombre, precio, stock\"]\nCreateButton[\"Unsupported markdown: list\"]\nPDFButtons[\"PDF export buttons\"]\n\nAdminView --&gt; AuthCheck\nAuthCheck --&gt; ShowLogin\nAuthCheck --&gt; ShowTable\nShowTable --&gt; TableHeader\nShowTable --&gt; RoleCheck\nRoleCheck --&gt; AdminActions\nRoleCheck --&gt; ViewOnly\nShowTable --&gt; LoopProducts\nLoopProducts --&gt; RenderRow\nRoleCheck --&gt; CreateButton\nRoleCheck --&gt; PDFButtons</code></pre>"},{"location":"Page-Views.html#admin-only-features","title":"Admin-Only Features","text":"<p>Create Button: Displayed at the top for admins views/admin.ejs L11-L13</p> <p>Action Buttons per Row: Edit and Delete for each product views/admin.ejs L41-L49</p> <ul> <li>Edit: Links to <code>/edit/&lt;%= producto.ref %&gt;</code></li> <li>Delete: Links to <code>/delete/&lt;%= producto.ref %&gt;</code></li> </ul> <p>PDF Export Options: Two PDF generation approaches views/admin.ejs L55-L59</p> <ol> <li>Puppeteer: <code>/pdf/descargar</code> - HTML-to-PDF conversion</li> <li>PDFKit: <code>/pdfkit/descargar</code> - Programmatic PDF generation</li> </ol>"},{"location":"Page-Views.html#product-data-iteration","title":"Product Data Iteration","text":"<p>The template iterates over the <code>productos</code> array to render table rows views/admin.ejs L27-L52</p> <p>Each product object contains:</p> <ul> <li><code>ref</code> - Product reference (primary key)</li> <li><code>nombre</code> - Product name</li> <li><code>precio</code> - Product price</li> <li><code>stock</code> - Stock quantity</li> </ul>"},{"location":"Page-Views.html#role-based-rendering","title":"Role-Based Rendering","text":"<p>Conditional rendering based on <code>rol</code> variable ensures admin-only features are hidden from regular users views/admin.ejs L10-L13</p> <p>views/admin.ejs L21-L23</p> <p>views/admin.ejs L41-L50</p> <p>Sources: views/admin.ejs L1-L71</p>"},{"location":"Page-Views.html#createejs-product-creation-form","title":"create.ejs - Product Creation Form","text":""},{"location":"Page-Views.html#purpose_4","title":"Purpose","text":"<p>Form for administrators to create new products. Provides input fields for all product attributes.</p>"},{"location":"Page-Views.html#template-structure_4","title":"Template Structure","text":"<p>views/create.ejs L1-L50</p>"},{"location":"Page-Views.html#form-configuration_2","title":"Form Configuration","text":"Field Name Type Validation Reference <code>ref</code> text Required, unique Name <code>nombre</code> text Required Price <code>precio</code> text Required, decimal Stock <code>stock</code> text Required, integer <p>views/create.ejs L15-L30</p>"},{"location":"Page-Views.html#form-actions","title":"Form Actions","text":"<p>The form submits to <code>POST /create</code> and includes:</p> <ul> <li>Save button: Submits the form</li> <li>Cancel link: Returns to <code>/admin</code> without saving</li> </ul> <p>views/create.ejs L32-L34</p>"},{"location":"Page-Views.html#value-retention","title":"Value Retention","text":"<p>Similar to the registration form, input values are retained on validation error using the <code>valores</code> object views/create.ejs L16-L30</p>"},{"location":"Page-Views.html#validation-display_1","title":"Validation Display","text":"<p>Validation errors are displayed using a dismissible alert views/create.ejs L38-L46</p> <p>Sources: views/create.ejs L1-L50</p>"},{"location":"Page-Views.html#editejs-product-edit-form","title":"edit.ejs - Product Edit Form","text":""},{"location":"Page-Views.html#purpose_5","title":"Purpose","text":"<p>Form for administrators to edit existing products. Pre-populates fields with current product data.</p>"},{"location":"Page-Views.html#template-structure_5","title":"Template Structure","text":"<p>views/edit.ejs L1-L50</p>"},{"location":"Page-Views.html#form-configuration_3","title":"Form Configuration","text":"<p>The form structure mirrors <code>create.ejs</code> but uses <code>POST /update</code> and includes pre-populated values from the <code>producto</code> object passed by the controller.</p> <p>Key difference: The reference field is read-only since it's the primary key views/edit.ejs L15-L20</p>"},{"location":"Page-Views.html#data-requirements_2","title":"Data Requirements","text":"Variable Type Description <code>producto</code> Object Product to edit with ref, nombre, precio, stock <code>validaciones</code> Array Validation errors (if any)"},{"location":"Page-Views.html#pre-population-pattern","title":"Pre-Population Pattern","text":"<p>views/edit.ejs L22-L29</p>"},{"location":"Page-Views.html#form-actions_1","title":"Form Actions","text":"<ul> <li>Update button: Submits changes to <code>/update</code></li> <li>Cancel link: Returns to <code>/admin</code> without saving</li> </ul> <p>Sources: views/edit.ejs L1-L50</p>"},{"location":"Page-Views.html#soporteejs-real-time-support-chat","title":"soporte.ejs - Real-Time Support Chat","text":""},{"location":"Page-Views.html#purpose_6","title":"Purpose","text":"<p>Bi-directional real-time messaging interface using Socket.IO. Provides two distinct views: admin view with multi-user conversation management, and user view with single admin conversation.</p>"},{"location":"Page-Views.html#template-structure_6","title":"Template Structure","text":"<p>views/soporte.ejs L1-L191</p>"},{"location":"Page-Views.html#architecture-overview","title":"Architecture Overview","text":"<pre><code>flowchart TD\n\nSoporteView[\"soporte.ejs\"]\nRoleCheck[\"user.role?\"]\nAdminUI[\"Admin Interface\"]\nUserUI[\"User Interface\"]\nUserList[\"User List Sidebar&lt;br&gt;#lista-usuarios\"]\nChatWindow[\"Chat Window&lt;br&gt;#chat\"]\nInputForm[\"Message Form&lt;br&gt;with hidden #usuarioActual\"]\nSimpleChatWindow[\"Chat Window&lt;br&gt;#chat\"]\nSimpleInputForm[\"Message Form&lt;br&gt;sends to 'admin'\"]\nAdminJS[\"Admin JavaScript Logic\"]\nUserJS[\"User JavaScript Logic\"]\nSocketHandlers[\"Socket Event Handlers:&lt;br&gt;mensaje_recibido\"]\nAPIFetch[\"API Calls:&lt;br&gt;/api/usuarios-conversaciones&lt;br&gt;/api/mensajes\"]\nUserSocketHandlers[\"Socket Event Handlers:&lt;br&gt;mensaje_recibido\"]\nUserAPIFetch[\"API Call:&lt;br&gt;/api/mensajes/mios\"]\n\nSoporteView --&gt; RoleCheck\nRoleCheck --&gt; AdminUI\nRoleCheck --&gt; UserUI\nAdminUI --&gt; UserList\nAdminUI --&gt; ChatWindow\nAdminUI --&gt; InputForm\nUserUI --&gt; SimpleChatWindow\nUserUI --&gt; SimpleInputForm\nAdminUI --&gt; AdminJS\nUserUI --&gt; UserJS\nAdminJS --&gt; SocketHandlers\nAdminJS --&gt; APIFetch\nUserJS --&gt; UserSocketHandlers\nUserJS --&gt; UserAPIFetch</code></pre>"},{"location":"Page-Views.html#data-requirements_3","title":"Data Requirements","text":"Variable Type Description <code>user</code> Object User object with <code>username</code> and <code>role</code> properties <p>views/soporte.ejs L6</p>"},{"location":"Page-Views.html#admin-view-structure","title":"Admin View Structure","text":"<p>HTML Layout views/soporte.ejs L8-L24</p> <ul> <li>Two-column layout using Bootstrap grid</li> <li>Left column (3 cols): User list <code>#lista-usuarios</code></li> <li>Right column (9 cols): Chat window <code>#chat</code> and message form <code>#formulario</code></li> <li>Hidden input <code>#usuarioActual</code> tracks selected conversation</li> </ul> <p>JavaScript State Management views/soporte.ejs L62-L66</p> <pre><code>\n</code></pre> <p>User List Management views/soporte.ejs L88-L102</p> <ul> <li>Function <code>agregarUsuarioLista(usuario)</code> dynamically adds users</li> <li>Each list item is clickable to switch conversations</li> <li>Visual indicators: green for viewed, red for new messages</li> </ul> <p>Conversation Rendering views/soporte.ejs L68-L86</p> <pre><code>\n</code></pre> <p>API Integration</p> <ol> <li>Fetch User List views/soporte.ejs L104-L112 <code></code></li> <li>Load Message History views/soporte.ejs L114-L125 <code></code></li> </ol> <p>Socket.IO Event Handling</p> <ul> <li>Receive Messages views/soporte.ejs L127-L147 * Listens for <code>mensaje_recibido</code> events * Updates <code>conversaciones</code> state * Adds visual notification if not active conversation * Auto-renders if conversation is currently open</li> <li>Send Messages views/soporte.ejs L149-L162 * Form submission emits <code>mensaje_privado</code> event * Includes <code>para</code> (recipient) and <code>mensaje</code> (content) * Updates local state and UI immediately</li> </ul>"},{"location":"Page-Views.html#user-view-structure","title":"User View Structure","text":"<p>HTML Layout views/soporte.ejs L25-L33</p> <ul> <li>Simplified single-column layout</li> <li>Chat window <code>#chat</code></li> <li>Message form <code>#formulario</code> (no hidden recipient field needed)</li> </ul> <p>JavaScript Initialization views/soporte.ejs L164-L171</p> <pre><code>\n</code></pre> <p>Socket.IO Event Handling</p> <ul> <li>Receive Messages views/soporte.ejs L173-L177 * Simpler handler, just appends to chat * No conversation switching logic</li> <li>Send Messages views/soporte.ejs L179-L187 * Always sends to <code>\"admin\"</code> as recipient * Displays as \"T\u00fa\" (You) in the UI</li> </ul>"},{"location":"Page-Views.html#shared-client-side-functions","title":"Shared Client-Side Functions","text":"<p>Date Formatting views/soporte.ejs L44-L52</p> <p>Message Rendering views/soporte.ejs L54-L60</p>"},{"location":"Page-Views.html#socketio-client-setup","title":"Socket.IO Client Setup","text":"<p>views/soporte.ejs L37-L42</p>"},{"location":"Page-Views.html#visual-notification-system","title":"Visual Notification System","text":"<p>The admin view implements a color-coded notification system:</p> State Color Meaning Green + Bold <code>text-success fw-bold</code> Currently viewed conversation Red + Bold <code>text-danger fw-bold</code> New unread message Default No special class Viewed but not active <p>views/soporte.ejs L77-L85</p> <p>views/soporte.ejs L136-L142</p> <p>Sources: views/soporte.ejs L1-L191</p>"},{"location":"Page-Views.html#administradorejs-placeholder-template","title":"administrador.ejs - Placeholder Template","text":""},{"location":"Page-Views.html#purpose_7","title":"Purpose","text":"<p>This appears to be an unused or placeholder template file.</p>"},{"location":"Page-Views.html#content","title":"Content","text":"<p>views/administrador.ejs L1-L2</p> <p>The file contains only include statements for partials with minimal content. It may have been intended for a specific admin view that was later replaced by <code>admin.ejs</code>.</p> <p>Sources: views/administrador.ejs L1-L2</p>"},{"location":"Page-Views.html#common-view-patterns","title":"Common View Patterns","text":""},{"location":"Page-Views.html#layout-inheritance","title":"Layout Inheritance","text":"<p>All page views follow the same inclusion pattern:</p>"},{"location":"Page-Views.html#conditional-rendering-based-on-authentication","title":"Conditional Rendering Based on Authentication","text":"<p>Most views use conditional logic to adapt content:</p>"},{"location":"Page-Views.html#form-value-retention","title":"Form Value Retention","text":"<p>Forms use a consistent pattern to retain values on validation errors:</p>"},{"location":"Page-Views.html#bootstrap-integration","title":"Bootstrap Integration","text":"<p>All views use Bootstrap classes for styling:</p> <ul> <li>Grid system (<code>container</code>, <code>row</code>, <code>col-md-*</code>)</li> <li>Form controls (<code>form-control</code>, <code>btn</code>)</li> <li>Tables (<code>table</code>, <code>table-bordered</code>, <code>table-striped</code>)</li> <li>Alerts (<code>alert</code>, <code>alert-danger</code>)</li> </ul>"},{"location":"Page-Views.html#icon-libraries","title":"Icon Libraries","text":"<p>Views use Boxicons for UI icons:</p> <ul> <li><code>bx bxs-plus-circle</code> - Add/create</li> <li><code>bx bxs-edit</code> - Edit</li> <li><code>bx bxs-trash</code> - Delete</li> </ul> <p>Sources: views/index.ejs</p> <p>views/login.ejs</p> <p>views/register.ejs</p> <p>views/admin.ejs</p> <p>views/create.ejs</p> <p>views/edit.ejs</p> <p>views/soporte.ejs</p>"},{"location":"Page-Views.html#data-flow-from-routes-to-views","title":"Data Flow from Routes to Views","text":"<pre><code>sequenceDiagram\n  participant src/router.js\n  participant src/controllers.js\n  participant MySQL\n  participant views/*.ejs\n  participant Browser\n\n  Browser-&gt;&gt;src/router.js: HTTP GET request\n  src/router.js-&gt;&gt;src/router.js: verifyToken (if protected)\n  src/router.js-&gt;&gt;src/controllers.js: Call handler function\n  src/controllers.js-&gt;&gt;MySQL: Query data\n  MySQL--&gt;&gt;src/controllers.js: Return result set\n  src/controllers.js-&gt;&gt;src/controllers.js: Prepare view data object\n  src/controllers.js-&gt;&gt;views/*.ejs: res.render('viewName', data)\n  views/*.ejs-&gt;&gt;views/*.ejs: Process EJS template\n  views/*.ejs-&gt;&gt;views/*.ejs: Include partials\n  views/*.ejs-&gt;&gt;views/*.ejs: Execute conditionals\n  views/*.ejs--&gt;&gt;Browser: Send rendered HTML</code></pre>"},{"location":"Page-Views.html#example-admin-view-data-flow","title":"Example: Admin View Data Flow","text":"<p>The view receives these variables in scope and uses them in EJS tags:</p> <ul> <li><code>&lt;%= user.username %&gt;</code> - Output escaped</li> <li><code>&lt;%- include('partial') %&gt;</code> - Unescaped include</li> <li><code>&lt;% if (login) { %&gt;</code> - Control flow</li> </ul> <p>Sources: src/router.js L1-L300</p> <p>views/admin.ejs L1-L71</p> <p>views/index.ejs L1-L35</p>"},{"location":"Partial-Components.html","title":"Partial Components","text":"<p>Relevant source files * public/css/style.css * views/admin.ejs * views/index.ejs * views/partials/header.ejs * views/register.ejs</p>"},{"location":"Partial-Components.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the reusable partial components in the EJS template system. Partials are modular template fragments stored in the <code>views/partials/</code> directory that are included across multiple page views to ensure consistent UI elements and reduce code duplication.</p> <p>For information about the overall template structure and layout inheritance, see Template Structure. For documentation of individual page templates that use these partials, see Page Views.</p>"},{"location":"Partial-Components.html#overview","title":"Overview","text":"<p>The application uses four primary partial components that are included across various page templates:</p> Partial File Path Purpose <code>head</code> <code>views/partials/head.ejs</code> HTML head section with meta tags, CSS links, and fonts <code>header</code> <code>views/partials/header.ejs</code> Navigation bar with menu items and language switcher <code>footer</code> <code>views/partials/footer.ejs</code> Footer section with copyright and links <code>popover</code> <code>views/partials/popover.ejs</code> Bootstrap popover/alert components <p>Sources: views/index.ejs L1-L35</p> <p>views/admin.ejs L1-L71</p> <p>views/register.ejs L1-L85</p>"},{"location":"Partial-Components.html#partial-inclusion-mechanism","title":"Partial Inclusion Mechanism","text":"<p>Partials are included in page templates using the EJS <code>include</code> directive with the following syntax:</p> <pre><code>&lt;%- include('partials/header') %&gt;\n</code></pre> <p>The <code>&lt;%-</code> tag renders the included content without HTML escaping, allowing the partial's HTML to be directly inserted into the parent template. The file extension <code>.ejs</code> is implied and omitted from the include path.</p>"},{"location":"Partial-Components.html#diagram-partial-inclusion-flow","title":"Diagram: Partial Inclusion Flow","text":"<pre><code>flowchart TD\n\nIndexPage[\"index.ejs\"]\nAdminPage[\"admin.ejs\"]\nRegisterPage[\"register.ejs\"]\nLoginPage[\"login.ejs\"]\nHeadPartial[\"head.ejs&lt;br&gt;Meta tags, CSS links\"]\nHeaderPartial[\"header.ejs&lt;br&gt;Navigation, i18n\"]\nFooterPartial[\"footer.ejs&lt;br&gt;Footer content\"]\nPopoverPartial[\"popover.ejs&lt;br&gt;Alert components\"]\n\nIndexPage --&gt; HeadPartial\nIndexPage --&gt; HeaderPartial\nIndexPage --&gt; FooterPartial\nIndexPage --&gt; PopoverPartial\nAdminPage --&gt; HeadPartial\nAdminPage --&gt; HeaderPartial\nAdminPage --&gt; FooterPartial\nRegisterPage --&gt; HeadPartial\nRegisterPage --&gt; HeaderPartial\nRegisterPage --&gt; FooterPartial\nLoginPage --&gt; HeadPartial\nLoginPage --&gt; HeaderPartial\nLoginPage --&gt; FooterPartial\n\nsubgraph subGraph1 [\"Partial Components views/partials/\"]\n    HeadPartial\n    HeaderPartial\n    FooterPartial\n    PopoverPartial\nend\n\nsubgraph subGraph0 [\"Page Templates\"]\n    IndexPage\n    AdminPage\n    RegisterPage\n    LoginPage\nend</code></pre> <p>Sources: views/index.ejs L1-L2</p> <p>views/admin.ejs L1</p> <p>views/register.ejs L1-L3</p>"},{"location":"Partial-Components.html#headejs-partial","title":"head.ejs Partial","text":"<p>The <code>head</code> partial contains the HTML <code>&lt;head&gt;</code> section elements that are consistent across all pages. While the file is not directly provided in the source files, it is consistently included as the first partial in all page templates.</p>"},{"location":"Partial-Components.html#responsibilities","title":"Responsibilities","text":"<ul> <li>HTML document metadata (<code>&lt;meta&gt;</code> tags)</li> <li>CSS stylesheet links (Bootstrap, custom stylesheets)</li> <li>Font declarations (Montserrat, Open Sans from <code>docs/fonts/</code>)</li> <li>Favicon and page title configuration</li> <li>Additional <code>&lt;head&gt;</code> elements required globally</li> </ul>"},{"location":"Partial-Components.html#typical-inclusion-pattern","title":"Typical Inclusion Pattern","text":"<pre><code>&lt;%- include('partials/head') %&gt;\n</code></pre> <p>This partial is always included first, before the <code>header</code> partial, as it must complete before the <code>&lt;body&gt;</code> tag opens.</p> <p>Sources: views/index.ejs L1</p> <p>views/admin.ejs L1</p> <p>views/register.ejs L1</p>"},{"location":"Partial-Components.html#headerejs-partial","title":"header.ejs Partial","text":"<p>The <code>header</code> partial implements the primary navigation bar and language switching interface. It is located at views/partials/header.ejs L1-L55</p> <p>and contains both the closing <code>&lt;/head&gt;</code> tag and the opening <code>&lt;body&gt;</code> tag, making it a transitional partial between document metadata and body content.</p>"},{"location":"Partial-Components.html#structure","title":"Structure","text":"<pre><code>flowchart TD\n\nHeader[\"header.ejs\"]\nCloseHead[\"tag\"]\nOpenBody[\"tag\"]\nTitle[\"Curso de Node\"]\nNavbar[\"Bootstrap navbar\"]\nBrand[\"navbar-brand: Home link\"]\nNavItems[\"navbar-nav: Navigation items\"]\nLangSwitcher[\"Language switcher UI\"]\nLoginLink[\"Login nav-link\"]\nRegisterLink[\"Register nav-link\"]\nAdminLink[\"Admin nav-link\"]\nSoporteLink[\"Soporte nav-link\"]\nEsLink[\"Spanish link with flag\"]\nEnLink[\"English link with flag\"]\nChangeLangFunc[\"changeLang(lang) function\"]\n\nHeader --&gt; CloseHead\nHeader --&gt; OpenBody\nHeader --&gt; Title\nHeader --&gt; Navbar\nNavbar --&gt; Brand\nNavbar --&gt; NavItems\nNavbar --&gt; LangSwitcher\nNavItems --&gt; LoginLink\nNavItems --&gt; RegisterLink\nNavItems --&gt; AdminLink\nNavItems --&gt; SoporteLink\nLangSwitcher --&gt; EsLink\nLangSwitcher --&gt; EnLink\nLangSwitcher --&gt; ChangeLangFunc</code></pre> <p>Sources: views/partials/header.ejs L1-L55</p>"},{"location":"Partial-Components.html#navigation-links","title":"Navigation Links","text":"<p>The header provides four primary navigation links:</p> Link Text Route Purpose Home <code>/</code> Navigate to homepage Iniciar sesi\u00f3n <code>/login</code> Navigate to login page Registro <code>/registro</code> Navigate to registration page Admin <code>/admin</code> Navigate to admin dashboard Soporte <code>/soporte</code> Navigate to support chat <p>Sources: views/partials/header.ejs L7-L24</p>"},{"location":"Partial-Components.html#language-switcher-implementation","title":"Language Switcher Implementation","text":"<p>The header includes a bilingual interface switcher in the right-aligned navigation section (<code>navbar-nav ms-auto</code>):</p> <pre><code>flowchart TD\n\nLangUI[\"Language Switcher UI\"]\nEsOption[\"Spanish Option\"]\nEnOption[\"English Option\"]\nEsFlag[\"Flag image: /resources/img/es.png\"]\nEsEmoji[\"Emoji: \ud83c\uddea\ud83c\uddf8\"]\nEsActive[\"Active class if lang === 'es'\"]\nEnFlag[\"Flag image: /resources/img/en.png\"]\nEnEmoji[\"Emoji: \ud83c\uddec\ud83c\udde7\"]\nEnActive[\"Active class if lang === 'en'\"]\nChangeLang[\"changeLang('es')\"]\nChangeLang2[\"changeLang('en')\"]\nRouteCall[\"/set-lang/:lang?returnTo=...\"]\n\nLangUI --&gt; EsOption\nLangUI --&gt; EnOption\nEsOption --&gt; EsFlag\nEsOption --&gt; EsEmoji\nEsOption --&gt; EsActive\nEnOption --&gt; EnFlag\nEnOption --&gt; EnEmoji\nEnOption --&gt; EnActive\nEsOption --&gt; ChangeLang\nEnOption --&gt; ChangeLang2\nChangeLang --&gt; RouteCall\nChangeLang2 --&gt; RouteCall</code></pre> <p>Sources: views/partials/header.ejs L31-L54</p>"},{"location":"Partial-Components.html#changelang-function","title":"changeLang Function","text":"<p>The header includes inline JavaScript that handles language switching:</p> <pre><code>function changeLang(lang) {\n    const currentPath = window.location.pathname + window.location.search;\n    window.location.href = `/set-lang/${lang}?returnTo=${encodeURIComponent(currentPath)}`;\n}\n</code></pre> <p>This function:</p> <ol> <li>Captures the current page path and query string</li> <li>Navigates to <code>/set-lang/:lang</code> route with the current page as <code>returnTo</code> parameter</li> <li>Allows the server to set the language cookie and redirect back to the originating page</li> </ol> <p>Sources: views/partials/header.ejs L49-L54</p>"},{"location":"Partial-Components.html#active-language-indicator","title":"Active Language Indicator","text":"<p>The language links use conditional CSS classes to highlight the currently active language:</p> <pre><code>class=\"nav-link idioma d-flex align-items-center &lt;%= lang === 'es' ? 'active' : '' %&gt;\"\n</code></pre> <p>The <code>idioma.active</code> class applies a blue background color (<code>#b5c1e2</code>) to visually indicate the current language selection.</p> <p>Sources: views/partials/header.ejs L33-L44</p> <p>public/css/style.css L8-L12</p>"},{"location":"Partial-Components.html#bootstrap-integration","title":"Bootstrap Integration","text":"<p>The header uses Bootstrap 5 navbar components:</p> <ul> <li><code>navbar navbar-expand-lg navbar-light bg-light</code> - Main navbar container</li> <li><code>navbar-toggler</code> - Mobile responsive menu toggle button</li> <li><code>collapse navbar-collapse</code> - Collapsible menu content</li> <li><code>navbar-nav</code> - Navigation items container</li> <li><code>nav-item</code> and <code>nav-link</code> - Individual navigation links</li> </ul> <p>Sources: views/partials/header.ejs L5-L29</p>"},{"location":"Partial-Components.html#footerejs-partial","title":"footer.ejs Partial","text":"<p>The <code>footer</code> partial provides consistent footer content across all pages. While the file contents are not directly visible in the provided sources, it is consistently included at the end of page templates.</p>"},{"location":"Partial-Components.html#responsibilities_1","title":"Responsibilities","text":"<ul> <li>Copyright information</li> <li>Footer navigation links</li> <li>Contact information or social media links</li> <li>Additional footer content</li> </ul>"},{"location":"Partial-Components.html#css-styling","title":"CSS Styling","text":"<p>The footer is styled with classes defined in the main stylesheet:</p> CSS Class Purpose <code>footer</code> Main footer container with dark green background (<code>#143d20</code>) <code>footer-container</code> Flex container for footer sections, max-width 1100px <code>footer-section</code> Individual footer columns with flexible layout <code>footer-bottom</code> Bottom footer text with smaller font size <p>Sources: public/css/style.css L278-L331</p>"},{"location":"Partial-Components.html#inclusion-pattern","title":"Inclusion Pattern","text":"<pre><code>&lt;%- include('partials/footer') %&gt;\n</code></pre> <p>The footer partial is always included last, after all page content, and typically preceded by closing any open content containers.</p> <p>Sources: views/index.ejs L35</p> <p>views/admin.ejs L71</p> <p>views/register.ejs L85</p>"},{"location":"Partial-Components.html#popoverejs-partial","title":"popover.ejs Partial","text":"<p>The <code>popover</code> partial provides Bootstrap alert and popover components that can be included on pages requiring notification or validation feedback displays.</p>"},{"location":"Partial-Components.html#usage","title":"Usage","text":"<p>The popover partial is selectively included on pages that require alert functionality, such as the homepage:</p> <pre><code>&lt;%- include('partials/popover') %&gt;\n</code></pre> <p>Not all pages include this partial, as it is only needed where alerts or popovers are displayed to users.</p> <p>Sources: views/index.ejs L34</p>"},{"location":"Partial-Components.html#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"Partial-Components.html#standard-page-structure","title":"Standard Page Structure","text":"<p>Most page templates follow this inclusion pattern:</p> <pre><code>&lt;%- include('partials/head') %&gt;\n&lt;%- include('partials/header') %&gt;\n\n&lt;!-- Page-specific content --&gt;\n\n&lt;%- include('partials/footer') %&gt;\n</code></pre> <p>Sources: views/index.ejs L1-L35</p> <p>views/admin.ejs L1-L71</p>"},{"location":"Partial-Components.html#pages-with-alerts","title":"Pages with Alerts","text":"<p>Pages that display validation errors or success messages include the popover partial:</p> <pre><code>&lt;%- include('partials/head') %&gt;\n&lt;%- include('partials/header') %&gt;\n\n&lt;!-- Page content --&gt;\n\n&lt;%- include('partials/popover') %&gt;\n&lt;%- include('partials/footer') %&gt;\n</code></pre> <p>Sources: views/index.ejs L1-L35</p>"},{"location":"Partial-Components.html#registration-page-pattern","title":"Registration Page Pattern","text":"<p>The registration page demonstrates a variant pattern with additional CSS:</p> <pre><code>&lt;%- include('partials/head') %&gt;\n&lt;link rel=\"stylesheet\" href=\"/resources/css/body.css\"&gt;\n&lt;%- include('partials/header') %&gt;\n\n&lt;!-- Registration form --&gt;\n\n&lt;%- include('partials/footer') %&gt;\n</code></pre> <p>This shows that additional stylesheets can be injected between the head and header partials when page-specific styling is required.</p> <p>Sources: views/register.ejs L1-L3</p>"},{"location":"Partial-Components.html#diagram-partial-component-relationships","title":"Diagram: Partial Component Relationships","text":"<pre><code>flowchart TD\n\nCSS[\"public/css/style.css&lt;br&gt;public/css/body.css\"]\nImages[\"public/resources/img/&lt;br&gt;es.png, en.png\"]\nFonts[\"docs/fonts/&lt;br&gt;Montserrat, Open Sans\"]\nHead[\"head.ejs\"]\nHeader[\"header.ejs\"]\nFooter[\"footer.ejs\"]\nPopover[\"popover.ejs\"]\nI18nVar[\"lang variable&lt;br&gt;(es/en)\"]\nUserVar[\"login variable&lt;br&gt;user variable\"]\nRouter[\"Router /set-lang/:lang\"]\n\nHead --&gt; CSS\nHead --&gt; Fonts\nHeader --&gt; Images\nHeader --&gt; I18nVar\nHeader --&gt; Router\nFooter --&gt; CSS\nHeader --&gt; UserVar\n\nsubgraph subGraph2 [\"Server-Side Data\"]\n    I18nVar\n    UserVar\n    Router\nend\n\nsubgraph subGraph1 [\"Partials views/partials/\"]\n    Head\n    Header\n    Footer\n    Popover\n    Popover --&gt; Head\nend\n\nsubgraph subGraph0 [\"Static Resources\"]\n    CSS\n    Images\n    Fonts\nend</code></pre> <p>Sources: views/partials/header.ejs L1-L55</p> <p>public/css/style.css L1-L353</p>"},{"location":"Partial-Components.html#data-passed-to-partials","title":"Data Passed to Partials","text":"<p>Partials have access to the same template variables as their parent page templates. The header partial specifically uses:</p> Variable Type Purpose <code>lang</code> String Current language code ('es' or 'en') for active language highlighting <code>login</code> Boolean (Used in parent pages) Indicates if user is authenticated <code>user</code> String/Object (Used in parent pages) Current user information <p>These variables are set by route handlers in src/router.js</p> <p>and passed through the <code>res.render()</code> call that renders the parent page template.</p> <p>Sources: views/partials/header.ejs L33-L44</p> <p>views/index.ejs L15-L31</p>"},{"location":"Partial-Components.html#integration-with-internationalization","title":"Integration with Internationalization","text":"<p>The header partial integrates closely with the i18n system (documented in #11</p> <p>). The language switcher in the header:</p> <ol> <li>Displays current language using the <code>lang</code> template variable</li> <li>Provides clickable links to switch languages</li> <li>Calls the <code>/set-lang/:lang</code> route to change the language preference</li> <li>Preserves the current page location via the <code>returnTo</code> query parameter</li> </ol> <p>The <code>changeLang()</code> function enables seamless language switching without losing the user's current page context.</p> <p>Sources: views/partials/header.ejs L31-L54</p>"},{"location":"Product-Management.html","title":"Product Management","text":"<p>Relevant source files * proyecto.zip * public/css/style.css * src/router.js * views/admin.ejs * views/index.ejs * views/register.ejs</p>"},{"location":"Product-Management.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This page documents the product management subsystem, which provides complete CRUD (Create, Read, Update, Delete) operations for managing products in the application. Products are stored in the <code>productos</code> database table and can only be modified by users with the <code>admin</code> role. Regular users can view products but cannot create, edit, or delete them.</p> <p>For authentication and authorization details, see Authentication &amp; Authorization. For information about the underlying routing system, see Routing System. For PDF export functionality that operates on product data, see PDF Generation.</p>"},{"location":"Product-Management.html#product-data-model","title":"Product Data Model","text":"<p>The product management system operates on the <code>productos</code> table in the MySQL database. This table stores basic product information with the following structure:</p> Column Type Constraints Description <code>ref</code> <code>int(11)</code> PRIMARY KEY, AUTO_INCREMENT Unique product reference number <code>nombre</code> <code>varchar(30)</code> NOT NULL Product name <code>precio</code> <code>decimal(10,2)</code> NOT NULL Product price with two decimal places <code>stock</code> <code>int(11)</code> NULL Available stock quantity <p>Sources: proyecto.zip L1-L128</p>"},{"location":"Product-Management.html#crud-operations-overview","title":"CRUD Operations Overview","text":"<pre><code>flowchart TD\n\nAdminUI[\"Admin UI&lt;br&gt;/admin\"]\nCreateForm[\"Create Form&lt;br&gt;/create\"]\nEditForm[\"Edit Form&lt;br&gt;/edit/:id\"]\nViewRoute[\"GET /admin&lt;br&gt;router.js:119-134\"]\nCreateRoute[\"GET /create&lt;br&gt;router.js:153-155\"]\nEditRoute[\"GET /edit/:id&lt;br&gt;router.js:186-196\"]\nDeleteRoute[\"GET /delete/:id&lt;br&gt;router.js:198-208\"]\nSaveRoute[\"POST /save&lt;br&gt;router.js:603&lt;br&gt;controllers.js\"]\nUpdateRoute[\"POST /update&lt;br&gt;router.js:604&lt;br&gt;controllers.js\"]\nProductosTable[\"productos Table&lt;br&gt;MySQL\"]\n\nAdminUI --&gt; ViewRoute\nAdminUI --&gt; CreateRoute\nAdminUI --&gt; EditRoute\nAdminUI --&gt; DeleteRoute\nViewRoute --&gt; ProductosTable\nViewRoute --&gt; AdminUI\nCreateRoute --&gt; CreateForm\nCreateForm --&gt; SaveRoute\nSaveRoute --&gt; ProductosTable\nSaveRoute --&gt; AdminUI\nEditRoute --&gt; ProductosTable\nEditRoute --&gt; EditForm\nEditForm --&gt; UpdateRoute\nUpdateRoute --&gt; ProductosTable\nUpdateRoute --&gt; AdminUI\nDeleteRoute --&gt; ProductosTable\nDeleteRoute --&gt; AdminUI</code></pre> <p>Sources: src/router.js L119-L208</p> <p>src/router.js L603-L604</p> <p>src/controllers.js L1-L80</p>"},{"location":"Product-Management.html#viewing-products","title":"Viewing Products","text":""},{"location":"Product-Management.html#get-admin-route","title":"GET /admin Route","text":"<p>The <code>/admin</code> route serves as the primary interface for viewing all products. This route requires authentication via the <code>verifyToken</code> middleware.</p> <p>Request Flow:</p> <ol> <li>User navigates to <code>/admin</code></li> <li><code>verifyToken</code> middleware validates JWT from cookie</li> <li>Query executed: <code>SELECT * FROM productos</code></li> <li>Results rendered in <code>admin.ejs</code> template</li> </ol> <p>Route Handler: src/router.js L119-L134</p> <pre><code>router.get(\"/admin\", verifyToken, (req, res) =&gt; {\n    db.query(\"SELECT * FROM productos\", (error, results) =&gt; {\n        if (error) {\n            throw error;\n        } else {\n            res.render(\"admin\", {\n                productos: results,\n                user: req.user,\n                login: true,\n                rol: req.user.rol,\n            });\n        }\n    });\n});\n</code></pre> <p>Template Variables:</p> <ul> <li><code>productos</code>: Array of product objects from database</li> <li><code>user</code>: User information from JWT payload</li> <li><code>login</code>: Boolean flag (always <code>true</code> for authenticated users)</li> <li><code>rol</code>: User role (<code>\"admin\"</code> or <code>\"user\"</code>)</li> </ul> <p>View Template: views/admin.ejs L1-L71</p> <p>The admin view displays products in a Bootstrap table with conditional rendering based on user role. Admin users see action buttons (edit/delete), while regular users see a read-only view.</p> <p>Sources: src/router.js L119-L134</p> <p>views/admin.ejs L1-L71</p>"},{"location":"Product-Management.html#creating-products","title":"Creating Products","text":"<p>Product creation is a two-step process involving a form display and form submission.</p>"},{"location":"Product-Management.html#get-create-route","title":"GET /create Route","text":"<p>Displays the product creation form. This route does not require authentication middleware, though in practice users must be logged in to access it from the navigation.</p> <p>Route Handler: src/router.js L153-L155</p> <pre><code>router.get(\"/create\", (req, res) =&gt; {\n    res.render(\"create\");\n});\n</code></pre> <p>View Template: views/create.ejs L1-L50</p> <p>The create form includes fields for:</p> <ul> <li>Product name (<code>nombre</code>)</li> <li>Price (<code>precio</code>)</li> <li>Stock quantity (<code>stock</code>)</li> </ul>"},{"location":"Product-Management.html#post-save-route","title":"POST /save Route","text":"<p>Processes the submitted product creation form. The controller function handles database insertion.</p> <p>Route Handler: src/router.js L603</p> <pre><code>router.post(\"/save\", crud.save);\n</code></pre> <p>Controller Implementation: src/controllers.js L1-L80</p> <p>The <code>crud.save</code> function extracts form data from <code>req.body</code> and executes an <code>INSERT INTO productos</code> statement. Upon successful insertion, it redirects to <code>/admin</code>.</p> <p>Form Submission Flow:</p> <pre><code>sequenceDiagram\n  participant User\n  participant Browser\n  participant CreateRoute[\"GET /create\"]\n  participant CreateView[\"create.ejs\"]\n  participant SaveRoute[\"POST /save\"]\n  participant Controller[\"crud.save\"]\n  participant DB[\"productos Table\"]\n  participant AdminRoute[\"GET /admin\"]\n  participant CreateRoute\n  participant CreateView\n  participant SaveRoute\n  participant Controller\n  participant DB\n  participant AdminRoute\n\n  User-&gt;&gt;Browser: Navigate to /create\n  Browser-&gt;&gt;CreateRoute: GET /create\n  CreateRoute-&gt;&gt;CreateView: Render form\n  CreateView--&gt;&gt;Browser: HTML form\n  Browser--&gt;&gt;User: Display form\n  User-&gt;&gt;Browser: Fill form &amp; submit\n  Browser-&gt;&gt;SaveRoute: POST /save\n  SaveRoute-&gt;&gt;Controller: {nombre, precio, stock}\n  Controller-&gt;&gt;DB: crud.save(req, res)\n  DB--&gt;&gt;Controller: INSERT INTO productos SET ?\n  Controller-&gt;&gt;AdminRoute: Success\n  AdminRoute--&gt;&gt;Browser: res.redirect(\"/admin\")\n  Browser--&gt;&gt;User: Admin page with new product</code></pre> <p>Sources: src/router.js L153-L155</p> <p>src/router.js L603</p> <p>src/controllers.js L1-L80</p> <p>views/create.ejs L1-L50</p>"},{"location":"Product-Management.html#editing-products","title":"Editing Products","text":"<p>Product editing follows a similar two-step process to creation.</p>"},{"location":"Product-Management.html#get-editid-route","title":"GET /edit/:id Route","text":"<p>Retrieves a specific product by its reference ID and displays the edit form.</p> <p>Route Handler: src/router.js L186-L196</p> <pre><code>router.get(\"/edit/:id\", (req, res) =&gt; {\n    const ref = req.params.id;\n    db.query(\"SELECT * FROM productos WHERE ref = ?\", [ref], (error, results) =&gt; {\n        if (error) {\n            throw error;\n        } else {\n            res.render(\"edit\", { producto: results[0] });\n        }\n    });\n});\n</code></pre> <p>Query Parameters:</p> <ul> <li><code>:id</code> - Product reference number from URL path</li> </ul> <p>Database Query:</p> <pre><code>SELECT * FROM productos WHERE ref = ?\n</code></pre> <p>View Template: views/edit.ejs L1-L50</p> <p>The edit form pre-populates fields with existing product data using the <code>producto</code> object passed to the template.</p>"},{"location":"Product-Management.html#post-update-route","title":"POST /update Route","text":"<p>Processes the submitted product update form.</p> <p>Route Handler: src/router.js L604</p> <pre><code>router.post(\"/update\", crud.update);\n</code></pre> <p>Controller Implementation: src/controllers.js L1-L80</p> <p>The <code>crud.update</code> function executes an <code>UPDATE</code> statement on the <code>productos</code> table and redirects to <code>/admin</code>.</p> <p>Sources: src/router.js L186-L196</p> <p>src/router.js L604</p> <p>src/controllers.js L1-L80</p> <p>views/edit.ejs L1-L50</p>"},{"location":"Product-Management.html#deleting-products","title":"Deleting Products","text":""},{"location":"Product-Management.html#get-deleteid-route","title":"GET /delete/:id Route","text":"<p>Immediately deletes the specified product and redirects to the admin page. This is a destructive operation with no confirmation dialog.</p> <p>Route Handler: src/router.js L198-L208</p> <pre><code>router.get(\"/delete/:id\", (req, res) =&gt; {\n    const ref = req.params.id;\n    db.query(\"DELETE FROM productos WHERE ref = ?\", [ref], (error, results) =&gt; {\n        if (error) {\n            throw error;\n        } else {\n            res.redirect(\"/admin\");\n        }\n    });\n});\n</code></pre> <p>Database Query:</p> <pre><code>DELETE FROM productos WHERE ref = ?\n</code></pre> <p>Note: This route uses GET method for a destructive operation, which is not a REST best practice. A POST or DELETE HTTP method would be more appropriate for production systems.</p> <p>Sources: src/router.js L198-L208</p>"},{"location":"Product-Management.html#authorization-and-access-control","title":"Authorization and Access Control","text":""},{"location":"Product-Management.html#role-based-ui-rendering","title":"Role-Based UI Rendering","text":"<p>The admin view template implements role-based access control at the presentation layer. Admin-only features are conditionally rendered using EJS template logic.</p> <p>Admin-Only UI Elements: views/admin.ejs L10-L23</p> <pre><code>&lt;% if (rol==\"admin\") {%&gt;\n    &lt;a href=\"/create\" class=\"btn btn-outline-primary mt-4\"&gt;\n        &lt;i class=\"bx bxs-plus-circle bx-md\"&gt;&lt;/i&gt;\n    &lt;/a&gt;\n&lt;% } %&gt;\n</code></pre> <p>Action Buttons: views/admin.ejs L21-L23</p> <p>views/admin.ejs L41-L50</p> <p>Edit and delete buttons are only rendered for admin users:</p> <pre><code>&lt;% if (rol==\"admin\") {%&gt;\n    &lt;th scope=\"col\"&gt;Acciones&lt;/th&gt;\n&lt;% } %&gt;\n</code></pre>"},{"location":"Product-Management.html#route-level-authorization","title":"Route-Level Authorization","text":"<pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nVerifyToken[\"verifyToken MW&lt;br&gt;middlewares/verifyToken.js\"]\nRoleCheck[\"req.user.rol&lt;br&gt;== 'admin'?\"]\nRouteHandler[\"Route Handler\"]\nUIRender[\"Template Rendering&lt;br&gt;EJS conditionals\"]\nResponse[\"HTTP Response\"]\nUnauthorized[\"401 Unauthorized\"]\n\nRequest --&gt; VerifyToken\nVerifyToken --&gt; RoleCheck\nRoleCheck --&gt; RouteHandler\nRoleCheck --&gt; RouteHandler\nRouteHandler --&gt; UIRender\nUIRender --&gt; Response\nUIRender --&gt; Response\nVerifyToken --&gt; Unauthorized</code></pre> <p>Current Implementation: The <code>/admin</code> route uses <code>verifyToken</code> middleware src/router.js L119</p> <p>but does not use <code>verifyAdmin</code> middleware. This means regular users can view products but the UI conditionally hides modification controls.</p> <p>Unprotected Routes: The <code>/create</code>, <code>/edit/:id</code>, <code>/delete/:id</code>, <code>/save</code>, and <code>/update</code> routes do not have explicit authentication middleware. Access control relies entirely on UI restrictions in the admin template.</p> <p>Security Note: For production deployments, consider adding <code>verifyAdmin</code> middleware to all modification routes to prevent unauthorized access through direct URL manipulation:</p> <pre><code>router.get(\"/create\", verifyToken, verifyAdmin, (req, res) =&gt; { /* ... */ });\nrouter.get(\"/delete/:id\", verifyToken, verifyAdmin, (req, res) =&gt; { /* ... */ });\nrouter.post(\"/save\", verifyToken, verifyAdmin, crud.save);\nrouter.post(\"/update\", verifyToken, verifyAdmin, crud.update);\n</code></pre> <p>Sources: src/router.js L119-L208</p> <p>views/admin.ejs L10-L50</p> <p>src/middlewares/verifyToken.js L1-L50</p> <p>src/middlewares/verifyAdmin.js L1-L50</p>"},{"location":"Product-Management.html#integration-with-pdf-generation","title":"Integration with PDF Generation","text":"<p>The product management system integrates with the PDF generation subsystem. Two PDF export buttons are available on the admin page:</p> <ol> <li>Puppeteer PDF Export: views/admin.ejs L55-L56 * Route: <code>GET /pdf/descargar</code> * Renders <code>pdfTabla.ejs</code> template as HTML, then converts to PDF</li> <li>PDFKit PDF Export: views/admin.ejs L58-L59 * Route: <code>GET /pdfkit/descargar</code> * Generates PDF programmatically using PDFKit library</li> </ol> <p>Both routes query the <code>productos</code> table and generate downloadable PDF reports. For detailed implementation, see PDF Generation.</p> <p>Sources: views/admin.ejs L55-L59</p> <p>src/router.js L317-L396</p>"},{"location":"Product-Management.html#complete-product-management-flow","title":"Complete Product Management Flow","text":"<p>Sources: src/router.js L119-L208</p> <p>src/router.js L603-L604</p> <p>src/controllers.js L1-L80</p> <p>views/admin.ejs L1-L71</p>"},{"location":"Product-Management.html#key-files-and-components","title":"Key Files and Components","text":""},{"location":"Product-Management.html#route-definitions","title":"Route Definitions","text":"<ul> <li>View Products: src/router.js L119-L134</li> <li>Create Form: src/router.js L153-L155</li> <li>Edit Form: src/router.js L186-L196</li> <li>Delete Product: src/router.js L198-L208</li> <li>Save Handler: src/router.js L603</li> <li>Update Handler: src/router.js L604</li> </ul>"},{"location":"Product-Management.html#controllers","title":"Controllers","text":"<ul> <li>CRUD Controllers: src/controllers.js L1-L80 * <code>crud.save</code> - Handles product creation * <code>crud.update</code> - Handles product updates</li> </ul>"},{"location":"Product-Management.html#views","title":"Views","text":"<ul> <li>Admin Dashboard: views/admin.ejs L1-L71</li> <li>Create Form: views/create.ejs L1-L50</li> <li>Edit Form: views/edit.ejs L1-L50</li> </ul>"},{"location":"Product-Management.html#database","title":"Database","text":"<ul> <li>Table Schema: proyecto.zip L1-L128  (productos table definition)</li> </ul>"},{"location":"Product-Management.html#middleware","title":"Middleware","text":"<ul> <li>Authentication: src/middlewares/verifyToken.js L1-L50</li> <li>Admin Authorization: src/middlewares/verifyAdmin.js L1-L50  (not currently used on product routes)</li> </ul> <p>Sources: src/router.js L1-L608</p> <p>src/controllers.js L1-L80</p> <p>views/admin.ejs L1-L71</p> <p>views/create.ejs L1-L50</p> <p>views/edit.ejs L1-L50</p>"},{"location":"Protected-Routes.html","title":"Protected Routes","text":"<p>Relevant source files * src/middlewares/verifyAdmin.js * src/middlewares/verifyToken.js * src/router.js</p>"},{"location":"Protected-Routes.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details all HTTP routes in the application that require authentication or authorization to access. Protected routes implement access control using JWT-based middleware to verify user identity and role permissions before allowing access to sensitive resources.</p> <p>For information about public routes that do not require authentication, see Public Routes. For details on the authentication mechanisms themselves, see Authentication &amp; Authorization. For API-specific endpoints, see API Endpoints.</p>"},{"location":"Protected-Routes.html#overview","title":"Overview","text":"<p>Protected routes in this application fall into two authorization tiers:</p> <ol> <li>User-level protection - Requires valid JWT authentication via <code>verifyToken</code> middleware</li> <li>Admin-level protection - Requires valid JWT authentication and <code>rol='admin'</code> via <code>verifyAdmin</code> middleware</li> </ol> <p>All protected routes extract JWT tokens from HTTP-only cookies (cookie name: <code>token</code>) and validate them before processing the request. Invalid or missing tokens result in 401 (Unauthorized) or 403 (Forbidden) responses.</p> <p>Sources: src/router.js L16-L17</p> <p>src/middlewares/verifyToken.js L1-L18</p> <p>src/middlewares/verifyAdmin.js L1-L45</p>"},{"location":"Protected-Routes.html#authentication-middleware-chain","title":"Authentication Middleware Chain","text":"<p>The following diagram shows how authentication middleware is applied to protected routes:</p> <pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nCookieParser[\"cookie-parser&lt;br&gt;Extracts cookies\"]\nRouteMatch[\"Route Matches&lt;br&gt;Protected Endpoint?\"]\nPublicRoute[\"Public Route Handler\"]\nAuthTier[\"Authorization&lt;br&gt;Tier?\"]\nVerifyToken[\"verifyToken Middleware&lt;br&gt;src/middlewares/verifyToken.js\"]\nVerifyAdmin[\"verifyAdmin Middleware&lt;br&gt;src/middlewares/verifyAdmin.js\"]\nTokenCheck[\"token in&lt;br&gt;req.cookies?\"]\nReturn401[\"401 Unauthorized&lt;br&gt;'No autenticado'\"]\nJWTVerify[\"jwt.verify()&lt;br&gt;Validate token\"]\nReturn403Token[\"403 Forbidden&lt;br&gt;'Token inv\u00e1lido'\"]\nAttachUser[\"Attach decoded payload&lt;br&gt;to req.user\"]\nRouteHandler[\"Route Handler&lt;br&gt;Execute business logic\"]\nAdminTokenCheck[\"token in&lt;br&gt;req.cookies?\"]\nReturn403Access[\"403 Forbidden&lt;br&gt;'Acceso denegado'\"]\nAdminJWTVerify[\"jwt.verify()&lt;br&gt;Validate token\"]\nReturn403Invalid[\"403 Forbidden&lt;br&gt;'Token inv\u00e1lido'\"]\nRoleCheck[\"decoded.rol&lt;br&gt;== 'admin'?\"]\nReturn403AdminOnly[\"403 Forbidden&lt;br&gt;'Acceso solo para administradores'\"]\nAttachAdminUser[\"Attach decoded payload&lt;br&gt;to req.user\"]\n\nRequest --&gt; CookieParser\nCookieParser --&gt; RouteMatch\nRouteMatch --&gt; PublicRoute\nRouteMatch --&gt; AuthTier\nAuthTier --&gt; VerifyToken\nAuthTier --&gt; VerifyAdmin\nVerifyToken --&gt; TokenCheck\nTokenCheck --&gt; Return401\nTokenCheck --&gt; JWTVerify\nJWTVerify --&gt; Return403Token\nJWTVerify --&gt; AttachUser\nAttachUser --&gt; RouteHandler\nVerifyAdmin --&gt; AdminTokenCheck\nAdminTokenCheck --&gt; Return403Access\nAdminTokenCheck --&gt; AdminJWTVerify\nAdminJWTVerify --&gt; Return403Invalid\nAdminJWTVerify --&gt; RoleCheck\nRoleCheck --&gt; Return403AdminOnly\nRoleCheck --&gt; AttachAdminUser\nAttachAdminUser --&gt; RouteHandler</code></pre> <p>Sources: src/middlewares/verifyToken.js L3-L15</p> <p>src/middlewares/verifyAdmin.js L24-L42</p>"},{"location":"Protected-Routes.html#protected-routes-by-authorization-level","title":"Protected Routes by Authorization Level","text":""},{"location":"Protected-Routes.html#user-level-protected-routes","title":"User-Level Protected Routes","text":"<p>These routes require a valid JWT token but do not enforce role restrictions. Any authenticated user (admin or regular user) can access them.</p> Route Method Handler Location Purpose Response Type <code>/admin</code> GET src/router.js L119-L134 Product management dashboard HTML (admin.ejs) <code>/pdfAdmin</code> GET src/router.js L136-L151 PDF preview of products table HTML (pdfTabla.ejs) <code>/soporte</code> GET src/router.js L220-L227 Support chat interface HTML (soporte.ejs) <code>/api/mensajes/mios</code> GET src/router.js L256-L280 Retrieve current user's messages JSON <code>/pdf/descargar</code> GET src/router.js L317-L353 Download products PDF (Puppeteer) PDF file <code>/pdfkit/descargar</code> GET src/router.js L355-L396 Download products PDF (PDFKit) PDF file <p>Sources: src/router.js L119-L396</p> <p>src/middlewares/verifyToken.js L3-L15</p>"},{"location":"Protected-Routes.html#admin-level-protected-routes","title":"Admin-Level Protected Routes","text":"<p>These routes require both a valid JWT token and the <code>rol='admin'</code> claim. Regular users receive a 403 Forbidden response.</p> Route Method Handler Location Purpose Response Type <code>/api/mensajes</code> GET src/router.js L229-L253 Retrieve messages for specific user (query param: <code>?con=username</code>) JSON <code>/api/usuarios-conversaciones</code> GET src/router.js L283-L315 List all users with admin conversations JSON array <p>Sources: src/router.js L229-L315</p> <p>src/middlewares/verifyAdmin.js L24-L42</p>"},{"location":"Protected-Routes.html#detailed-route-documentation","title":"Detailed Route Documentation","text":""},{"location":"Protected-Routes.html#get-admin","title":"GET /admin","text":"<p>Middleware: <code>verifyToken</code></p> <p>Purpose: Renders the product management dashboard for authenticated users.</p> <p>Request Flow:</p> <ol> <li>Validates JWT token via <code>verifyToken</code></li> <li>Queries all products from <code>productos</code> table</li> <li>Renders <code>admin.ejs</code> with products and user information</li> </ol> <p>Response Data:</p> <pre><code>{\n  productos: Array,    // All rows from productos table\n  user: Object,        // Decoded JWT payload (req.user)\n  login: true,\n  rol: String          // User's role from JWT\n}\n</code></pre> <p>Database Query:</p> <pre><code>SELECT * FROM productos\n</code></pre> <p>Sources: src/router.js L119-L134</p>"},{"location":"Protected-Routes.html#get-pdfadmin","title":"GET /pdfAdmin","text":"<p>Middleware: <code>verifyToken</code></p> <p>Purpose: Renders a PDF-optimized HTML view of the products table (used by Puppeteer for PDF generation).</p> <p>Request Flow:</p> <ol> <li>Validates JWT token via <code>verifyToken</code></li> <li>Queries all products from <code>productos</code> table</li> <li>Renders <code>pdfTabla.ejs</code> template</li> </ol> <p>Response: HTML document formatted for print media</p> <p>Sources: src/router.js L136-L151</p>"},{"location":"Protected-Routes.html#get-soporte","title":"GET /soporte","text":"<p>Middleware: <code>verifyToken</code></p> <p>Purpose: Renders the support chat interface for both users and administrators.</p> <p>Request Flow:</p> <ol> <li>Validates JWT token via <code>verifyToken</code></li> <li>Extracts username and role from <code>req.user</code></li> <li>Renders <code>soporte.ejs</code> with user context</li> </ol> <p>Response Data:</p> <pre><code>{\n  user: {\n    username: String,  // From req.user.user\n    role: String       // From req.user.rol\n  }\n}\n</code></pre> <p>Note: The view adapts its UI based on the <code>role</code> field. Admins see a multi-conversation interface; regular users see a single chat window.</p> <p>Sources: src/router.js L220-L227</p>"},{"location":"Protected-Routes.html#get-apimensajes","title":"GET /api/mensajes","text":"<p>Middleware: <code>verifyAdmin</code></p> <p>Purpose: Retrieves all messages involving a specific user (for admin conversation view).</p> <p>Query Parameters:</p> <ul> <li><code>con</code> (required) - The username to retrieve messages for</li> </ul> <p>Request Flow:</p> <ol> <li>Validates JWT and admin role via <code>verifyAdmin</code></li> <li>Extracts <code>con</code> parameter from query string</li> <li>Returns 400 if <code>con</code> is missing</li> <li>Queries messages where user is sender or recipient</li> <li>Returns messages ordered by date ascending</li> </ol> <p>Database Query:</p> <pre><code>SELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <p>Response: JSON array of message objects</p> <p>Error Responses:</p> <ul> <li><code>400</code> - Missing <code>?con=usuario</code> parameter</li> <li><code>403</code> - User is not an admin</li> <li><code>500</code> - Database query error</li> </ul> <p>Sources: src/router.js L229-L253</p>"},{"location":"Protected-Routes.html#get-apimensajesmios","title":"GET /api/mensajes/mios","text":"<p>Middleware: <code>verifyToken</code></p> <p>Purpose: Retrieves all messages for the currently authenticated user.</p> <p>Request Flow:</p> <ol> <li>Validates JWT via <code>verifyToken</code></li> <li>Extracts username from <code>req.user.user</code></li> <li>Queries messages where authenticated user is sender or recipient</li> <li>Returns messages ordered by date ascending</li> </ol> <p>Database Query:</p> <pre><code>SELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <p>Response: JSON array of message objects</p> <p>Error Responses:</p> <ul> <li><code>401</code> - No valid token</li> <li><code>403</code> - Token invalid</li> <li><code>500</code> - Database query error</li> </ul> <p>Sources: src/router.js L256-L280</p>"},{"location":"Protected-Routes.html#get-apiusuarios-conversaciones","title":"GET /api/usuarios-conversaciones","text":"<p>Middleware: <code>verifyAdmin</code></p> <p>Purpose: Returns a list of all non-admin users who have conversations with administrators.</p> <p>Request Flow:</p> <ol> <li>Validates JWT and admin role via <code>verifyAdmin</code></li> <li>Executes complex query to find users in admin conversations</li> <li>Returns array of usernames</li> </ol> <p>Database Query:</p> <pre><code>SELECT DISTINCT usuario\nFROM (\n  SELECT de_usuario AS usuario FROM mensajes\n  WHERE para_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n\n  UNION\n\n  SELECT para_usuario AS usuario FROM mensajes\n  WHERE de_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n) AS conversaciones\nWHERE usuario NOT IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n</code></pre> <p>Response: JSON array of usernames (strings)</p> <p>Query Logic:</p> <ol> <li>Finds messages sent TO admins (extracts sender)</li> <li>Finds messages sent FROM admins (extracts recipient)</li> <li>Combines with UNION to eliminate duplicates</li> <li>Filters out admin usernames from results</li> </ol> <p>Error Responses:</p> <ul> <li><code>403</code> - User is not an admin</li> <li><code>500</code> - Database query error</li> </ul> <p>Sources: src/router.js L283-L315</p>"},{"location":"Protected-Routes.html#pdf-generation-routes","title":"PDF Generation Routes","text":""},{"location":"Protected-Routes.html#get-pdfdescargar","title":"GET /pdf/descargar","text":"<p>Middleware: <code>verifyToken</code></p> <p>Purpose: Generates and downloads a PDF of the products table using Puppeteer (headless Chrome).</p> <p>Request Flow:</p> <ol> <li>Validates JWT via <code>verifyToken</code></li> <li>Queries all products from database</li> <li>Renders <code>pdfTabla.ejs</code> template to HTML string</li> <li>Launches headless Chrome browser</li> <li>Loads HTML content into browser page</li> <li>Generates PDF from rendered page</li> <li>Closes browser</li> <li>Sends PDF as downloadable file</li> </ol> <p>PDF Generation Configuration:</p> <pre><code>{\n  format: \"A4\",\n  printBackground: true,\n  margin: { top: \"20px\", bottom: \"20px\" }\n}\n</code></pre> <p>Response Headers:</p> <pre><code>Content-Type: application/pdf\nContent-Disposition: attachment; filename=\"productos.pdf\"\n</code></pre> <p>Note: Uses Puppeteer for high-fidelity HTML-to-PDF conversion with full CSS support.</p> <p>Sources: src/router.js L317-L353</p>"},{"location":"Protected-Routes.html#get-pdfkitdescargar","title":"GET /pdfkit/descargar","text":"<p>Middleware: <code>verifyToken</code></p> <p>Purpose: Generates and downloads a PDF of the products table using PDFKit (programmatic generation).</p> <p>Request Flow:</p> <ol> <li>Validates JWT via <code>verifyToken</code></li> <li>Queries all products from database</li> <li>Creates PDFDocument instance</li> <li>Writes title and table headers</li> <li>Iterates through products, writing each row</li> <li>Streams PDF directly to response</li> </ol> <p>PDF Layout:</p> <ul> <li>Document size: A4</li> <li>Margin: 40 points</li> <li>Title: 18pt font, centered</li> <li>Table headers: Helvetica-Bold, 12pt</li> <li>Table data: Helvetica, 11pt</li> <li>Column positions: Ref (50), Nombre (150), Precio (300), Stock (380)</li> <li>Row spacing: 20 points</li> </ul> <p>Response Headers:</p> <pre><code>Content-Type: application/pdf\nContent-Disposition: attachment; filename=\"productos_desde_cero.pdf\"\n</code></pre> <p>Note: Uses PDFKit for direct PDF generation without HTML rendering. More performant but less flexible than Puppeteer approach.</p> <p>Sources: src/router.js L355-L396</p>"},{"location":"Protected-Routes.html#authorization-flow-diagram","title":"Authorization Flow Diagram","text":"<pre><code>sequenceDiagram\n  participant Client Browser\n  participant Express Router\n  participant src/router.js\n  participant verifyToken MW\n  participant src/middlewares/verifyToken.js\n  participant verifyAdmin MW\n  participant src/middlewares/verifyAdmin.js\n  participant Route Handler\n  participant MySQL Database\n\n  note over Client Browser,MySQL Database: User-Level Protected Route (/admin)\n  Client Browser-&gt;&gt;Express Router: GET /admin\n  Express Router-&gt;&gt;verifyToken MW: Call middleware\n  verifyToken MW-&gt;&gt;verifyToken MW: Extract req.cookies.token\n  loop [Invalid token]\n    verifyToken MW-&gt;&gt;Client Browser: 401 \"No autenticado\"\n    verifyToken MW-&gt;&gt;verifyToken MW: jwt.verify(token, JWT_SECRET)\n    verifyToken MW-&gt;&gt;Client Browser: 403 \"Token inv\u00e1lido\"\n    verifyToken MW-&gt;&gt;verifyToken MW: Attach req.user = decoded\n    verifyToken MW-&gt;&gt;Route Handler: next()\n    Route Handler-&gt;&gt;MySQL Database: SELECT * FROM productos\n    MySQL Database-&gt;&gt;Route Handler: Return results\n    Route Handler-&gt;&gt;Client Browser: Render admin.ejs\n    note over Client Browser,MySQL Database: Admin-Level Protected Route (/api/mensajes)\n    Client Browser-&gt;&gt;Express Router: GET /api/mensajes?con=user1\n    Express Router-&gt;&gt;verifyAdmin MW: Call middleware\n    verifyAdmin MW-&gt;&gt;verifyAdmin MW: Extract req.cookies.token\n    verifyAdmin MW-&gt;&gt;Client Browser: 403 \"Acceso denegado\"\n    verifyAdmin MW-&gt;&gt;verifyAdmin MW: jwt.verify(token, JWT_SECRET)\n    verifyAdmin MW-&gt;&gt;Client Browser: 403 \"Token inv\u00e1lido\"\n    verifyAdmin MW-&gt;&gt;verifyAdmin MW: Check decoded.rol\n    verifyAdmin MW-&gt;&gt;Client Browser: 403 \"Acceso solo para administradores\"\n    verifyAdmin MW-&gt;&gt;verifyAdmin MW: Attach req.user = decoded\n    verifyAdmin MW-&gt;&gt;Route Handler: next()\n    Route Handler-&gt;&gt;MySQL Database: SELECT ... FROM mensajes WHERE ...\n    MySQL Database-&gt;&gt;Route Handler: Return messages\n    Route Handler-&gt;&gt;Client Browser: JSON response\n  end</code></pre> <p>Sources: src/router.js L119-L396</p> <p>src/middlewares/verifyToken.js L3-L15</p> <p>src/middlewares/verifyAdmin.js L24-L42</p>"},{"location":"Protected-Routes.html#jwt-payload-structure","title":"JWT Payload Structure","text":"<p>When authentication succeeds, the decoded JWT payload is attached to <code>req.user</code> and contains:</p> Field Type Description Source <code>user</code> String Username (primary key) <code>usuarios.usuario</code> <code>name</code> String Display name <code>usuarios.nombre</code> <code>rol</code> String User role ('admin' or 'user') <code>usuarios.rol</code> <code>imagen</code> String Profile image filename <code>usuarios.imagen</code> <p>This payload is available to all route handlers after successful authentication.</p> <p>Sources: src/router.js L559-L564</p>"},{"location":"Protected-Routes.html#error-response-summary","title":"Error Response Summary","text":"Status Code Middleware Error Message Condition 401 verifyToken \"No autenticado\" Token missing from cookies 403 verifyToken \"Token inv\u00e1lido\" JWT verification failed 403 verifyAdmin \"Acceso denegado\" Token missing from cookies 403 verifyAdmin \"Token inv\u00e1lido\" JWT verification failed 403 verifyAdmin \"Acceso solo para administradores\" Valid token but <code>rol !== 'admin'</code> <p>Sources: src/middlewares/verifyToken.js L6-L14</p> <p>src/middlewares/verifyAdmin.js L28-L40</p>"},{"location":"Protected-Routes.html#security-considerations","title":"Security Considerations","text":"<ol> <li>HTTP-only Cookies: JWT tokens are stored in HTTP-only cookies, preventing JavaScript access and XSS attacks</li> <li>Token Expiration: Tokens expire after 1 hour (configured in authentication flow)</li> <li>Secret Key: Token verification uses <code>process.env.JWT_SECRET</code> environment variable</li> <li>Role-based Access: Admin routes enforce role checking after token validation</li> <li>No Token in Response: Tokens are never included in JSON responses, only in Set-Cookie headers</li> </ol> <p>Sources: src/middlewares/verifyToken.js L1-L18</p> <p>src/middlewares/verifyAdmin.js L1-L45</p>"},{"location":"Public-Routes.html","title":"Public Routes","text":"<p>Relevant source files * public/css/style.css * src/router.js * views/admin.ejs * views/index.ejs * views/register.ejs</p> <p>This document describes all HTTP routes in the application that are accessible without authentication. These routes handle the public-facing functionality including the homepage, user authentication (login/register), and language preference management.</p> <p>For routes requiring authentication, see Protected Routes. For API endpoints used by the frontend, see API Endpoints.</p>"},{"location":"Public-Routes.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>Public routes are defined in src/router.js</p> <p>and do not have the <code>verifyToken</code> or <code>verifyAdmin</code> middleware applied. They are accessible to any client making HTTP requests to the server, regardless of authentication state. These routes form the entry points to the application and handle the authentication lifecycle.</p>"},{"location":"Public-Routes.html#route-overview","title":"Route Overview","text":"<p>The following table lists all public routes in the system:</p> Method Path Handler Location View Rendered Purpose GET <code>/</code> src/router.js L59-L74 <code>index.ejs</code> Homepage with optional user info GET <code>/login</code> src/router.js L75-L77 <code>login.ejs</code> Login form display GET <code>/registro</code> src/router.js L78-L80 <code>register.ejs</code> Registration form display POST <code>/auth</code> src/router.js L532-L601 <code>login.ejs</code> Login processing with JWT generation POST <code>/register</code> src/router.js L414-L484 <code>register.ejs</code> Registration processing with validation GET <code>/set-lang/:lang</code> src/router.js L398-L407 N/A (redirect) Language preference switching <p>Sources: src/router.js L1-L607</p>"},{"location":"Public-Routes.html#homepage-route","title":"Homepage Route","text":""},{"location":"Public-Routes.html#get","title":"GET /","text":"<p>The root route serves as the application's homepage. It demonstrates conditional rendering based on authentication state by attempting to decode a JWT from cookies without enforcing authentication.</p> <pre><code>Route: GET /\nHandler: &lt;FileRef file-url=\"https://github.com/moichuelo/registro/blob/544abbcc/src/router.js#L59-L74\" min=59 max=74 file-path=\"src/router.js\"&gt;Hii&lt;/FileRef&gt;\nMiddleware: None (public)\nView: views/index.ejs\n</code></pre> <p>Handler Logic:</p> <ol> <li>Checks for <code>token</code> cookie in the request src/router.js L61</li> <li>If present, verifies the JWT using <code>jwt.verify()</code> with <code>process.env.JWT_SECRET</code> src/router.js L62</li> <li>Extracts user payload and passes to view</li> <li>If absent or invalid, displays generic message \"Debe iniciar sesi\u00f3n\"</li> </ol> <p>View Data:</p> Property Type Description <code>user</code> string Username from JWT or \"Debe iniciar sesi\u00f3n\" <code>login</code> boolean <code>true</code> if authenticated, <code>false</code> otherwise <p>Example Implementation:</p> <pre><code>if (req.cookies.token) {\n    const payload = jwt.verify(req.cookies.token, process.env.JWT_SECRET);\n    req.user = payload;\n    res.render(\"index\", {\n        user: req.user?.name || \"Usuario\",\n        login: true,\n    });\n} else {\n    res.render(\"index\", {\n        user: \"Debe iniciar sesi\u00f3n\",\n        login: false,\n    });\n}\n</code></pre> <p>The rendered view views/index.ejs L1-L35</p> <p>conditionally displays either a logout link or login link based on the <code>login</code> flag.</p> <p>Sources: src/router.js L59-L74</p> <p>views/index.ejs L1-L35</p>"},{"location":"Public-Routes.html#authentication-routes","title":"Authentication Routes","text":""},{"location":"Public-Routes.html#get-login","title":"GET /login","text":"<p>Displays the login form for user authentication.</p> <pre><code>Route: GET /login\nHandler: &lt;FileRef file-url=\"https://github.com/moichuelo/registro/blob/544abbcc/src/router.js#L75-L77\" min=75 max=77 file-path=\"src/router.js\"&gt;Hii&lt;/FileRef&gt;\nMiddleware: None (public)\nView: views/login.ejs\n</code></pre> <p>Simple route handler that renders the login view without any data processing.</p> <p>Sources: src/router.js L75-L77</p>"},{"location":"Public-Routes.html#post-auth","title":"POST /auth","text":"<p>Processes login credentials, validates against the database, and issues JWT tokens.</p> <pre><code>Route: POST /auth\nHandler: &lt;FileRef file-url=\"https://github.com/moichuelo/registro/blob/544abbcc/src/router.js#L532-L601\" min=532 max=601 file-path=\"src/router.js\"&gt;Hii&lt;/FileRef&gt;\nMiddleware: limiter (rate limiting)\nView: views/login.ejs (rendered with alert)\n</code></pre> <p>Rate Limiting:</p> <p>The route is protected by the <code>limiter</code> middleware src/router.js L532</p> <p>which prevents brute-force attacks. See Security Measures for details on rate limiting configuration.</p> <p>Request Flow:</p> <pre><code>flowchart TD\n\nStart[\"POST /auth&lt;br&gt;Request\"]\nRateLimit[\"limiter middleware&lt;br&gt;Check rate limits\"]\nValidateInput[\"user &amp;&amp; pass&lt;br&gt;present?\"]\nRenderError1[\"Render login.ejs&lt;br&gt;Error: Missing credentials\"]\nQueryDB[\"db.query()&lt;br&gt;SELECT * FROM usuarios&lt;br&gt;WHERE usuario = ?\"]\nUserExists[\"User found?\"]\nRenderError2[\"Render login.ejs&lt;br&gt;Error: Invalid credentials\"]\nComparePass[\"bcrypt.compare()&lt;br&gt;Verify password hash\"]\nPassMatch[\"Password&lt;br&gt;matches?\"]\nBuildPayload[\"Build JWT payload&lt;br&gt;{user, name, rol, imagen}\"]\nSignToken[\"jwt.sign()&lt;br&gt;Secret: JWT_SECRET&lt;br&gt;Expiry: 1h\"]\nSetCookie[\"res.cookie('token')&lt;br&gt;httpOnly: true&lt;br&gt;maxAge: 3600000\"]\nRenderSuccess[\"Render login.ejs&lt;br&gt;Success alert&lt;br&gt;Redirect to /\"]\nEnd[\"Response\"]\n\nStart --&gt; RateLimit\nRateLimit --&gt; ValidateInput\nValidateInput --&gt; RenderError1\nValidateInput --&gt; QueryDB\nQueryDB --&gt; UserExists\nUserExists --&gt; RenderError2\nUserExists --&gt; ComparePass\nComparePass --&gt; PassMatch\nPassMatch --&gt; RenderError2\nPassMatch --&gt; BuildPayload\nBuildPayload --&gt; SignToken\nSignToken --&gt; SetCookie\nSetCookie --&gt; RenderSuccess\nRenderError1 --&gt; End\nRenderError2 --&gt; End\nRenderSuccess --&gt; End</code></pre> <p>Sources: src/router.js L532-L601</p> <p>Payload Structure:</p> <p>The JWT payload contains the following fields from the <code>usuarios</code> table:</p> <pre><code>const payload = {\n    user: results[0].usuario,    // Username (primary key)\n    name: results[0].nombre,      // Display name\n    rol: results[0].rol,          // Role: 'admin' or 'user'\n    imagen: results[0].imagen,    // Profile image filename\n};\n</code></pre> <p>src/router.js L559-L564</p> <p>Cookie Configuration:</p> Property Value Description <code>httpOnly</code> <code>true</code> Prevents client-side JavaScript access <code>secure</code> <code>false</code> Set to <code>true</code> for HTTPS in production <code>maxAge</code> <code>3600000</code> 1 hour in milliseconds <p>src/router.js L570-L574</p> <p>Sources: src/router.js L532-L601</p>"},{"location":"Public-Routes.html#registration-routes","title":"Registration Routes","text":""},{"location":"Public-Routes.html#get-registro","title":"GET /registro","text":"<p>Displays the user registration form.</p> <pre><code>Route: GET /registro\nHandler: &lt;FileRef file-url=\"https://github.com/moichuelo/registro/blob/544abbcc/src/router.js#L78-L80\" min=78 max=80 file-path=\"src/router.js\"&gt;Hii&lt;/FileRef&gt;\nMiddleware: None (public)\nView: views/register.ejs\n</code></pre> <p>Simple route handler that renders the registration view.</p> <p>Sources: src/router.js L78-L80</p>"},{"location":"Public-Routes.html#post-register","title":"POST /register","text":"<p>Processes new user registration with input validation and file upload support.</p> <pre><code>Route: POST /register\nHandler: &lt;FileRef file-url=\"https://github.com/moichuelo/registro/blob/544abbcc/src/router.js#L414-L484\" min=414 max=484 file-path=\"src/router.js\"&gt;Hii&lt;/FileRef&gt;\nMiddleware: upload.single(\"profileImage\")\nView: views/register.ejs (re-rendered with validation errors or success)\n</code></pre> <p>Middleware Stack:</p> <ol> <li>Multer Upload: <code>upload.single(\"profileImage\")</code> - Handles multipart/form-data for profile image uploads src/router.js L414</li> <li>Express Validator: Validates form fields inline src/router.js L415-L428</li> </ol> <p>Validation Rules:</p> Field Validation Error Message <code>user</code> Must exist, min length 4 \"El usuario debe tener al menos 4 caracteres\" <code>name</code> Min length 4 \"El nombre debe tener al menos 4 caracteres\" <code>pass</code> Min length 4 \"La contrase\u00f1a debe tener al menos 4 caracteres\" <code>email</code> Valid email format \"El email no es valido\" <code>edad</code> Numeric \"La edad debe ser un n\u00famero\" <p>src/router.js L416-L428</p> <p>Registration Flow:</p> <pre><code>flowchart TD\n\nStart[\"POST /register&lt;br&gt;multipart/form-data\"]\nMulter[\"upload.single('profileImage')&lt;br&gt;Store in public/uploads/\"]\nValidate[\"express-validator&lt;br&gt;Check all fields\"]\nHasErrors[\"validationResult()&lt;br&gt;has errors?\"]\nRenderErrors[\"Re-render register.ejs&lt;br&gt;Pass: validaciones, valores\"]\nExtractData[\"Extract fields from req.body&lt;br&gt;user, name, rol, pass\"]\nCheckFile[\"req.file present?&lt;br&gt;Get filename or null\"]\nHashPass[\"bcrypt.hash(pass, 8)&lt;br&gt;Generate password hash\"]\nInsertDB[\"db.query()&lt;br&gt;INSERT INTO usuarios\"]\nCheckInsert[\"Insert&lt;br&gt;successful?\"]\nLogError[\"console.log(error)\"]\nRenderSuccess[\"Render register.ejs&lt;br&gt;SweetAlert success&lt;br&gt;Redirect to /\"]\nEnd[\"Response\"]\n\nStart --&gt; Multer\nMulter --&gt; Validate\nValidate --&gt; HasErrors\nHasErrors --&gt; RenderErrors\nHasErrors --&gt; ExtractData\nExtractData --&gt; CheckFile\nCheckFile --&gt; HashPass\nHashPass --&gt; InsertDB\nInsertDB --&gt; CheckInsert\nCheckInsert --&gt; LogError\nCheckInsert --&gt; RenderSuccess\nRenderErrors --&gt; End\nLogError --&gt; End\nRenderSuccess --&gt; End</code></pre> <p>Sources: src/router.js L414-L484</p> <p>Database Insert:</p> <p>The handler inserts a new record into the <code>usuarios</code> table with the following mapping:</p> <pre><code>{\n    usuario: user,              // Username (primary key)\n    nombre: name,               // Display name\n    rol: rol,                   // Selected role\n    pass: passwordHash,         // bcrypt hash (salt rounds: 8)\n    imagen: profileImage,       // Filename from Multer or null\n}\n</code></pre> <p>src/router.js L458-L464</p> <p>Error Handling:</p> <p>On validation failure, the view is re-rendered with:</p> <ul> <li><code>validaciones</code>: Array of error objects from express-validator</li> <li><code>valores</code>: Original form values for field pre-population</li> </ul> <p>This allows the user to see validation errors without losing entered data. views/register.ejs L44-L56</p> <p>displays these errors using Bootstrap alert components.</p> <p>Sources: src/router.js L414-L484</p> <p>views/register.ejs L1-L85</p>"},{"location":"Public-Routes.html#language-switching-route","title":"Language Switching Route","text":""},{"location":"Public-Routes.html#get-set-langlang","title":"GET /set-lang/:lang","text":"<p>Updates the user's language preference via cookie and redirects back to the referring page.</p> <pre><code>Route: GET /set-lang/:lang\nHandler: &lt;FileRef file-url=\"https://github.com/moichuelo/registro/blob/544abbcc/src/router.js#L398-L407\" min=398 max=407 file-path=\"src/router.js\"&gt;Hii&lt;/FileRef&gt;\nMiddleware: None (public)\nResponse: HTTP 302 Redirect\n</code></pre> <p>Parameters:</p> Name Location Type Valid Values Description <code>lang</code> Path string <code>'es'</code>, <code>'en'</code> Target language code <code>returnTo</code> Query string Any valid path URL to redirect after setting language <p>Logic:</p> <ol> <li>Extract <code>lang</code> from route parameter src/router.js L399</li> <li>Extract <code>returnTo</code> from query string, defaulting to <code>'/'</code> src/router.js L400</li> <li>Validate <code>lang</code> is either <code>'es'</code> or <code>'en'</code> src/router.js L402</li> <li>Set <code>lang</code> cookie with 900-second expiry src/router.js L403</li> <li>Redirect to <code>returnTo</code> URL src/router.js L406</li> </ol> <p>Cookie Configuration:</p> <pre><code>res.cookie('lang', lang, { maxAge: 900000, httpOnly: true });\n</code></pre> <p>src/router.js L403</p> <p>Integration with i18n:</p> <p>The <code>lang</code> cookie is read by the <code>i18n.init</code> middleware configured in index.js</p> <p>to determine which locale to use for rendering views. See Internationalization (i18n)) for details on how language preferences are applied.</p> <p>Usage Example:</p> <p>To switch to Spanish and return to the admin page:</p> <pre><code>GET /set-lang/es?returnTo=/admin\n</code></pre> <p>The header partial views/partials/header.ejs</p> <p>includes language switching links that use this route.</p> <p>Sources: src/router.js L398-L407</p>"},{"location":"Public-Routes.html#request-processing-flow","title":"Request Processing Flow","text":"<p>The following diagram shows how public routes are processed through the Express middleware stack:</p> <pre><code>flowchart TD\n\nRequest[\"Incoming HTTP Request\"]\nStatic[\"Static asset?&lt;br&gt;/resources/*\"]\nServeStatic[\"express.static&lt;br&gt;Serve from public/\"]\nHelmet[\"helmet&lt;br&gt;Security headers\"]\nRateLimit[\"express-rate-limit&lt;br&gt;Global limits\"]\nCookieParser[\"cookie-parser&lt;br&gt;Parse token cookie\"]\nBodyParser[\"body parsers&lt;br&gt;urlencoded + json\"]\nSession[\"express-session&lt;br&gt;Session management\"]\nI18n[\"i18n.init&lt;br&gt;Language detection\"]\nSetGlobals[\"setGlobals&lt;br&gt;View context\"]\nRouteMatch[\"Route matches&lt;br&gt;public route?\"]\nRootHandler[\"Homepage handler&lt;br&gt;Optional JWT decode\"]\nLoginView[\"Render login.ejs\"]\nRegisterView[\"Render register.ejs\"]\nAuthLimiter[\"limiter middleware&lt;br&gt;Auth-specific rate limit\"]\nMulter[\"upload.single()&lt;br&gt;Profile image\"]\nLangHandler[\"Set lang cookie&lt;br&gt;Redirect\"]\nAuthHandler[\"Auth handler&lt;br&gt;JWT generation\"]\nValidators[\"express-validator&lt;br&gt;Field validation\"]\nRegisterHandler[\"Register handler&lt;br&gt;bcrypt + DB insert\"]\nResponse[\"Send Response\"]\n\nRequest --&gt; Static\nStatic --&gt; ServeStatic\nStatic --&gt; Helmet\nHelmet --&gt; RateLimit\nRateLimit --&gt; CookieParser\nCookieParser --&gt; BodyParser\nBodyParser --&gt; Session\nSession --&gt; I18n\nI18n --&gt; SetGlobals\nSetGlobals --&gt; RouteMatch\nRouteMatch --&gt; RootHandler\nRouteMatch --&gt; LoginView\nRouteMatch --&gt; RegisterView\nRouteMatch --&gt; AuthLimiter\nRouteMatch --&gt; Multer\nRouteMatch --&gt; LangHandler\nAuthLimiter --&gt; AuthHandler\nMulter --&gt; Validators\nValidators --&gt; RegisterHandler\nRootHandler --&gt; Response\nLoginView --&gt; Response\nRegisterView --&gt; Response\nAuthHandler --&gt; Response\nRegisterHandler --&gt; Response\nLangHandler --&gt; Response\nServeStatic --&gt; Response</code></pre> <p>Sources: src/router.js L1-L607</p> <p>index.js</p>"},{"location":"Public-Routes.html#route-to-code-entity-mapping","title":"Route-to-Code Entity Mapping","text":"<p>This diagram maps public routes to their corresponding code entities in the system:</p> <pre><code>flowchart TD\n\nR1[\"GET /&lt;br&gt;[router.js:59-74]\"]\nR2[\"GET /login&lt;br&gt;[router.js:75-77]\"]\nR3[\"GET /registro&lt;br&gt;[router.js:78-80]\"]\nR4[\"POST /auth&lt;br&gt;[router.js:532-601]\"]\nR5[\"POST /register&lt;br&gt;[router.js:414-484]\"]\nR6[\"GET /set-lang/:lang&lt;br&gt;[router.js:398-407]\"]\nM1[\"limiter&lt;br&gt;authLimiter.js\"]\nM2[\"upload&lt;br&gt;multerConfig.js\"]\nM3[\"express-validator&lt;br&gt;body()\"]\nD1[\"jwt.verify()&lt;br&gt;jsonwebtoken\"]\nD2[\"jwt.sign()&lt;br&gt;jsonwebtoken\"]\nD3[\"bcrypt.hash()&lt;br&gt;bcryptjs\"]\nD4[\"bcrypt.compare()&lt;br&gt;bcryptjs\"]\nD5[\"db.query()&lt;br&gt;database/db.js\"]\nV1[\"views/index.ejs\"]\nV2[\"views/login.ejs\"]\nV3[\"views/register.ejs\"]\nT1[\"usuarios table&lt;br&gt;usuario, pass, rol, nombre, imagen\"]\n\nR1 --&gt; D1\nR1 --&gt; V1\nR2 --&gt; V2\nR3 --&gt; V3\nR4 --&gt; M1\nR4 --&gt; D4\nR4 --&gt; D5\nR4 --&gt; D2\nR4 --&gt; V2\nR4 --&gt; T1\nR5 --&gt; M2\nR5 --&gt; M3\nR5 --&gt; D3\nR5 --&gt; D5\nR5 --&gt; V3\nR5 --&gt; T1\nR6 --&gt; V1\nR6 --&gt; V2\nR6 --&gt; V3\n\nsubgraph subGraph4 [\"Database Tables\"]\n    T1\nend\n\nsubgraph subGraph3 [\"View Templates\"]\n    V1\n    V2\n    V3\nend\n\nsubgraph subGraph2 [\"External Dependencies\"]\n    D1\n    D2\n    D3\n    D4\n    D5\nend\n\nsubgraph subGraph1 [\"Middleware Dependencies\"]\n    M1\n    M2\n    M3\nend\n\nsubgraph subGraph0 [\"Public Routes\"]\n    R1\n    R2\n    R3\n    R4\n    R5\n    R6\nend</code></pre> <p>Sources: src/router.js L1-L607</p>"},{"location":"Public-Routes.html#cookie-management","title":"Cookie Management","text":"<p>All authentication-related routes interact with cookies for session management:</p> Route Cookie Action Cookie Name Properties <code>GET /</code> Read <code>token</code> JWT validation (optional) <code>POST /auth</code> Write <code>token</code> httpOnly, 1-hour expiry <code>GET /set-lang/:lang</code> Write <code>lang</code> httpOnly, 15-minute expiry <p>The <code>token</code> cookie contains the JWT that encodes user identity and is used by protected routes. The <code>lang</code> cookie stores language preference for the i18n system.</p> <p>Sources: src/router.js L59-L74</p> <p>src/router.js L570-L574</p> <p>src/router.js L403</p>"},{"location":"Public-Routes.html#security-considerations","title":"Security Considerations","text":"<p>Public routes implement several security measures:</p> <ol> <li>Rate Limiting: The <code>POST /auth</code> route uses the <code>limiter</code> middleware to prevent brute-force attacks src/router.js L532</li> <li>Password Hashing: All passwords are hashed with bcrypt using 8 salt rounds src/router.js L453</li> <li>HTTP-Only Cookies: JWT tokens are stored in HTTP-only cookies, preventing XSS attacks src/router.js L571</li> <li>Input Validation: Registration form validates all fields with express-validator src/router.js L415-L428</li> <li>JWT Expiration: Tokens expire after 1 hour, limiting compromise window src/router.js L567</li> </ol> <p>For comprehensive security documentation, see Security Measures.</p> <p>Sources: src/router.js L414-L601</p>"},{"location":"Puppeteer-PDF-Generation.html","title":"Puppeteer PDF Generation","text":"<p>Relevant source files * package-lock.json * src/router.js</p> <p>This document describes the Puppeteer-based PDF generation approach used in the registro-sesiones system. This method renders EJS templates to HTML in a headless browser, then converts the rendered page to PDF format.</p> <p>For information about the alternative programmatic PDF generation approach, see PDFKit PDF Generation. For a broader overview of both methods, see PDF Generation.</p>"},{"location":"Puppeteer-PDF-Generation.html#overview","title":"Overview","text":"<p>The Puppeteer PDF generation system provides a template-driven approach to creating PDF documents from product data. The system uses Puppeteer (Chromium-based headless browser) to render an EJS template with live data, then captures the rendered HTML as a PDF document. This approach enables complex layouts, CSS styling, and dynamic content rendering that would be difficult to achieve with programmatic PDF libraries.</p> <p>Key characteristics:</p> <ul> <li>Template-based: Uses standard EJS views for PDF layout</li> <li>Browser-powered: Leverages Chromium's rendering engine</li> <li>Authenticated: Requires valid JWT token</li> <li>Asynchronous: Uses async/await pattern for browser automation</li> <li>Memory-buffered: Generates PDF in memory before streaming to client</li> </ul> <p>Sources: src/router.js L317-L353</p>"},{"location":"Puppeteer-PDF-Generation.html#request-flow","title":"Request Flow","text":"<p>The following diagram illustrates the complete request flow from client authentication through PDF delivery:</p> <pre><code>sequenceDiagram\n  participant Client\n  participant Express Router\n  participant /pdf/descargar\n  participant verifyToken\n  participant Middleware\n  participant MySQL\n  participant productos table\n  participant EJS Renderer\n  participant Puppeteer\n  participant Headless Chrome\n  participant Browser Page\n\n  Client-&gt;&gt;Express Router: GET /pdf/descargar\n  Express Router-&gt;&gt;verifyToken: Check JWT cookie\n  loop [Token Invalid]\n    verifyToken--&gt;&gt;Client: 401 Unauthorized\n    verifyToken-&gt;&gt;Express Router: Attach req.user\n    Express Router-&gt;&gt;MySQL: SELECT * FROM productos\n    MySQL--&gt;&gt;Express Router: Product rows\n    Express Router-&gt;&gt;EJS Renderer: renderFile(pdfTabla.ejs, { productos })\n    EJS Renderer--&gt;&gt;Express Router: Rendered HTML string\n    Express Router-&gt;&gt;Puppeteer: launch({ headless: true })\n    Puppeteer--&gt;&gt;Express Router: Browser instance\n    Express Router-&gt;&gt;Browser Page: newPage()\n    Browser Page--&gt;&gt;Express Router: Page object\n    Express Router-&gt;&gt;Browser Page: setContent(html, { waitUntil: \"networkidle0\" })\n    Browser Page--&gt;&gt;Express Router: Content loaded\n    Express Router-&gt;&gt;Browser Page: pdf({ format: \"A4\", printBackground: true })\n    Browser Page--&gt;&gt;Express Router: PDF buffer\n    Express Router-&gt;&gt;Puppeteer: close()\n    Express Router-&gt;&gt;Client: Send PDF (Content-Type: application/pdf)\n  end</code></pre> <p>Sources: src/router.js L317-L353</p> <p>src/middlewares/verifyToken.js</p>"},{"location":"Puppeteer-PDF-Generation.html#technical-implementation","title":"Technical Implementation","text":""},{"location":"Puppeteer-PDF-Generation.html#route-definition","title":"Route Definition","text":"<p>The Puppeteer PDF generation is exposed via the <code>/pdf/descargar</code> route with JWT authentication:</p> Aspect Value Route <code>GET /pdf/descargar</code> Middleware <code>verifyToken</code> Handler Type Async function Database Query <code>SELECT * FROM productos</code> Template <code>views/pdfTabla.ejs</code> Response Type Binary PDF stream <p>Sources: src/router.js L317-L353</p>"},{"location":"Puppeteer-PDF-Generation.html#code-walkthrough","title":"Code Walkthrough","text":"<p>The implementation at src/router.js L317-L353</p> <p>follows this sequence:</p> <p>1. Database Query</p> <pre><code>db.query(\"SELECT * FROM productos\", async (error, results) =&gt; { ... })\n</code></pre> <p>Retrieves all product records from the <code>productos</code> table.</p> <p>2. HTML Generation</p> <pre><code>const html = await ejs.renderFile(path.join(__dirname, \"../views/pdfTabla.ejs\"), {\n    productos: results\n});\n</code></pre> <p>Renders the EJS template with product data to produce an HTML string.</p> <p>3. Browser Launch</p> <pre><code>const browser = await puppeteer.launch({\n    headless: true,\n    args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\n});\n</code></pre> <p>Launches a headless Chromium instance with security flags for containerized environments.</p> <p>4. Page Creation and Content Loading</p> <pre><code>const page = await browser.newPage();\nawait page.setContent(html, { waitUntil: \"networkidle0\" });\n</code></pre> <p>Creates a new browser page and loads the HTML content. The <code>networkidle0</code> option waits until no network connections are active for 500ms.</p> <p>5. PDF Generation</p> <pre><code>const pdfBuffer = await page.pdf({\n    format: \"A4\",\n    printBackground: true,\n    margin: { top: \"20px\", bottom: \"20px\" },\n});\n</code></pre> <p>Generates the PDF from the rendered page with specified formatting options.</p> <p>6. Cleanup and Response</p> <pre><code>await browser.close();\nres.setHeader(\"Content-Type\", \"application/pdf\");\nres.setHeader(\"Content-Disposition\", 'attachment; filename=\"productos.pdf\"');\nres.send(pdfBuffer);\n</code></pre> <p>Closes the browser instance and streams the PDF buffer to the client.</p> <p>Sources: src/router.js L317-L353</p>"},{"location":"Puppeteer-PDF-Generation.html#puppeteer-configuration","title":"Puppeteer Configuration","text":""},{"location":"Puppeteer-PDF-Generation.html#launch-options","title":"Launch Options","text":"<p>The following diagram shows the Puppeteer launch configuration and its purpose:</p> <pre><code>flowchart TD\n\nLaunch[\"puppeteer.launch()\"]\nHeadlessTrue[\"headless: true\"]\nArgs[\"args: []\"]\nNoSandbox[\"--no-sandbox\"]\nDisableSetuid[\"--disable-setuid-sandbox\"]\nHeadlessDesc[\"Runs Chrome without GUI&lt;br&gt;Required for server environments\"]\nSandboxDesc[\"Disables Chrome sandbox&lt;br&gt;Needed in Docker/containers\"]\nSetuidDesc[\"Disables setuid sandbox&lt;br&gt;Compatibility for restricted envs\"]\n\nLaunch --&gt; HeadlessTrue\nLaunch --&gt; Args\nArgs --&gt; NoSandbox\nArgs --&gt; DisableSetuid\nHeadlessTrue --&gt; HeadlessDesc\nNoSandbox --&gt; SandboxDesc\nDisableSetuid --&gt; SetuidDesc</code></pre> Option Value Purpose <code>headless</code> <code>true</code> Run Chromium without GUI (required for server) <code>--no-sandbox</code> N/A Disable Chrome sandbox (required for Docker/containers) <code>--disable-setuid-sandbox</code> N/A Disable setuid sandbox (compatibility for restricted environments) <p>Sources: src/router.js L328-L331</p>"},{"location":"Puppeteer-PDF-Generation.html#pdf-options","title":"PDF Options","text":"<p>The PDF generation is configured with the following options at src/router.js L336-L340</p> <p>:</p> Option Value Purpose <code>format</code> <code>\"A4\"</code> Standard paper size (210mm \u00d7 297mm) <code>printBackground</code> <code>true</code> Include CSS background colors/images <code>margin.top</code> <code>\"20px\"</code> Top page margin <code>margin.bottom</code> <code>\"20px\"</code> Bottom page margin <p>Sources: src/router.js L336-L340</p>"},{"location":"Puppeteer-PDF-Generation.html#template-rendering-pipeline","title":"Template Rendering Pipeline","text":"<p>The following diagram illustrates how data flows through the EJS template rendering and Puppeteer conversion:</p> <pre><code>flowchart TD\n\nDB[\"MySQL&lt;br&gt;productos table\"]\nResults[\"Query Results&lt;br&gt;(Array of productos)\"]\nEJSTemplate[\"views/pdfTabla.ejs&lt;br&gt;(EJS Template)\"]\nHTMLString[\"Rendered HTML&lt;br&gt;(String)\"]\nBrowserPage[\"Browser Page&lt;br&gt;(Chromium)\"]\nPDFBuffer[\"PDF Buffer&lt;br&gt;(Binary)\"]\nHTTPHeaders[\"HTTP Headers&lt;br&gt;Content-Type&lt;br&gt;Content-Disposition\"]\nClient[\"Client Browser&lt;br&gt;(Download)\"]\n\nDB --&gt; Results\nHTMLString --&gt; BrowserPage\nPDFBuffer --&gt; HTTPHeaders\n\nsubgraph subGraph3 [\"Response Layer\"]\n    HTTPHeaders\n    Client\n    HTTPHeaders --&gt; Client\nend\n\nsubgraph subGraph2 [\"Puppeteer Layer\"]\n    BrowserPage\n    PDFBuffer\n    BrowserPage --&gt; PDFBuffer\nend\n\nsubgraph subGraph1 [\"Rendering Layer\"]\n    Results\n    EJSTemplate\n    HTMLString\n    Results --&gt; EJSTemplate\n    EJSTemplate --&gt; HTMLString\nend\n\nsubgraph subGraph0 [\"Data Layer\"]\n    DB\nend</code></pre> <p>Template path resolution:</p> <pre><code>path.join(__dirname, \"../views/pdfTabla.ejs\")\n</code></pre> <p>Since <code>__dirname</code> is <code>src/</code>, this resolves to <code>src/../views/pdfTabla.ejs</code> which equals <code>views/pdfTabla.ejs</code> from the project root.</p> <p>Sources: src/router.js L324-L326</p> <p>src/router.js L333-L340</p>"},{"location":"Puppeteer-PDF-Generation.html#error-handling","title":"Error Handling","text":"<p>The implementation includes error handling at two levels:</p>"},{"location":"Puppeteer-PDF-Generation.html#database-query-errors","title":"Database Query Errors","text":"<pre><code>if (error) {\n    return res.status(500).send(\"Error al obtener productos\");\n}\n</code></pre> <p>Handles database connection failures or query execution errors at src/router.js L319-L321</p>"},{"location":"Puppeteer-PDF-Generation.html#pdf-generation-errors","title":"PDF Generation Errors","text":"<pre><code>catch (err) {\n    console.error(\"\u274c Error al generar el PDF:\", err);\n    res.status(500).send(\"Error interno al generar el PDF\");\n}\n</code></pre> <p>Catches errors during EJS rendering, browser launch, page creation, or PDF generation at src/router.js L348-L351</p> <p>Common failure scenarios:</p> <ul> <li>EJS template syntax errors</li> <li>Puppeteer browser launch failure (insufficient memory, missing dependencies)</li> <li>Browser page timeout during content loading</li> <li>PDF generation buffer overflow</li> </ul> <p>Sources: src/router.js L319-L321</p> <p>src/router.js L348-L351</p>"},{"location":"Puppeteer-PDF-Generation.html#http-response-headers","title":"HTTP Response Headers","text":"<p>The route configures specific HTTP headers to trigger browser download behavior:</p> Header Value Purpose <code>Content-Type</code> <code>application/pdf</code> Identifies the response body as PDF format <code>Content-Disposition</code> <code>attachment; filename=\"productos.pdf\"</code> Forces download with specified filename <p>Implementation:</p> <pre><code>res.setHeader(\"Content-Type\", \"application/pdf\");\nres.setHeader(\"Content-Disposition\", 'attachment; filename=\"productos.pdf\"');\n</code></pre> <p>The <code>attachment</code> directive causes browsers to prompt for download rather than attempting inline display.</p> <p>Sources: src/router.js L344-L345</p>"},{"location":"Puppeteer-PDF-Generation.html#memory-and-performance-considerations","title":"Memory and Performance Considerations","text":""},{"location":"Puppeteer-PDF-Generation.html#resource-usage","title":"Resource Usage","text":"<p>The Puppeteer approach has distinct resource characteristics:</p> <pre><code>flowchart TD\n\nStart[\"Request Received\"]\nLaunch[\"Browser Launch&lt;br&gt;~50-100MB\"]\nRender[\"Page Render&lt;br&gt;~20-50MB\"]\nGenerate[\"PDF Generation&lt;br&gt;~5-10MB\"]\nCleanup[\"Browser Close&lt;br&gt;Release Memory\"]\nEnd[\"Response Sent\"]\nPeak[\"~200MB per request\"]\nTime[\"2-5 seconds typical\"]\n\nLaunch --&gt; Peak\nRender --&gt; Time\n\nsubgraph subGraph0 [\"Process Lifecycle\"]\n    Start\n    Launch\n    Render\n    Generate\n    Cleanup\n    End\n    Start --&gt; Launch\n    Launch --&gt; Render\n    Render --&gt; Generate\n    Generate --&gt; Cleanup\n    Cleanup --&gt; End\nend</code></pre> <p>Characteristics:</p> <ul> <li>Memory intensive: Each browser instance consumes 100-200MB</li> <li>CPU bound: Rendering complex HTML is computationally expensive</li> <li>Slow cold start: First request may take 5-10 seconds (browser initialization)</li> <li>Concurrent limit: Server memory limits concurrent PDF generations</li> <li>Cleanup critical: Browser instances must be closed to prevent memory leaks</li> </ul> <p>Sources: src/router.js L328-L342</p>"},{"location":"Puppeteer-PDF-Generation.html#optimization-strategies","title":"Optimization Strategies","text":"<p>For production deployments, consider:</p> <ol> <li>Browser pooling: Reuse browser instances across requests</li> <li>Request queuing: Limit concurrent PDF generations</li> <li>Timeout configuration: Set maximum render time</li> <li>Template caching: Cache compiled EJS templates</li> <li>Monitoring: Track browser instance lifecycle</li> </ol>"},{"location":"Puppeteer-PDF-Generation.html#dependencies","title":"Dependencies","text":"<p>The Puppeteer PDF generation relies on the following packages:</p> Package Version Purpose <code>puppeteer</code> <code>^24.14.0</code> Headless Chromium automation <code>ejs</code> <code>^3.1.10</code> Template rendering engine <p>Sources: package-lock.json L28</p> <p>package-lock.json L16</p>"},{"location":"Puppeteer-PDF-Generation.html#comparison-with-pdfkit-approach","title":"Comparison with PDFKit Approach","text":"<p>While both routes generate product PDFs, they use fundamentally different approaches:</p> Aspect Puppeteer (<code>/pdf/descargar</code>) PDFKit (<code>/pdfkit/descargar</code>) Rendering HTML/CSS in browser Programmatic drawing commands Template <code>views/pdfTabla.ejs</code> None (code-based layout) Memory ~200MB per request ~10MB per request Speed 2-5 seconds &lt;1 second Complexity Easy (HTML/CSS skills) Hard (positioning calculations) Layout Automatic (browser engine) Manual (coordinate system) Styling Full CSS support Limited (fonts, colors, lines) Dependencies Requires Chromium binary Pure Node.js <p>When to use Puppeteer:</p> <ul> <li>Complex layouts with CSS grid/flexbox</li> <li>Need for HTML entities and rich text formatting</li> <li>Existing HTML templates to reuse</li> <li>Design flexibility is priority over performance</li> </ul> <p>When to use PDFKit:</p> <ul> <li>High-volume PDF generation</li> <li>Resource-constrained environments</li> <li>Programmatic control over exact positioning</li> <li>Fast generation time is critical</li> </ul> <p>Sources: src/router.js L317-L353</p> <p>src/router.js L355-L396</p>"},{"location":"Puppeteer-PDF-Generation.html#integration-with-authentication-system","title":"Integration with Authentication System","text":"<p>The Puppeteer PDF route is protected by the <code>verifyToken</code> middleware:</p> <pre><code>flowchart TD\n\nRequest[\"Client Request&lt;br&gt;GET /pdf/descargar\"]\nCookie[\"Cookie Parser&lt;br&gt;Extract 'token'\"]\nVerify[\"verifyToken Middleware&lt;br&gt;JWT validation\"]\nDecode[\"Decode Payload&lt;br&gt;user, name, rol\"]\nAttach[\"Attach req.user\"]\nHandler[\"PDF Handler&lt;br&gt;Generate PDF\"]\nReject[\"401 Unauthorized\"]\nResponse[\"PDF Download\"]\n\nRequest --&gt; Cookie\nCookie --&gt; Verify\nVerify --&gt; Reject\nVerify --&gt; Decode\nDecode --&gt; Attach\nAttach --&gt; Handler\nHandler --&gt; Response</code></pre> <p>Authentication flow:</p> <ol> <li>Client must have valid JWT in <code>token</code> cookie</li> <li><code>verifyToken</code> middleware validates JWT signature and expiration</li> <li>User information is attached to <code>req.user</code> object</li> <li>Handler proceeds only if authentication succeeds</li> </ol> <p>While <code>req.user</code> is available to the handler, the current implementation at src/router.js L317-L353</p> <p>does not use user information for filtering or personalization. All authenticated users receive the complete product catalog.</p> <p>Sources: src/router.js L317</p> <p>src/middlewares/verifyToken.js</p>"},{"location":"Puppeteer-PDF-Generation.html#template-reference","title":"Template Reference","text":"<p>The Puppeteer route renders the <code>views/pdfTabla.ejs</code> template. This template:</p> <ul> <li>Receives a <code>productos</code> array containing all products from the database</li> <li>Renders an HTML table with product information</li> <li>Includes CSS styling for print optimization</li> <li>Is also accessible via the <code>/pdfAdmin</code> route for browser preview</li> </ul> <p>Template data structure:</p> <pre><code>{\n    productos: [\n        {\n            ref: Number,      // Product reference ID\n            nombre: String,   // Product name\n            precio: Decimal,  // Product price\n            stock: Number     // Stock quantity\n        }\n        // ... more products\n    ]\n}\n</code></pre> <p>The same template serves dual purposes:</p> <ol> <li>Browser preview: Rendered directly at <code>/pdfAdmin</code> route</li> <li>PDF generation: Rendered to string, then converted by Puppeteer</li> </ol> <p>Sources: src/router.js L324-L326</p> <p>src/router.js L136-L151</p>"},{"location":"Puppeteer-PDF-Generation.html#code-entity-reference","title":"Code Entity Reference","text":""},{"location":"Puppeteer-PDF-Generation.html#key-functions-and-methods","title":"Key Functions and Methods","text":"Entity Type Location Purpose <code>GET /pdf/descargar</code> Route src/router.js L317 Main PDF generation endpoint <code>verifyToken</code> Middleware src/router.js L317 JWT authentication guard <code>db.query()</code> Function src/router.js L318 MySQL query executor <code>ejs.renderFile()</code> Function src/router.js L324 Template renderer <code>puppeteer.launch()</code> Function src/router.js L328 Browser launcher <code>browser.newPage()</code> Method src/router.js L333 Page creator <code>page.setContent()</code> Method src/router.js L334 HTML loader <code>page.pdf()</code> Method src/router.js L336 PDF generator <code>browser.close()</code> Method src/router.js L342 Cleanup method"},{"location":"Puppeteer-PDF-Generation.html#configuration-values","title":"Configuration Values","text":"Constant Value Location Template path <code>\"../views/pdfTabla.ejs\"</code> src/router.js L324 Headless mode <code>true</code> src/router.js L329 PDF format <code>\"A4\"</code> src/router.js L337 Filename <code>\"productos.pdf\"</code> src/router.js L345 Wait condition <code>\"networkidle0\"</code> src/router.js L334 <p>Sources: src/router.js L317-L353</p>"},{"location":"Real-time-Communication-System.html","title":"Real-time Communication System","text":"<p>Relevant source files * index.js * src/sockets/socketHandler.js * views/soporte.ejs</p>"},{"location":"Real-time-Communication-System.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the Socket.IO-based real-time communication system that enables bidirectional messaging between users and administrators. The system implements a support chat feature with WebSocket connections, JWT-based authentication, room-based message routing, and database persistence.</p> <p>For information about the HTTP API endpoints that complement this system, see API Endpoints. For the user interface implementation, see Support Chat System.</p> <p>Sources: index.js, src/sockets/socketHandler.js, views/soporte.ejs</p>"},{"location":"Real-time-Communication-System.html#system-architecture","title":"System Architecture","text":"<p>The real-time communication system consists of three primary components:</p> Component File Responsibility Socket.IO Server index.js:9-12 HTTP server creation and Socket.IO attachment Socket Handler src/sockets/socketHandler.js WebSocket authentication, connection management, event handling Client Interface views/soporte.ejs:37-189 Browser-side Socket.IO client and UI logic <p>The system uses a dual-channel architecture where WebSocket connections handle real-time message delivery while HTTP endpoints provide historical message retrieval.</p> <p>Sources: index.js, src/sockets/socketHandler.js</p>"},{"location":"Real-time-Communication-System.html#socketio-server-initialization","title":"Socket.IO Server Initialization","text":"<pre><code>flowchart TD\n\nA[\"http.createServer(app)\"]\nB[\"socketIO(server)\"]\nC[\"setupSocket(io)\"]\nD[\"io.use(authMiddleware)\"]\nE[\"io.on('connection', handler)\"]\nF[\"server.listen(3000)\"]\nG[\"Express App\"]\nH[\"src/sockets/socketHandler.js\"]\nI[\"JWT Authentication\"]\nJ[\"Event Handlers\"]\nK[\"Room Management\"]\n\nA --&gt; B\nB --&gt; C\nC --&gt; D\nD --&gt; E\nE --&gt; F\nG --&gt; A\nH --&gt; C\nI --&gt; D\nJ --&gt; E\nK --&gt; E</code></pre> <p>Diagram: Socket.IO Server Initialization Flow</p> <p>The Socket.IO server is initialized in index.js L8-L12</p> <p>by creating an HTTP server from the Express application and attaching Socket.IO to it. The <code>setupSocket</code> function from src/sockets/socketHandler.js</p> <p>is called at index.js L57</p> <p>to configure authentication middleware and event handlers before the server starts listening.</p> <p>Sources: index.js:8-12, index.js:57</p>"},{"location":"Real-time-Communication-System.html#websocket-authentication","title":"WebSocket Authentication","text":""},{"location":"Real-time-Communication-System.html#authentication-middleware","title":"Authentication Middleware","text":"<p>The Socket.IO server implements authentication using JWT tokens stored in HTTP-only cookies. The authentication occurs at the connection level, not per-message.</p> <pre><code>sequenceDiagram\n  participant Client\n  participant Socket.IO Server\n  participant io.use middleware\n  participant jwt.verify\n\n  Client-&gt;&gt;Socket.IO Server: WebSocket connection request\n  Socket.IO Server-&gt;&gt;io.use middleware: Invoke authentication\n  io.use middleware-&gt;&gt;io.use middleware: Extract cookies from headers\n  loop [Invalid token]\n    io.use middleware-&gt;&gt;Client: Error: \"No autenticado\"\n    io.use middleware-&gt;&gt;io.use middleware: Extract token from cookie\n    io.use middleware-&gt;&gt;Client: Error: \"Token no proporcionado\"\n    io.use middleware-&gt;&gt;jwt.verify: jwt.verify(token, JWT_SECRET)\n    jwt.verify-&gt;&gt;io.use middleware: Error\n    io.use middleware-&gt;&gt;Client: Error: \"Token inv\u00e1lido\"\n    jwt.verify-&gt;&gt;io.use middleware: decoded payload\n    io.use middleware-&gt;&gt;io.use middleware: Attach user to request\n    io.use middleware-&gt;&gt;Socket.IO Server: next()\n    Socket.IO Server-&gt;&gt;Client: Connection established\n  end</code></pre> <p>Diagram: WebSocket Authentication Sequence</p> <p>The authentication middleware is registered at src/sockets/socketHandler.js L6-L32</p> <p>It extracts the JWT token from the <code>cookie</code> header using regex matching at src/sockets/socketHandler.js L16</p> <p>verifies it using <code>jwt.verify</code> at src/sockets/socketHandler.js L25</p> <p>and attaches the decoded user information to <code>socket.request.user</code> at src/sockets/socketHandler.js L26</p> <p>Key Implementation Details:</p> Aspect Implementation Location Cookie Extraction Regex pattern <code>/token=([^;]+)/</code> src/sockets/socketHandler.js L16 Token Verification <code>jwt.verify(token, process.env.JWT_SECRET)</code> src/sockets/socketHandler.js L25 User Attachment <code>req.user = decoded</code> src/sockets/socketHandler.js L26 Error Handling Returns <code>Error</code> object to reject connection src/sockets/socketHandler.js L12-L30 <p>Sources: src/sockets/socketHandler.js:6-32</p>"},{"location":"Real-time-Communication-System.html#room-management-strategy","title":"Room Management Strategy","text":""},{"location":"Real-time-Communication-System.html#room-types-and-assignment","title":"Room Types and Assignment","text":"<p>The system implements a sophisticated room-based routing strategy using Socket.IO rooms for targeted message delivery.</p> <pre><code>flowchart TD\n\nConnect[\"io.on('connection')\"]\nExtract[\"Extract user, name, rol from socket.request.user\"]\nPersonal[\"socket.join('user:' + username)\"]\nAdminCheck[\"rol === 'admin'?\"]\nAdminRoom[\"socket.join('admins')\"]\nR1[\"user:alice&lt;br&gt;Members: alice\"]\nR2[\"user:bob&lt;br&gt;Members: bob\"]\nR3[\"user:admin1&lt;br&gt;Members: admin1\"]\nR4[\"admins&lt;br&gt;Members: admin1, admin2, admin3\"]\nEnd[\"End\"]\n\nExtract --&gt; Personal\nAdminCheck --&gt; End\nAdminRoom --&gt; End\nPersonal --&gt; R1\nPersonal --&gt; R2\nPersonal --&gt; R3\nAdminRoom --&gt; R4\n\nsubgraph subGraph2 [\"Room Structure\"]\n    R1\n    R2\n    R3\n    R4\nend\n\nsubgraph subGraph1 [\"Room Assignment Logic\"]\n    Personal\n    AdminCheck\n    AdminRoom\n    Personal --&gt; AdminCheck\n    AdminCheck --&gt; AdminRoom\nend\n\nsubgraph subGraph0 [\"Connection Handler\"]\n    Connect\n    Extract\n    Connect --&gt; Extract\nend</code></pre> <p>Diagram: Room Assignment Strategy</p> <p>Every authenticated user is assigned to a personal room named <code>user:{username}</code> at src/sockets/socketHandler.js L42</p> <p>If the user has the <code>admin</code> role, they additionally join the <code>admins</code> room at src/sockets/socketHandler.js L43</p> <p>This dual-room membership for admins enables the message broadcasting pattern described below.</p> <p>Room Naming Conventions:</p> Room Pattern Example Purpose <code>user:{username}</code> <code>user:alice</code> Direct messages to specific user <code>admins</code> <code>admins</code> Broadcast to all online administrators <p>Sources: src/sockets/socketHandler.js:36-43</p>"},{"location":"Real-time-Communication-System.html#message-event-handling","title":"Message Event Handling","text":""},{"location":"Real-time-Communication-System.html#event-mensaje_privado","title":"Event: mensaje_privado","text":"<p>The <code>mensaje_privado</code> event handles sending messages between users. The routing logic differs based on sender role.</p> <pre><code>flowchart TD\n\nClient[\"Client emits mensaje_privado&lt;br&gt;{para, mensaje}\"]\nHandler[\"Event handler receives event\"]\nExtract[\"de = socket.request.user.user\"]\nSendRecipient[\"io.to('user:' + para).emit('mensaje_recibido')\"]\nCheckRole[\"sender rol !== 'admin'?\"]\nSendAdmins[\"io.to('admins').emit('mensaje_recibido')\"]\nPersist[\"INSERT INTO mensajes&lt;br&gt;(de_usuario, para_usuario, mensaje)\"]\nDone[\"Done\"]\nRoom1[\"user:recipient room\"]\nRoom2[\"admins room\"]\n\nClient --&gt; Handler\nHandler --&gt; Extract\nExtract --&gt; SendRecipient\nSendRecipient --&gt; CheckRole\nCheckRole --&gt; SendAdmins\nCheckRole --&gt; Persist\nSendAdmins --&gt; Persist\nPersist --&gt; Done\nSendRecipient --&gt; Room1\nSendAdmins --&gt; Room2</code></pre> <p>Diagram: mensaje_privado Event Routing Logic</p> <p>The event handler at src/sockets/socketHandler.js L45-L63</p> <p>implements the following logic:</p> <ol> <li>Extract sender: The sender username is extracted from <code>socket.request.user.user</code> at src/sockets/socketHandler.js L46</li> <li>Direct delivery: Message is emitted to the recipient's personal room at src/sockets/socketHandler.js L48</li> <li>Admin notification: If sender is not admin, message is also broadcast to all admins at src/sockets/socketHandler.js L50-L52</li> <li>Persistence: Message is stored in the <code>mensajes</code> table at src/sockets/socketHandler.js L55-L62</li> </ol> <p>Event Payload Structures:</p> Event Direction Payload Example <code>mensaje_privado</code> Client \u2192 Server <code>{para: string, mensaje: string}</code> <code>{para: \"admin\", mensaje: \"Hello\"}</code> <code>mensaje_recibido</code> Server \u2192 Client <code>{de: string, mensaje: string}</code> <code>{de: \"alice\", mensaje: \"Hello\"}</code> <p>Sources: src/sockets/socketHandler.js:45-63</p>"},{"location":"Real-time-Communication-System.html#event-disconnect","title":"Event: disconnect","text":"<p>The <code>disconnect</code> event is handled at src/sockets/socketHandler.js L65-L67</p> <p>and logs the disconnection. Socket.IO automatically removes the socket from all rooms upon disconnection.</p> <p>Sources: src/sockets/socketHandler.js:65-67</p>"},{"location":"Real-time-Communication-System.html#database-persistence","title":"Database Persistence","text":""},{"location":"Real-time-Communication-System.html#message-storage-schema","title":"Message Storage Schema","text":"<p>All messages are persisted to the <code>mensajes</code> table for historical retrieval via HTTP endpoints.</p> <pre><code>#mermaid-a19z30qjfth{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-a19z30qjfth .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-a19z30qjfth .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-a19z30qjfth .error-icon{fill:#dddddd;}#mermaid-a19z30qjfth .error-text{fill:#222222;stroke:#222222;}#mermaid-a19z30qjfth .edge-thickness-normal{stroke-width:1px;}#mermaid-a19z30qjfth .edge-thickness-thick{stroke-width:3.5px;}#mermaid-a19z30qjfth .edge-pattern-solid{stroke-dasharray:0;}#mermaid-a19z30qjfth .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-a19z30qjfth .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-a19z30qjfth .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-a19z30qjfth .marker{fill:#999;stroke:#999;}#mermaid-a19z30qjfth .marker.cross{stroke:#999;}#mermaid-a19z30qjfth svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-a19z30qjfth p{margin:0;}#mermaid-a19z30qjfth .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-a19z30qjfth .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-a19z30qjfth .relationshipLabelBox rect{opacity:0.5;}#mermaid-a19z30qjfth .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-a19z30qjfth .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-a19z30qjfth .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-a19z30qjfth .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-a19z30qjfth .node rect,#mermaid-a19z30qjfth .node circle,#mermaid-a19z30qjfth .node ellipse,#mermaid-a19z30qjfth .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-a19z30qjfth .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-a19z30qjfth .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-a19z30qjfth :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}de_usuario referencespara_usuario referencesmensajesvarcharde_usuarioFKvarcharpara_usuarioFKtextmensajedatetimefechausuariosvarcharusuarioPKvarcharnombrevarcharrol\n</code></pre> <p>Diagram: Message Persistence Data Model</p> <p>The SQL insertion occurs at src/sockets/socketHandler.js L55-L62</p> <p>with the query:</p> <pre><code>INSERT INTO mensajes (de_usuario, para_usuario, mensaje) VALUES (?, ?, ?)\n</code></pre> <p>The <code>fecha</code> column uses a database default timestamp. Error handling logs failures but does not reject the WebSocket event.</p> <p>Sources: src/sockets/socketHandler.js:55-62</p>"},{"location":"Real-time-Communication-System.html#client-side-implementation","title":"Client-Side Implementation","text":""},{"location":"Real-time-Communication-System.html#socketio-client-initialization","title":"Socket.IO Client Initialization","text":"<p>The client-side Socket.IO library is loaded at views/soporte.ejs L37</p> <p>and initialized at views/soporte.ejs L39</p> <p>:</p> <pre><code>const socket = io();\n</code></pre> <p>This establishes a WebSocket connection to the server with automatic authentication via cookies.</p> <p>Sources: views/soporte.ejs:37-39</p>"},{"location":"Real-time-Communication-System.html#admin-interface-logic","title":"Admin Interface Logic","text":"<p>Administrators have access to a multi-conversation interface with user list and conversation switching.</p> <pre><code>flowchart TD\n\nConversationsObj[\"conversaciones = {}&lt;br&gt;Stores message arrays per user\"]\nCurrentUser[\"usuarioActual&lt;br&gt;Hidden input field\"]\nUserList[\"lista-usuarios&lt;br&gt;UL element\"]\nFetchUsers[\"GET /api/usuarios-conversaciones\"]\nPopulateList[\"agregarUsuarioLista() for each\"]\nLoadHistory[\"cargarHistorial() for each\"]\nRecvMsg[\"socket.on('mensaje_recibido')\"]\nSendMsg[\"formulario.submit\"]\nSwitchUser[\"li.click in user list\"]\nRenderConv[\"renderConversacion(usuario)&lt;br&gt;Clears and repopulates chat\"]\nAddMsg[\"agregarMensaje(de, mensaje, fecha)\"]\n\nLoadHistory --&gt; ConversationsObj\nRecvMsg --&gt; ConversationsObj\nRecvMsg --&gt; RenderConv\nSendMsg --&gt; ConversationsObj\nSendMsg --&gt; RenderConv\nSwitchUser --&gt; RenderConv\n\nsubgraph subGraph3 [\"Display Functions\"]\n    RenderConv\n    AddMsg\n    RenderConv --&gt; AddMsg\nend\n\nsubgraph subGraph2 [\"Event Handlers\"]\n    RecvMsg\n    SendMsg\n    SwitchUser\nend\n\nsubgraph Initialization [\"Initialization\"]\n    FetchUsers\n    PopulateList\n    LoadHistory\n    FetchUsers --&gt; PopulateList\n    PopulateList --&gt; LoadHistory\nend\n\nsubgraph subGraph0 [\"Admin UI State\"]\n    ConversationsObj\n    CurrentUser\n    UserList\nend</code></pre> <p>Diagram: Admin Chat Interface State Management</p> <p>Key Functions:</p> Function Location Purpose <code>agregarUsuarioLista(usuario)</code> views/soporte.ejs L89-L102 Adds user to sidebar list with click handler <code>cargarHistorial(usuario)</code> views/soporte.ejs L115-L125 Fetches message history from HTTP API <code>renderConversacion(usuario)</code> views/soporte.ejs L69-L86 Clears chat and displays selected conversation <code>agregarMensaje(de, mensaje, fecha)</code> views/soporte.ejs L54-L60 Appends message to chat DOM <p>Visual Notification System:</p> <p>The admin interface implements a visual notification system at views/soporte.ejs L136-L145</p> <p>:</p> <ul> <li>Red + Bold: Indicates unread messages from user not currently selected</li> <li>Green + Bold: Indicates currently active conversation</li> <li>Normal: User with no new messages</li> </ul> <p>Sources: views/soporte.ejs:62-163</p>"},{"location":"Real-time-Communication-System.html#user-interface-logic","title":"User Interface Logic","text":"<p>Regular users have a simplified single-conversation interface that communicates with administrators.</p> <pre><code>sequenceDiagram\n  participant User Client\n  participant GET /api/mensajes/mios\n  participant Socket.IO\n  participant Server\n\n  User Client-&gt;&gt;GET /api/mensajes/mios: Fetch message history\n  GET /api/mensajes/mios-&gt;&gt;User Client: Return all messages\n  User Client-&gt;&gt;User Client: Render messages in chat\n  loop [Real-time updates]\n    User Client-&gt;&gt;Socket.IO: emit('mensaje_privado', {para: 'admin'})\n    Socket.IO-&gt;&gt;Server: Send message\n    Server-&gt;&gt;Socket.IO: emit('mensaje_recibido', {de, mensaje})\n    Socket.IO-&gt;&gt;User Client: Display incoming message\n  end</code></pre> <p>Diagram: User Chat Interface Flow</p> <p>Initialization:</p> <p>The user interface loads message history at views/soporte.ejs L166-L171</p> <p>via HTTP GET to <code>/api/mensajes/mios</code>.</p> <p>Message Sending:</p> <p>Users always send messages to <code>\"admin\"</code> (hardcoded) at views/soporte.ejs L184</p> <p>The server routes these messages to the recipient's personal room and broadcasts to all admins via the <code>admins</code> room.</p> <p>Event Listeners:</p> Event Location Behavior <code>socket.on(\"mensaje_recibido\")</code> views/soporte.ejs L174-L177 Appends incoming message to chat <code>formulario.submit</code> views/soporte.ejs L180-L187 Emits <code>mensaje_privado</code> event <p>Sources: views/soporte.ejs:164-188</p>"},{"location":"Real-time-Communication-System.html#integration-with-http-api","title":"Integration with HTTP API","text":"<p>The real-time system is complemented by HTTP endpoints for historical message retrieval:</p> Endpoint Auth Purpose Used By <code>GET /api/mensajes/mios</code> User Retrieve own message history User interface initialization <code>GET /api/mensajes?con={username}</code> Admin Retrieve conversation with specific user Admin conversation switching <code>GET /api/usuarios-conversaciones</code> Admin List all users with messages Admin user list population <p>These endpoints query the same <code>mensajes</code> table that WebSocket events write to, ensuring consistency between real-time and historical data.</p> <p>Sources: views/soporte.ejs:105-112, views/soporte.ejs:116, views/soporte.ejs:166</p>"},{"location":"Real-time-Communication-System.html#connection-lifecycle","title":"Connection Lifecycle","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Disconnected : \"JWT invalid/missing\"\n    Disconnected --&gt; Authenticating : \"JWT invalid/missing\"\n    Authenticating --&gt; Authenticated : \"JWT valid\"\n    Authenticating --&gt; Disconnected : \"JWT invalid/missing\"\n    Authenticated --&gt; RoomAssignment : \"Auth middleware passes\"\n    RoomAssignment --&gt; Connected : \"Rooms joined\"\n    Connected --&gt; Disconnected : \"disconnect event\"\n    Disconnected --&gt; [*] : \"JWT invalid/missing\"</code></pre> <p>Diagram: WebSocket Connection State Machine</p> <p>The connection lifecycle follows these states:</p> <ol> <li>Disconnected: Initial state before connection</li> <li>Authenticating: JWT validation via middleware src/sockets/socketHandler.js L6-L32</li> <li>Room Assignment: User assigned to rooms src/sockets/socketHandler.js L42-L43</li> <li>Connected: Socket ready for event handling src/sockets/socketHandler.js L45-L67</li> </ol> <p>Connections are automatically cleaned up by Socket.IO on disconnect, removing the socket from all rooms.</p> <p>Sources: src/sockets/socketHandler.js:6-67</p>"},{"location":"Real-time-Communication-System.html#error-handling","title":"Error Handling","text":"<p>The system implements error handling at multiple levels:</p> Error Type Location Handling Strategy Missing cookies src/sockets/socketHandler.js L10-L13 Reject connection with error Missing token src/sockets/socketHandler.js L19-L22 Reject connection with error Invalid token src/sockets/socketHandler.js L28-L31 Reject connection with error Database insertion failure src/sockets/socketHandler.js L57-L61 Log error, continue operation <p>Database insertion errors are logged but do not disrupt the real-time message delivery, ensuring that communication continues even if persistence fails temporarily.</p> <p>Sources: src/sockets/socketHandler.js:10-13, src/sockets/socketHandler.js:19-22, src/sockets/socketHandler.js:28-31, src/sockets/socketHandler.js:57-61</p>"},{"location":"Request-Processing-Pipeline.html","title":"Request Processing Pipeline","text":"<p>Relevant source files * index.js * src/middlewares/verifyToken.js * src/router.js</p>"},{"location":"Request-Processing-Pipeline.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes how incoming requests flow through the application's processing pipeline, from initial receipt to final response. It covers the complete middleware stack for HTTP requests, WebSocket connection establishment, authentication/authorization layers, and response generation mechanisms.</p> <p>For information about specific route definitions and handlers, see Routing System. For authentication implementation details, see Authentication &amp; Authorization. For WebSocket event handling after connection is established, see Real-time Communication System.</p>"},{"location":"Request-Processing-Pipeline.html#overview-of-request-flow","title":"Overview of Request Flow","text":"<p>The application handles two distinct types of incoming connections: HTTP/HTTPS requests and WebSocket connections. Both share some common processing steps but diverge in their pipeline structure.</p> <pre><code>flowchart TD\n\nIncoming[\"Incoming Connection\"]\nProtocolCheck[\"Protocol Type\"]\nStaticCheck[\"Static Asset?\"]\nWSAuth[\"Socket.IO Authentication\"]\nServeStatic[\"Direct File Serve\"]\nMiddlewareChain[\"Middleware Chain\"]\nMW1[\"helmet\"]\nMW2[\"express-rate-limit\"]\nMW3[\"cookie-parser\"]\nMW4[\"express.urlencoded + express.json\"]\nMW5[\"express-session\"]\nMW6[\"i18n.init\"]\nMW7[\"setGlobals\"]\nRouterLayer[\"Router Layer\"]\nRouteMatch[\"Route Found?\"]\nNotFound[\"404 Response\"]\nAuthCheck[\"Auth Required?\"]\nHandler[\"Route Handler\"]\nTokenMW[\"verifyToken Middleware\"]\nAdminMW[\"verifyAdmin Middleware\"]\nUnauthorized[\"401 Unauthorized\"]\nForbidden[\"403 Forbidden\"]\nResponseType[\"Response Type\"]\nEJSRender[\"EJS Template Render\"]\nJSONResponse[\"JSON Response\"]\nPDFGen[\"PDF Generation\"]\nHTTPRedirect[\"HTTP Redirect\"]\nWSConnect[\"Establish Connection\"]\nWSReject[\"Connection Rejected\"]\nWSRooms[\"Assign to Rooms\"]\nEnd[\"Send Response\"]\nWSEventLoop[\"Event Loop Active\"]\n\nIncoming --&gt; ProtocolCheck\nProtocolCheck --&gt; StaticCheck\nProtocolCheck --&gt; WSAuth\nStaticCheck --&gt; ServeStatic\nStaticCheck --&gt; MiddlewareChain\nMiddlewareChain --&gt; MW1\nMW1 --&gt; MW2\nMW2 --&gt; MW3\nMW3 --&gt; MW4\nMW4 --&gt; MW5\nMW5 --&gt; MW6\nMW6 --&gt; MW7\nMW7 --&gt; RouterLayer\nRouterLayer --&gt; RouteMatch\nRouteMatch --&gt; NotFound\nRouteMatch --&gt; AuthCheck\nAuthCheck --&gt; Handler\nAuthCheck --&gt; TokenMW\nAuthCheck --&gt; AdminMW\nTokenMW --&gt; Handler\nTokenMW --&gt; Unauthorized\nAdminMW --&gt; Handler\nAdminMW --&gt; Forbidden\nHandler --&gt; ResponseType\nResponseType --&gt; EJSRender\nResponseType --&gt; JSONResponse\nResponseType --&gt; PDFGen\nResponseType --&gt; HTTPRedirect\nWSAuth --&gt; WSConnect\nWSAuth --&gt; WSReject\nWSConnect --&gt; WSRooms\nServeStatic --&gt; End\nEJSRender --&gt; End\nJSONResponse --&gt; End\nPDFGen --&gt; End\nHTTPRedirect --&gt; End\nNotFound --&gt; End\nUnauthorized --&gt; End\nForbidden --&gt; End\nWSReject --&gt; End\nWSRooms --&gt; WSEventLoop</code></pre> <p>Sources: index.js L1-L86</p> <p>src/router.js L1-L608</p>"},{"location":"Request-Processing-Pipeline.html#http-middleware-stack","title":"HTTP Middleware Stack","text":"<p>The HTTP request pipeline processes requests through a series of middleware functions before reaching route handlers. Each middleware layer is registered in the application bootstrap file and executes in a specific order.</p>"},{"location":"Request-Processing-Pipeline.html#middleware-execution-order","title":"Middleware Execution Order","text":"Order Middleware Purpose Configuration Location 1 <code>express.urlencoded</code> Parse URL-encoded request bodies index.js L41 2 <code>express.json</code> Parse JSON request bodies index.js L42 3 Static file server Serve files from <code>/public</code> directory index.js L43 4 <code>swaggerUi.serve</code> Serve Swagger documentation UI index.js L44 5 <code>securityMiddleware</code> Helmet + rate limiting + security headers index.js L45 6 <code>i18n.init</code> Initialize internationalization index.js L46 7 <code>setGlobals</code> Set global template variables index.js L47 8 Router Match routes and dispatch to handlers index.js L48 <p>Sources: index.js L36-L48</p>"},{"location":"Request-Processing-Pipeline.html#body-parsing-layer","title":"Body Parsing Layer","text":"<p>The first processing stage handles request body parsing. Two parsers are configured:</p> <pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nURLCheck[\"Content-Type?\"]\nURLParser[\"express.urlencoded&lt;br&gt;extended: true\"]\nJSONParser[\"express.json\"]\nContinue[\"Continue to next middleware\"]\nPopulateBody[\"req.body populated&lt;br&gt;with form data\"]\nNextMiddleware[\"Next Middleware\"]\n\nRequest --&gt; URLCheck\nURLCheck --&gt; URLParser\nURLCheck --&gt; JSONParser\nURLCheck --&gt; Continue\nURLParser --&gt; PopulateBody\nJSONParser --&gt; PopulateBody\nPopulateBody --&gt; NextMiddleware\nContinue --&gt; NextMiddleware</code></pre> <p>The <code>extended: true</code> option in <code>express.urlencoded</code> allows parsing of rich objects and arrays encoded in URL format. This is used by form submissions throughout the application, including the login form at src/router.js L532-L601</p> <p>and registration form at src/router.js L414-L484</p> <p>Sources: index.js L41-L42</p>"},{"location":"Request-Processing-Pipeline.html#cookie-parsing-layer","title":"Cookie Parsing Layer","text":"<p>Cookie parsing is initialized before the middleware chain to make cookies available to all subsequent middleware:</p> <ul> <li>Middleware: <code>cookie-parser</code> registered at index.js L37</li> <li>Purpose: Parses the <code>Cookie</code> header and populates <code>req.cookies</code> object</li> <li>Critical for: JWT token retrieval (<code>req.cookies.token</code>), language preference (<code>req.cookies.lang</code>)</li> <li>Used by: <code>verifyToken</code> middleware at src/middlewares/verifyToken.js L4  homepage route at src/router.js L61  language system</li> </ul> <p>Sources: index.js L37</p> <p>src/middlewares/verifyToken.js L1-L18</p>"},{"location":"Request-Processing-Pipeline.html#security-middleware-layer","title":"Security Middleware Layer","text":"<p>The security middleware is implemented in a separate module and includes multiple protection mechanisms:</p> <pre><code>flowchart TD\n\nIncomingReq[\"HTTP Request\"]\nSecurityMW[\"securityMiddleware\"]\nHelmet[\"helmet&lt;br&gt;Security Headers\"]\nRateLimit[\"express-rate-limit&lt;br&gt;Global Rate Limiter\"]\nCSRFCheck[\"CSRF Protection&lt;br&gt;(if configured)\"]\nInputVal[\"Input Validation&lt;br&gt;express-validator\"]\nSecurityOK[\"Security Checks Passed\"]\nBlockedHelmet[\"Insecure Request\"]\nBlockedRate[\"429 Too Many Requests\"]\nBlockedCSRF[\"403 Invalid CSRF Token\"]\nBlockedVal[\"400 Validation Error\"]\nNextMW[\"Continue to i18n\"]\n\nIncomingReq --&gt; SecurityMW\nSecurityMW --&gt; Helmet\nHelmet --&gt; RateLimit\nRateLimit --&gt; CSRFCheck\nCSRFCheck --&gt; InputVal\nInputVal --&gt; SecurityOK\nHelmet --&gt; BlockedHelmet\nRateLimit --&gt; BlockedRate\nCSRFCheck --&gt; BlockedCSRF\nInputVal --&gt; BlockedVal\nSecurityOK --&gt; NextMW</code></pre> <p>The module is loaded at index.js L15</p> <p>and registered at index.js L45</p> <p>Additional route-specific rate limiting is applied to the authentication endpoint using the <code>limiter</code> middleware at src/router.js L21</p> <p>and applied at src/router.js L532</p> <p>Sources: index.js L15</p> <p>index.js L45</p> <p>src/router.js L21</p> <p>src/router.js L532</p>"},{"location":"Request-Processing-Pipeline.html#internationalization-layer","title":"Internationalization Layer","text":"<p>The i18n middleware handles language detection and translation:</p> <pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nI18nInit[\"i18n.init\"]\nCheckCookie[\"Check 'lang' cookie\"]\nUseCookie[\"Set locale from cookie\"]\nCheckQuery[\"Check ?lang= param\"]\nUseQuery[\"Set locale from query\"]\nUseDefault[\"Use defaultLocale: 'es'\"]\nSetLocale[\"Set req.locale\"]\nMakeHelpers[\"Create req.__()&lt;br&gt;and req.__n() helpers\"]\nNextMW[\"Continue to setGlobals\"]\n\nRequest --&gt; I18nInit\nI18nInit --&gt; CheckCookie\nCheckCookie --&gt; UseCookie\nCheckCookie --&gt; CheckQuery\nCheckQuery --&gt; UseQuery\nCheckQuery --&gt; UseDefault\nUseCookie --&gt; SetLocale\nUseQuery --&gt; SetLocale\nUseDefault --&gt; SetLocale\nSetLocale --&gt; MakeHelpers\nMakeHelpers --&gt; NextMW</code></pre> <p>Configuration is at index.js L23-L31</p> <p>with these settings:</p> <ul> <li>Locales: <code>en</code>, <code>es</code></li> <li>Directory: <code>locales/</code> (JSON files)</li> <li>Default: Spanish (<code>es</code>)</li> <li>Cookie name: <code>lang</code></li> <li>Query parameter: <code>lang</code></li> </ul> <p>Language switching is handled by the <code>/set-lang/:lang</code> route at src/router.js L398-L407</p> <p>which sets the language cookie and redirects back.</p> <p>Sources: index.js L23-L31</p> <p>index.js L46</p> <p>src/router.js L398-L407</p>"},{"location":"Request-Processing-Pipeline.html#global-variables-middleware","title":"Global Variables Middleware","text":"<p>The <code>setGlobals</code> middleware injects global variables into all view templates:</p> <ul> <li>Location: index.js L18  (import), index.js L47  (registration)</li> <li>Purpose: Make common data available to all EJS templates without passing explicitly</li> <li>Typical variables: Current user, application settings, i18n helpers, environment flags</li> </ul> <p>Sources: index.js L18</p> <p>index.js L47</p>"},{"location":"Request-Processing-Pipeline.html#route-matching-and-authentication","title":"Route Matching and Authentication","text":"<p>After passing through the middleware chain, requests reach the router layer where routes are matched and authentication is enforced.</p>"},{"location":"Request-Processing-Pipeline.html#route-registration-pattern","title":"Route Registration Pattern","text":"<p>Routes are defined in the router module and exported for use by the application:</p> <pre><code>flowchart TD\n\nRouterModule[\"src/router.js\"]\nDefineRoutes[\"Define Route Handlers\"]\nPublicRoutes[\"Public Routes&lt;br&gt;router.get('/')&lt;br&gt;router.get('/login')&lt;br&gt;router.get('/registro')\"]\nUserRoutes[\"User Routes&lt;br&gt;verifyToken required\"]\nAdminRoutes[\"Admin Routes&lt;br&gt;verifyToken + verifyAdmin\"]\nNoAuth[\"No middleware&lt;br&gt;Direct handler\"]\nVerifyTokenMW[\"verifyToken&lt;br&gt;middleware\"]\nVerifyAdminMW[\"verifyAdmin&lt;br&gt;middleware&lt;br&gt;(includes verifyToken)\"]\nHandler[\"Route Handler&lt;br&gt;Function\"]\nExport[\"module.exports = router\"]\nIndexJS[\"index.js\"]\nMount[\"app.use('/', router)\"]\n\nRouterModule --&gt; DefineRoutes\nDefineRoutes --&gt; PublicRoutes\nDefineRoutes --&gt; UserRoutes\nDefineRoutes --&gt; AdminRoutes\nPublicRoutes --&gt; NoAuth\nUserRoutes --&gt; VerifyTokenMW\nAdminRoutes --&gt; VerifyAdminMW\nNoAuth --&gt; Handler\nVerifyTokenMW --&gt; Handler\nVerifyAdminMW --&gt; Handler\nRouterModule --&gt; Export\nExport --&gt; IndexJS\nIndexJS --&gt; Mount</code></pre> <p>Sources: src/router.js L1-L608</p> <p>index.js L48</p>"},{"location":"Request-Processing-Pipeline.html#authentication-middleware-hierarchy","title":"Authentication Middleware Hierarchy","text":"<p>The application implements a two-tier authentication system:</p>"},{"location":"Request-Processing-Pipeline.html#tier-1-verifytoken","title":"Tier 1: verifyToken","text":"<p>Located at src/middlewares/verifyToken.js L1-L18</p> <p>this middleware:</p> <ol> <li>Extracts JWT from <code>req.cookies.token</code> at src/middlewares/verifyToken.js L4</li> <li>Returns <code>401 No autenticado</code> if token is missing at src/middlewares/verifyToken.js L6</li> <li>Verifies token signature using <code>jwt.verify()</code> at src/middlewares/verifyToken.js L9</li> <li>Decodes payload and attaches to <code>req.user</code> at src/middlewares/verifyToken.js L10</li> <li>Returns <code>403 Token inv\u00e1lido</code> if verification fails at src/middlewares/verifyToken.js L13</li> <li>Calls <code>next()</code> to continue to route handler at src/middlewares/verifyToken.js L11</li> </ol> <p>Payload structure in req.user:</p> <pre><code>{\n  user: string,    // Username (from usuarios.usuario)\n  name: string,    // Display name (from usuarios.nombre)\n  rol: string,     // Role: 'admin' or 'user'\n  imagen: string   // Profile image filename\n}\n</code></pre>"},{"location":"Request-Processing-Pipeline.html#tier-2-verifyadmin","title":"Tier 2: verifyAdmin","text":"<p>Located at src/middlewares/verifyAdmin.js</p> <p>this middleware:</p> <ol> <li>Assumes <code>verifyToken</code> has already run and populated <code>req.user</code></li> <li>Checks if <code>req.user.rol === 'admin'</code></li> <li>Returns <code>403 Acceso denegado</code> if user is not an admin</li> <li>Calls <code>next()</code> if user is admin</li> </ol> <p>Sources: src/middlewares/verifyToken.js L1-L18</p> <p>src/router.js L16-L17</p>"},{"location":"Request-Processing-Pipeline.html#route-authentication-examples","title":"Route Authentication Examples","text":"Route Path Middleware File Location Homepage <code>GET /</code> None src/router.js L59-L74 Login page <code>GET /login</code> None src/router.js L75-L77 Admin panel <code>GET /admin</code> <code>verifyToken</code> src/router.js L119-L134 Support chat <code>GET /soporte</code> <code>verifyToken</code> src/router.js L220-L227 Get messages (admin) <code>GET /api/mensajes</code> <code>verifyAdmin</code> src/router.js L229-L253 Get user list <code>GET /api/usuarios-conversaciones</code> <code>verifyAdmin</code> src/router.js L283-L315 PDF download <code>GET /pdf/descargar</code> <code>verifyToken</code> src/router.js L317-L353 Login POST <code>POST /auth</code> <code>limiter</code> (rate limit) src/router.js L532-L601 <p>Sources: src/router.js L59-L601</p>"},{"location":"Request-Processing-Pipeline.html#request-handler-dispatch","title":"Request Handler Dispatch","text":"<p>Once a route is matched and authentication passes, the request is dispatched to the appropriate handler. Handlers can be inline functions or imported controllers.</p>"},{"location":"Request-Processing-Pipeline.html#handler-types-by-response-format","title":"Handler Types by Response Format","text":"<pre><code>flowchart TD\n\nHandler[\"Route Handler Invoked\"]\nCheckType[\"Response Type\"]\nResRender[\"res.render()\"]\nResJSON[\"res.json()\"]\nResRedirect[\"res.redirect()\"]\nResPDF[\"res.send(pdfBuffer)\"]\nResDownload[\"res.download()\"]\nEJSEngine[\"EJS Template Engine\"]\nCompileEJS[\"Compile Template\"]\nInjectData[\"Inject res.render() data\"]\nApplyLayout[\"Apply layout.ejs\"]\nSendHTML[\"Send HTML Response\"]\nSerializeJSON[\"Serialize to JSON\"]\nSetContentType[\"Content-Type:&lt;br&gt;application/json\"]\nSendJSON[\"Send JSON Response\"]\nSetLocation[\"Set Location header\"]\nSend302[\"Send 302 Response\"]\nSetPDFHeaders[\"Content-Type: application/pdf&lt;br&gt;Content-Disposition: attachment\"]\nSendPDF[\"Send PDF Buffer\"]\n\nHandler --&gt; CheckType\nCheckType --&gt; ResRender\nCheckType --&gt; ResJSON\nCheckType --&gt; ResRedirect\nCheckType --&gt; ResPDF\nCheckType --&gt; ResDownload\nResRender --&gt; EJSEngine\nEJSEngine --&gt; CompileEJS\nCompileEJS --&gt; InjectData\nInjectData --&gt; ApplyLayout\nApplyLayout --&gt; SendHTML\nResJSON --&gt; SerializeJSON\nSerializeJSON --&gt; SetContentType\nSetContentType --&gt; SendJSON\nResRedirect --&gt; SetLocation\nSetLocation --&gt; Send302\nResPDF --&gt; SetPDFHeaders\nSetPDFHeaders --&gt; SendPDF</code></pre>"},{"location":"Request-Processing-Pipeline.html#view-rendering-handlers","title":"View Rendering Handlers","text":"<p>Example at src/router.js L119-L134</p> <p>for the <code>/admin</code> route:</p> <pre><code>router.get(\"/admin\", verifyToken, (req, res) =&gt; {\n    db.query(\"SELECT * FROM productos\", (error, results) =&gt; {\n        if (error) {\n            throw error;\n        } else {\n            res.render(\"admin\", {\n                productos: results,\n                user: req.user,\n                login: true,\n                rol: req.user.rol,\n            });\n        }\n    });\n});\n</code></pre> <p>The <code>res.render()</code> call:</p> <ol> <li>Loads the <code>views/admin.ejs</code> template</li> <li>Passes data object as template variables</li> <li>Compiles EJS with data</li> <li>Sends HTML response</li> </ol>"},{"location":"Request-Processing-Pipeline.html#json-api-handlers","title":"JSON API Handlers","text":"<p>Example at src/router.js L256-L280</p> <p>for <code>/api/mensajes/mios</code>:</p> <pre><code>router.get(\"/api/mensajes/mios\", verifyToken, (req, res) =&gt; {\n    const usuario = req.user.user;\n    // ... SQL query ...\n    db.query(sql, [usuario, usuario], (err, results) =&gt; {\n        if (err) {\n            return res.status(500).json({ error: \"Error interno\" });\n        }\n        res.json(results);\n    });\n});\n</code></pre> <p>The <code>res.json()</code> method automatically:</p> <ol> <li>Serializes JavaScript object/array to JSON string</li> <li>Sets <code>Content-Type: application/json</code> header</li> <li>Sends response</li> </ol>"},{"location":"Request-Processing-Pipeline.html#redirect-handlers","title":"Redirect Handlers","text":"<p>Example at src/router.js L215-L218</p> <p>for <code>/logout</code>:</p> <pre><code>router.get(\"/logout\", (req, res) =&gt; {\n    res.clearCookie(\"token\");\n    res.redirect('/');\n});\n</code></pre>"},{"location":"Request-Processing-Pipeline.html#pdf-generation-handlers","title":"PDF Generation Handlers","text":"<p>Two approaches are used:</p> <ol> <li>Puppeteer (HTML-to-PDF) at src/router.js L317-L353 : * Renders EJS template to HTML string * Launches headless Chrome browser * Converts HTML to PDF buffer * Sends buffer with appropriate headers</li> <li>PDFKit (Programmatic) at src/router.js L355-L396 : * Creates <code>PDFDocument</code> instance * Programmatically writes text and graphics * Pipes directly to response stream * More control, less convenient</li> </ol> <p>Sources: src/router.js L119-L396</p>"},{"location":"Request-Processing-Pipeline.html#controller-module-integration","title":"Controller Module Integration","text":"<p>Some routes delegate to controller functions imported from <code>./controllers</code>:</p> <pre><code>const crud = require(\"./controllers\");\n// ...\nrouter.post(\"/save\", crud.save);\nrouter.post(\"/update\", crud.update);\n</code></pre> <p>This pattern separates route definition from business logic. Located at src/router.js L13</p> <p>(import) and src/router.js L603-L604</p> <p>(usage).</p> <p>Sources: src/router.js L13</p> <p>src/router.js L603-L604</p>"},{"location":"Request-Processing-Pipeline.html#websocket-connection-pipeline","title":"WebSocket Connection Pipeline","text":"<p>WebSocket connections follow a different pipeline than HTTP requests, but share the authentication mechanism.</p>"},{"location":"Request-Processing-Pipeline.html#connection-establishment-flow","title":"Connection Establishment Flow","text":"<pre><code>sequenceDiagram\n  participant Socket.IO Client\n  participant HTTP Server\n  participant Socket.IO Server\n  participant Socket.IO Auth Middleware\n  participant setupSocket Handler\n  participant MySQL Database\n\n  Socket.IO Client-&gt;&gt;HTTP Server: WebSocket Upgrade Request\n  HTTP Server-&gt;&gt;Socket.IO Server: (includes Cookie header)\n  Socket.IO Server-&gt;&gt;Socket.IO Auth Middleware: Hand off to Socket.IO\n  Socket.IO Auth Middleware-&gt;&gt;Socket.IO Auth Middleware: Run authentication middleware\n  Socket.IO Auth Middleware-&gt;&gt;Socket.IO Auth Middleware: Extract JWT from cookie\n  loop [User is\n    Socket.IO Auth Middleware-&gt;&gt;Socket.IO Server: jwt.verify(token)\n    Socket.IO Server-&gt;&gt;setupSocket Handler: Authentication Success\n    setupSocket Handler-&gt;&gt;setupSocket Handler: Attach user to socket\n    setupSocket Handler-&gt;&gt;setupSocket Handler: Trigger 'connection' event\n    setupSocket Handler-&gt;&gt;Socket.IO Client: socket.join('user:username')\n    Socket.IO Client-&gt;&gt;setupSocket Handler: socket.join('admins')\n    Socket.IO Auth Middleware-&gt;&gt;Socket.IO Client: Connection Established\n  end</code></pre>"},{"location":"Request-Processing-Pipeline.html#socketio-server-initialization","title":"Socket.IO Server Initialization","text":"<p>The Socket.IO server is created and attached to the HTTP server in index.js L8-L12</p> <p>:</p> <pre><code>const http = require(\"http\");\nconst socketIO = require(\"socket.io\");\nconst server = http.createServer(app);\nconst io = socketIO(server);\n</code></pre> <p>The socket handler is configured at index.js L14</p> <p>(import) and index.js L57</p> <p>(setup):</p> <pre><code>const setupSocket = require(\"./src/sockets/socketHandler\");\n// ...\nsetupSocket(io);\n</code></pre> <p>Sources: index.js L8-L14</p> <p>index.js L57</p>"},{"location":"Request-Processing-Pipeline.html#websocket-authentication-middleware","title":"WebSocket Authentication Middleware","text":"<p>The WebSocket authentication middleware is part of the <code>setupSocket</code> function in <code>src/sockets/socketHandler.js</code>. It:</p> <ol> <li>Runs before the <code>connection</code> event fires</li> <li>Extracts JWT from the socket handshake cookies</li> <li>Verifies the token using the same <code>JWT_SECRET</code></li> <li>Attaches user information to <code>socket.user</code></li> <li>Rejects connection if token is invalid</li> </ol> <p>This ensures that only authenticated users can establish WebSocket connections and that <code>socket.user</code> is available in all event handlers.</p> <p>Sources: index.js L14</p> <p>index.js L57</p>"},{"location":"Request-Processing-Pipeline.html#response-generation-pipeline","title":"Response Generation Pipeline","text":"<p>The final stage of request processing is generating and sending the response.</p>"},{"location":"Request-Processing-Pipeline.html#response-type-decision-tree","title":"Response Type Decision Tree","text":"<pre><code>flowchart TD\n\nHandlerComplete[\"Handler Logic Complete\"]\nDataReady[\"Data Ready\"]\nResponseMethod[\"res method called\"]\nStartEJS[\"EJS Rendering\"]\nStartJSON[\"JSON Serialization\"]\nStartRedirect[\"HTTP Redirect\"]\nStartSend[\"Direct Buffer Send\"]\nStartStatus[\"Status + Message\"]\nLoadTemplate[\"Load EJS Template File\"]\nCompileTemplate[\"Compile with Data\"]\nApplyLayoutEJS[\"Apply Layout Template\"]\nSetHTMLHeaders[\"Content-Type: text/html\"]\nSendHTMLResponse[\"Send HTML to Client\"]\nSerializeToJSON[\"JSON.stringify()\"]\nSetJSONHeaders[\"Content-Type: application/json\"]\nSendJSONResponse[\"Send JSON to Client\"]\nSetLocationHeader[\"Location: redirect_path\"]\nSet302Status[\"Status: 302 Found\"]\nSendRedirectResponse[\"Send Redirect to Client\"]\nSetContentTypeHeader[\"Set Content-Type header\"]\nSendBufferResponse[\"Send Buffer to Client\"]\nSetStatusCode[\"Set HTTP Status Code\"]\nSendStatusResponse[\"Send Message to Client\"]\nCloseConnection[\"Close Connection\"]\n\nHandlerComplete --&gt; DataReady\nDataReady --&gt; ResponseMethod\nResponseMethod --&gt; StartEJS\nResponseMethod --&gt; StartJSON\nResponseMethod --&gt; StartRedirect\nResponseMethod --&gt; StartSend\nResponseMethod --&gt; StartStatus\nStartEJS --&gt; LoadTemplate\nLoadTemplate --&gt; CompileTemplate\nCompileTemplate --&gt; ApplyLayoutEJS\nApplyLayoutEJS --&gt; SetHTMLHeaders\nSetHTMLHeaders --&gt; SendHTMLResponse\nStartJSON --&gt; SerializeToJSON\nSerializeToJSON --&gt; SetJSONHeaders\nSetJSONHeaders --&gt; SendJSONResponse\nStartRedirect --&gt; SetLocationHeader\nSetLocationHeader --&gt; Set302Status\nSet302Status --&gt; SendRedirectResponse\nStartSend --&gt; SetContentTypeHeader\nSetContentTypeHeader --&gt; SendBufferResponse\nStartStatus --&gt; SetStatusCode\nSetStatusCode --&gt; SendStatusResponse\nSendHTMLResponse --&gt; CloseConnection\nSendJSONResponse --&gt; CloseConnection\nSendRedirectResponse --&gt; CloseConnection\nSendBufferResponse --&gt; CloseConnection\nSendStatusResponse --&gt; CloseConnection</code></pre>"},{"location":"Request-Processing-Pipeline.html#ejs-template-rendering-pipeline","title":"EJS Template Rendering Pipeline","text":"<p>The EJS view engine is configured at index.js L52</p> <p>:</p> <pre><code>app.set(\"view engine\", \"ejs\");\n</code></pre> <p>When a handler calls <code>res.render(\"admin\", { data })</code>:</p> <ol> <li>Express resolves <code>\"admin\"</code> to <code>views/admin.ejs</code></li> <li>EJS compiles the template with the provided data object</li> <li>Template can access data as local variables</li> <li>Template typically extends <code>layout.ejs</code> for consistent structure</li> <li>Partials are included using <code>&lt;%- include('partials/header') %&gt;</code></li> <li>Final HTML is sent with <code>Content-Type: text/html; charset=utf-8</code></li> </ol> <p>Example usage at src/router.js L126-L131</p> <p>:</p> <pre><code>res.render(\"admin\", {\n    productos: results,\n    user: req.user,\n    login: true,\n    rol: req.user.rol,\n});\n</code></pre> <p>Sources: index.js L52</p> <p>src/router.js L126-L131</p>"},{"location":"Request-Processing-Pipeline.html#error-response-handling","title":"Error Response Handling","text":"<p>Error responses are handled at various levels:</p> Error Type HTTP Status Response Method Example Location Not authenticated 401 <code>res.status(401).send()</code> src/middlewares/verifyToken.js L6 Invalid token 403 <code>res.status(403).send()</code> src/middlewares/verifyToken.js L13 Access denied (not admin) 403 <code>res.status(403).json()</code> Admin middleware Missing parameters 400 <code>res.status(400).json()</code> src/router.js L233 Database error 500 <code>res.status(500).json()</code> src/router.js L247 Route not found 404 Express default handler Built-in <p>Sources: src/middlewares/verifyToken.js L6-L13</p> <p>src/router.js L233-L247</p>"},{"location":"Request-Processing-Pipeline.html#special-case-rate-limited-authentication","title":"Special Case: Rate-Limited Authentication","text":"<p>The authentication POST route includes an additional rate limiter middleware specific to login attempts:</p> <pre><code>const limiter = require(\"./middlewares/authLimiter\");\n// ...\nrouter.post(\"/auth\", limiter, async (req, res) =&gt; {\n    // ... authentication logic ...\n});\n</code></pre> <p>Located at src/router.js L21</p> <p>(import) and src/router.js L532</p> <p>(application).</p> <p>This provides brute-force protection by limiting the number of authentication attempts from a single IP address. The limiter runs before the authentication logic, so invalid attempts consume the rate limit budget.</p> <p>Sources: src/router.js L21</p> <p>src/router.js L532</p>"},{"location":"Request-Processing-Pipeline.html#request-pipeline-summary","title":"Request Pipeline Summary","text":""},{"location":"Request-Processing-Pipeline.html#complete-http-request-lifecycle","title":"Complete HTTP Request Lifecycle","text":"<ol> <li>Connection received by Node.js HTTP server</li> <li>Static asset check - served directly if matched</li> <li>Body parsing - URL-encoded and JSON parsers</li> <li>Cookie parsing - extract cookies into <code>req.cookies</code></li> <li>Security layer - helmet, rate limiting, CSRF protection</li> <li>Internationalization - detect and set language</li> <li>Global variables - inject common template data</li> <li>Route matching - find handler for request path</li> <li>Authentication (if required) - verify JWT token</li> <li>Authorization (if required) - check user role</li> <li>Handler execution - business logic runs</li> <li>Response generation - render view, serialize JSON, or generate PDF</li> <li>Send response - transmit to client and close connection</li> </ol>"},{"location":"Request-Processing-Pipeline.html#complete-websocket-connection-lifecycle","title":"Complete WebSocket Connection Lifecycle","text":"<ol> <li>Upgrade request received with cookies</li> <li>Socket.IO handshake - negotiate connection parameters</li> <li>Authentication middleware - verify JWT from cookie</li> <li>Connection established - <code>connection</code> event fires</li> <li>Room assignment - join personal room and admin room (if applicable)</li> <li>Event loop active - listen for <code>mensaje_privado</code> and other events</li> <li>Disconnect handling - cleanup on connection close</li> </ol> <p>Sources: index.js L1-L86</p> <p>src/router.js L1-L608</p> <p>src/middlewares/verifyToken.js L1-L18</p>"},{"location":"Room-Management.html","title":"Room Management","text":"<p>Relevant source files * src/sockets/socketHandler.js</p>"},{"location":"Room-Management.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the Socket.IO room management system used to organize and route real-time messages in the support chat feature. Rooms serve as logical groupings of connected WebSocket clients, enabling targeted message delivery to specific users or user groups. The system implements two types of rooms: personal rooms for direct user-to-user communication and a collective admin room for supervision and coordination.</p> <p>For information about Socket.IO server initialization, see Socket.IO Server Setup. For details on message event handling, see Message Handling.</p> <p>Sources: src/sockets/socketHandler.js L1-L71</p>"},{"location":"Room-Management.html#room-types","title":"Room Types","text":"<p>The system implements two distinct room categories that serve different communication patterns:</p> Room Type Naming Pattern Purpose Membership Personal Room <code>user:{username}</code> Direct message delivery to specific user Single user (the username owner) Admin Room <code>admins</code> Broadcast messages to all administrators All users with <code>rol === \"admin\"</code>"},{"location":"Room-Management.html#personal-rooms","title":"Personal Rooms","text":"<p>Every connected user automatically joins a personal room named <code>user:{username}</code> where <code>{username}</code> is the value of the <code>user</code> field from their JWT token. These rooms enable one-to-one message delivery, ensuring messages reach only the intended recipient.</p>"},{"location":"Room-Management.html#admin-room","title":"Admin Room","text":"<p>Administrators join both their personal room and a shared <code>admins</code> room. This collective room enables:</p> <ul> <li>Broadcasting messages from non-admin users to all online administrators</li> <li>Admin-to-admin coordination and visibility</li> <li>Supervision of user support requests</li> </ul> <p>Sources: src/sockets/socketHandler.js L42-L43</p>"},{"location":"Room-Management.html#room-assignment-architecture","title":"Room Assignment Architecture","text":"<p>The following diagram illustrates how users are assigned to rooms upon WebSocket connection:</p> <pre><code>flowchart TD\n\nSocketConnection[\"Socket Connection&lt;br&gt;Established\"]\nExtractUserData[\"Extract JWT Data&lt;br&gt;{user, name, rol}\"]\nJoinPersonalRoom[\"socket.join(Unsupported markdown: codespan)\"]\nCheckRole[\"rol === 'admin'?\"]\nJoinAdminRoom[\"socket.join('admins')\"]\nComplete[\"Connection Setup&lt;br&gt;Complete\"]\nListeningEvents[\"Socket Listening&lt;br&gt;For Events\"]\n\nSocketConnection --&gt; ExtractUserData\nExtractUserData --&gt; JoinPersonalRoom\nJoinPersonalRoom --&gt; CheckRole\nCheckRole --&gt; JoinAdminRoom\nCheckRole --&gt; Complete\nJoinAdminRoom --&gt; Complete\nComplete --&gt; ListeningEvents</code></pre> <p>Room Assignment Process</p> <p>Room assignment occurs in the <code>connection</code> event handler immediately after JWT authentication:</p> <ol> <li>Extract User Data: The decoded JWT payload contains <code>user</code>, <code>name</code>, and <code>rol</code> fields src/sockets/socketHandler.js L37</li> <li>Join Personal Room: Every user joins <code>user:${user}</code> unconditionally src/sockets/socketHandler.js L42</li> <li>Conditional Admin Room Join: If <code>rol === \"admin\"</code>, user also joins the <code>admins</code> room src/sockets/socketHandler.js L43</li> </ol> <p>Sources: src/sockets/socketHandler.js L36-L43</p>"},{"location":"Room-Management.html#room-based-message-routing","title":"Room-Based Message Routing","text":"<p>The room system enables sophisticated message routing logic that differs based on sender role and message destination:</p> <pre><code>flowchart TD\n\nMensajePrivado[\"mensaje_privado Event&lt;br&gt;{para, mensaje}\"]\nExtractSender[\"Extract Sender&lt;br&gt;de = user\"]\nEmitToRecipient[\"io.to(Unsupported markdown: codespan).emit()&lt;br&gt;'mensaje_recibido'\"]\nCheckSenderRole[\"rol !== 'admin'?\"]\nEmitToAdmins[\"io.to('admins').emit()&lt;br&gt;'mensaje_recibido'\"]\nPersistDB[\"Persist to Database&lt;br&gt;INSERT INTO mensajes\"]\nComplete[\"Message Routing&lt;br&gt;Complete\"]\n\nMensajePrivado --&gt; ExtractSender\nExtractSender --&gt; EmitToRecipient\nEmitToRecipient --&gt; CheckSenderRole\nCheckSenderRole --&gt; EmitToAdmins\nCheckSenderRole --&gt; PersistDB\nEmitToAdmins --&gt; PersistDB\nPersistDB --&gt; Complete</code></pre> <p>Routing Logic</p> <p>When a <code>mensaje_privado</code> event is received src/sockets/socketHandler.js L45</p> <p>the system executes the following routing:</p> <ol> <li>Direct Delivery: The message is always emitted to the recipient's personal room <code>user:${para}</code> src/sockets/socketHandler.js L48</li> <li>Admin Broadcast (conditional): If the sender is NOT an admin (<code>rol !== \"admin\"</code>), the message is also broadcast to the <code>admins</code> room src/sockets/socketHandler.js L50-L52</li> <li>Persistence: The message is stored in the <code>mensajes</code> database table src/sockets/socketHandler.js L55-L62</li> </ol> <p>This design ensures:</p> <ul> <li>Users can send messages directly to administrators</li> <li>All administrators see incoming user messages (supervision capability)</li> <li>Admin-to-user messages remain private (only visible to the specific user)</li> <li>Admin-to-admin messages are visible to all administrators</li> </ul> <p>Sources: src/sockets/socketHandler.js L45-L63</p>"},{"location":"Room-Management.html#room-membership-management","title":"Room Membership Management","text":""},{"location":"Room-Management.html#join-operation","title":"Join Operation","text":"<p>The <code>socket.join()</code> method adds the current socket to specified room(s). This is a Socket.IO method that maintains room membership internally:</p> <pre><code>socket.join(`user:${user}`);  // Join personal room\nif (rol === \"admin\") socket.join(\"admins\");  // Conditionally join admin room\n</code></pre> <p>Key Characteristics:</p> <ul> <li>Membership is per-socket, not per-user (multiple tabs = multiple sockets)</li> <li>A socket can belong to multiple rooms simultaneously</li> <li>Room creation is implicit; calling <code>socket.join()</code> creates the room if it doesn't exist</li> </ul> <p>Sources: src/sockets/socketHandler.js L42-L43</p>"},{"location":"Room-Management.html#automatic-leave-on-disconnect","title":"Automatic Leave on Disconnect","text":"<p>Socket.IO automatically removes disconnected sockets from all rooms they had joined. The <code>disconnect</code> event handler src/sockets/socketHandler.js L65-L67</p> <p>logs disconnections but doesn't need to explicitly call <code>socket.leave()</code> for cleanup.</p> <p>Sources: src/sockets/socketHandler.js L65-L67</p>"},{"location":"Room-Management.html#message-emission-to-rooms","title":"Message Emission to Rooms","text":""},{"location":"Room-Management.html#targeting-specific-rooms","title":"Targeting Specific Rooms","text":"<p>The <code>io.to()</code> method targets message emission to all sockets in a specified room:</p> <pre><code>io.to(`user:${para}`).emit(\"mensaje_recibido\", { de, mensaje });\n</code></pre> <p>This emits the <code>mensaje_recibido</code> event only to sockets in room <code>user:${para}</code>, delivering the message to the intended recipient.</p>"},{"location":"Room-Management.html#broadcasting-to-multiple-rooms","title":"Broadcasting to Multiple Rooms","text":"<p>When a non-admin sends a message, two <code>io.to()</code> calls execute sequentially:</p> <pre><code>io.to(`user:${para}`).emit(\"mensaje_recibido\", { de, mensaje });  // To recipient\nif (rol !== \"admin\") {\n    io.to(\"admins\").emit(\"mensaje_recibido\", { de, mensaje });    // To all admins\n}\n</code></pre> <p>This pattern creates a \"broadcast to multiple rooms\" behavior without explicit multi-room syntax, ensuring both the recipient and supervising administrators receive the message.</p> <p>Sources: src/sockets/socketHandler.js L48-L52</p>"},{"location":"Room-Management.html#room-naming-convention","title":"Room Naming Convention","text":"Room Name Pattern Example Generated By Usage <code>user:${username}</code> <code>user:john_doe</code> <code>socket.join(\\</code>user:${user}<code>)</code> Personal message delivery <code>admins</code> <code>admins</code> <code>socket.join(\"admins\")</code> Admin broadcast channel <p>The <code>user:</code> prefix distinguishes personal rooms from the admin room and provides a namespace-like organization. This prevents collisions if a user has the username <code>admins</code>, as their personal room would be <code>user:admins</code>, distinct from the <code>admins</code> admin room.</p> <p>Sources: src/sockets/socketHandler.js L42-L43</p>"},{"location":"Room-Management.html#connection-lifecycle-and-room-membership","title":"Connection Lifecycle and Room Membership","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant Socket.IO Server\n  participant JWT Middleware\n  participant connection Handler\n\n  Client-&gt;&gt;Socket.IO Server: \"Establish WebSocket Connection\"\n  Socket.IO Server-&gt;&gt;JWT Middleware: \"Authenticate (io.use)\"\n  JWT Middleware-&gt;&gt;JWT Middleware: \"Verify JWT from Cookie\"\n  JWT Middleware--&gt;&gt;Socket.IO Server: \"Authentication Success\n  Socket.IO Server-&gt;&gt;connection Handler: {user, name, rol}\"\n  connection Handler-&gt;&gt;connection Handler: \"Trigger 'connection' Event\"\n  loop [rol ===\n    connection Handler-&gt;&gt;connection Handler: \"socket.join(`user:${user}`)\"\n    connection Handler--&gt;&gt;Client: \"socket.join('admins')\"\n    note over Client,connection Handler: \"Socket now in rooms:\n    Client-&gt;&gt;connection Handler: \"Connection Established\n    connection Handler-&gt;&gt;Socket.IO Server: Rooms Assigned\"\n    connection Handler-&gt;&gt;Socket.IO Server: \"Send 'mensaje_privado'\"\n  end\n  Client-&gt;&gt;Socket.IO Server: \"io.to(`user:${para}`).emit()\"\n  Socket.IO Server-&gt;&gt;connection Handler: \"io.to('admins').emit()\"\n  note over Socket.IO Server: \"Automatic room cleanup</code></pre> <p>Sources: src/sockets/socketHandler.js L4-L69</p>"},{"location":"Room-Management.html#technical-implementation-details","title":"Technical Implementation Details","text":""},{"location":"Room-Management.html#room-data-structure","title":"Room Data Structure","text":"<p>Socket.IO maintains rooms as a Map-like data structure where:</p> <ul> <li>Keys are room names (strings)</li> <li>Values are Sets of socket IDs</li> </ul> <p>This internal structure is managed entirely by Socket.IO; application code interacts with it only through <code>socket.join()</code>, <code>socket.leave()</code>, and <code>io.to()</code> methods.</p>"},{"location":"Room-Management.html#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Room Lookup: O(1) complexity for emitting to a room via <code>io.to(roomName)</code></li> <li>Multi-Room Membership: No performance penalty; a socket can join unlimited rooms</li> <li>Broadcast Efficiency: <code>io.to(\"admins\").emit()</code> iterates only over sockets in that room, not all connected sockets</li> </ul> <p>Sources: src/sockets/socketHandler.js L48-L52</p>"},{"location":"Room-Management.html#integration-with-authentication","title":"Integration with Authentication","text":"<p>Room assignment depends on authenticated JWT data extracted by the Socket.IO authentication middleware src/sockets/socketHandler.js L6-L32</p> <p>The middleware populates <code>socket.request.user</code> with decoded token data, which the connection handler uses to determine room membership:</p> <pre><code>const { user, name, rol } = socket.request.user;  // From JWT\nsocket.join(`user:${user}`);                      // Room name from JWT\nif (rol === \"admin\") socket.join(\"admins\");       // Conditional on JWT role\n</code></pre> <p>This tight coupling ensures room assignment is based on verified identity, preventing users from joining arbitrary rooms or impersonating others.</p> <p>Sources: src/sockets/socketHandler.js L6-L43</p>"},{"location":"Room-Management.html#summary","title":"Summary","text":"<p>The room management system provides a clean abstraction for message routing in the support chat feature:</p> <ul> <li>Personal rooms (<code>user:{username}</code>) enable direct message delivery to specific users</li> <li>The admin room (<code>admins</code>) creates a supervision channel where non-admin messages are broadcast</li> <li>Room assignment is automatic on connection, based on authenticated JWT data</li> <li>Message routing logic leverages rooms to implement both direct messaging and admin broadcast patterns</li> <li>Socket.IO handles room membership lifecycle, including automatic cleanup on disconnect</li> </ul> <p>This architecture separates message routing concerns from business logic, making the support chat system scalable and maintainable.</p> <p>Sources: src/sockets/socketHandler.js L1-L71</p>"},{"location":"Routing-System.html","title":"Routing System","text":"<p>Relevant source files * proyecto.zip * src/router.js</p>"},{"location":"Routing-System.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>The Routing System is the central request routing mechanism for the registro-sesiones application. It defines all HTTP endpoints, maps URL paths to handler functions, applies middleware for authentication and validation, and coordinates between the presentation layer (views) and business logic (controllers). This document covers the router architecture, route organization, middleware integration, and handler patterns.</p> <p>For details on specific route categories, see:</p> <ul> <li>Public Routes - unauthenticated endpoints</li> <li>Protected Routes - authenticated user and admin endpoints</li> <li>API Endpoints - RESTful data endpoints</li> </ul> <p>For authentication middleware specifics, see Authentication &amp; Authorization.</p> <p>Sources: src/router.js L1-L607</p>"},{"location":"Routing-System.html#router-architecture","title":"Router Architecture","text":""},{"location":"Routing-System.html#express-router-setup","title":"Express Router Setup","text":"<p>The routing system is implemented using Express.js Router and exported as a module that is mounted in the main application. The router is configured with dependencies for authentication, validation, file uploads, and database access.</p> <pre><code>flowchart TD\n\nRouterInstance[\"express.Router()&lt;br&gt;Line 2\"]\nExpressValidator[\"express-validator&lt;br&gt;body, validationResult\"]\nBCrypt[\"bcryptjs&lt;br&gt;Password Hashing\"]\nDB[\"database/db&lt;br&gt;MySQL Connection\"]\nJWT[\"jsonwebtoken&lt;br&gt;Token Management\"]\nPuppeteer[\"puppeteer&lt;br&gt;PDF Generation\"]\nPDFKit[\"pdfkit&lt;br&gt;PDF Creation\"]\nEJS[\"ejs&lt;br&gt;Template Rendering\"]\nVerifyToken[\"verifyToken&lt;br&gt;src/middlewares/verifyToken\"]\nVerifyAdmin[\"verifyAdmin&lt;br&gt;src/middlewares/verifyAdmin\"]\nUpload[\"upload&lt;br&gt;src/middlewares/multerConfig\"]\nLimiter[\"limiter&lt;br&gt;src/middlewares/authLimiter\"]\nCRUD[\"crud&lt;br&gt;src/controllers\"]\nExternalApp[\"index.js&lt;br&gt;app.use('/', router)\"]\n\nRouterInstance --&gt; ExternalApp\n\nsubgraph subGraph3 [\"Router Module - src/router.js\"]\n    RouterInstance\n    RouterInstance --&gt; ExpressValidator\n    RouterInstance --&gt; BCrypt\n    RouterInstance --&gt; DB\n    RouterInstance --&gt; JWT\n    RouterInstance --&gt; Puppeteer\n    RouterInstance --&gt; PDFKit\n    RouterInstance --&gt; EJS\n    RouterInstance --&gt; VerifyToken\n    RouterInstance --&gt; VerifyAdmin\n    RouterInstance --&gt; Upload\n    RouterInstance --&gt; Limiter\n    RouterInstance --&gt; CRUD\n\nsubgraph Controllers [\"Controllers\"]\n    CRUD\nend\n\nsubgraph subGraph1 [\"Middleware Imports\"]\n    VerifyToken\n    VerifyAdmin\n    Upload\n    Limiter\nend\n\nsubgraph Dependencies [\"Dependencies\"]\n    ExpressValidator\n    BCrypt\n    DB\n    JWT\n    Puppeteer\n    PDFKit\n    EJS\nend\nend</code></pre> <p>Sources: src/router.js L1-L22</p> <p>src/router.js L607</p>"},{"location":"Routing-System.html#route-categories-and-organization","title":"Route Categories and Organization","text":"<p>The router defines 21 routes organized into three main categories: public routes, protected routes, and API endpoints. Routes are registered using HTTP verb methods (<code>router.get()</code>, <code>router.post()</code>) with optional middleware chains.</p>"},{"location":"Routing-System.html#route-registration-pattern","title":"Route Registration Pattern","text":"<p>Routes follow a consistent registration pattern:</p> <pre><code>router.&lt;method&gt;(\"&lt;path&gt;\", [middleware1, middleware2, ...], handlerFunction)\n</code></pre>"},{"location":"Routing-System.html#complete-route-map","title":"Complete Route Map","text":"HTTP Method Path Middleware Handler Type Purpose GET <code>/</code> None View Home page with optional user info GET <code>/login</code> None View Login form GET <code>/registro</code> None View Registration form GET <code>/admin</code> <code>verifyToken</code> View Product management dashboard GET <code>/pdfAdmin</code> <code>verifyToken</code> View PDF preview page GET <code>/create</code> None View Create product form GET <code>/edit/:id</code> None View Edit product form GET <code>/delete/:id</code> None Redirect Delete product and redirect GET <code>/logout</code> None Redirect Clear JWT cookie and redirect GET <code>/soporte</code> <code>verifyToken</code> View Support chat interface GET <code>/api/mensajes</code> <code>verifyAdmin</code> JSON Get messages for specific user GET <code>/api/mensajes/mios</code> <code>verifyToken</code> JSON Get current user's messages GET <code>/api/usuarios-conversaciones</code> <code>verifyAdmin</code> JSON Get list of users with conversations GET <code>/pdf/descargar</code> <code>verifyToken</code> PDF Download PDF (Puppeteer) GET <code>/pdfkit/descargar</code> <code>verifyToken</code> PDF Download PDF (PDFKit) GET <code>/set-lang/:lang</code> None Redirect Set language preference POST <code>/register</code> <code>upload.single()</code>, validation View User registration POST <code>/auth</code> <code>limiter</code> View User authentication POST <code>/save</code> None Redirect Create product (via controller) POST <code>/update</code> None Redirect Update product (via controller) <p>Sources: src/router.js L59-L604</p>"},{"location":"Routing-System.html#route-handler-types","title":"Route Handler Types","text":"<p>The routing system implements four distinct handler patterns based on the type of response generated.</p> <pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nRouter[\"Express Router\"]\nViewHandler[\"View Handler&lt;br&gt;res.render()\"]\nAPIHandler[\"API Handler&lt;br&gt;res.json()\"]\nRedirectHandler[\"Redirect Handler&lt;br&gt;res.redirect()\"]\nPDFHandler[\"PDF Handler&lt;br&gt;res.send(buffer)\"]\nEJSEngine[\"EJS Template Engine\"]\nHTMLResponse[\"HTML Response\"]\nJSONResponse[\"JSON Response\"]\nHTTPRedirect[\"302/301 Response\"]\nPDFEngine[\"Puppeteer or PDFKit\"]\nPDFResponse[\"PDF Binary Response\"]\n\nRequest --&gt; Router\nRouter --&gt; ViewHandler\nRouter --&gt; APIHandler\nRouter --&gt; RedirectHandler\nRouter --&gt; PDFHandler\nViewHandler --&gt; EJSEngine\nEJSEngine --&gt; HTMLResponse\nAPIHandler --&gt; JSONResponse\nRedirectHandler --&gt; HTTPRedirect\nPDFHandler --&gt; PDFEngine\nPDFEngine --&gt; PDFResponse</code></pre> <p>Sources: src/router.js L59-L604</p>"},{"location":"Routing-System.html#view-handlers","title":"View Handlers","text":"<p>View handlers render EJS templates and return HTML responses. They query the database when needed and pass data to templates via the <code>res.render()</code> method.</p> <p>Example: Home Page Handler</p> <pre><code>// Lines 59-74\nrouter.get(\"/\", (req, res) =&gt; {\n    if (req.cookies.token) {\n        const payload = jwt.verify(req.cookies.token, process.env.JWT_SECRET);\n        req.user = payload;\n        res.render(\"index\", {\n            user: req.user?.name || \"Usuario\",\n            login: true,\n        });\n    } else {\n        res.render(\"index\", {\n            user: \"Debe iniciar sesi\u00f3n\",\n            login: false,\n        });\n    }\n});\n</code></pre> <p>View Handler Routes:</p> <ul> <li><code>/</code> - Renders <code>index.ejs</code></li> <li><code>/login</code> - Renders <code>login.ejs</code></li> <li><code>/registro</code> - Renders <code>register.ejs</code></li> <li><code>/admin</code> - Renders <code>admin.ejs</code> with product data</li> <li><code>/pdfAdmin</code> - Renders <code>pdfTabla.ejs</code> for PDF preview</li> <li><code>/create</code> - Renders <code>create.ejs</code></li> <li><code>/edit/:id</code> - Renders <code>edit.ejs</code> with product data</li> <li><code>/soporte</code> - Renders <code>soporte.ejs</code> with user data</li> </ul> <p>Sources: src/router.js L59-L80</p> <p>src/router.js L119-L155</p> <p>src/router.js L186-L196</p> <p>src/router.js L220-L227</p>"},{"location":"Routing-System.html#api-handlers","title":"API Handlers","text":"<p>API handlers return JSON responses for data retrieval. These endpoints are consumed by client-side JavaScript for dynamic functionality.</p> <p>Example: Get User Messages Handler</p> <pre><code>// Lines 256-280\nrouter.get(\"/api/mensajes/mios\", verifyToken, (req, res) =&gt; {\n    const usuario = req.user.user;\n\n    if (!usuario) {\n        return res.status(403).json({ error: \"No autorizado\" });\n    }\n\n    const sql = `\n    SELECT de_usuario, para_usuario, mensaje, fecha\n    FROM mensajes\n    WHERE \n      (de_usuario = ? OR para_usuario = ?)\n    ORDER BY fecha ASC\n    `;\n\n    db.query(sql, [usuario, usuario], (err, results) =&gt; {\n        if (err) {\n            console.error(\"\u274c Error al obtener mensajes:\", err);\n            return res.status(500).json({ error: \"Error interno\" });\n        }\n        res.json(results);\n    });\n});\n</code></pre> <p>API Handler Routes:</p> <ul> <li><code>/api/mensajes?con=&lt;username&gt;</code> - Returns messages for specific user (admin only)</li> <li><code>/api/mensajes/mios</code> - Returns current user's messages</li> <li><code>/api/usuarios-conversaciones</code> - Returns list of users with conversations (admin only)</li> </ul> <p>Sources: src/router.js L229-L253</p> <p>src/router.js L256-L280</p> <p>src/router.js L283-L315</p>"},{"location":"Routing-System.html#redirect-handlers","title":"Redirect Handlers","text":"<p>Redirect handlers perform an action and redirect the user to another page using <code>res.redirect()</code>.</p> <p>Example: Logout Handler</p> <pre><code>// Lines 215-218\nrouter.get(\"/logout\", (req, res) =&gt; {\n    res.clearCookie(\"token\");\n    res.redirect('/');\n});\n</code></pre> <p>Redirect Handler Routes:</p> <ul> <li><code>/delete/:id</code> - Deletes product and redirects to <code>/admin</code></li> <li><code>/logout</code> - Clears JWT cookie and redirects to <code>/</code></li> <li><code>/set-lang/:lang</code> - Sets language cookie and redirects to <code>returnTo</code> parameter</li> </ul> <p>Sources: src/router.js L198-L208</p> <p>src/router.js L215-L218</p> <p>src/router.js L398-L407</p>"},{"location":"Routing-System.html#pdf-generation-handlers","title":"PDF Generation Handlers","text":"<p>PDF handlers generate PDF documents and return them as binary responses with appropriate headers. The system implements two PDF generation approaches.</p> <p>Puppeteer-based Handler (HTML to PDF):</p> <pre><code>// Lines 317-353\nrouter.get(\"/pdf/descargar\", verifyToken, async (req, res) =&gt; {\n    db.query(\"SELECT * FROM productos\", async (error, results) =&gt; {\n        if (error) {\n            return res.status(500).send(\"Error al obtener productos\");\n        }\n\n        try {\n            const html = await ejs.renderFile(path.join(__dirname, \"../views/pdfTabla.ejs\"), {\n                productos: results\n            });\n\n            const browser = await puppeteer.launch({\n                headless: true,\n                args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"],\n            });\n\n            const page = await browser.newPage();\n            await page.setContent(html, { waitUntil: \"networkidle0\" });\n\n            const pdfBuffer = await page.pdf({\n                format: \"A4\",\n                printBackground: true,\n                margin: { top: \"20px\", bottom: \"20px\" },\n            });\n\n            await browser.close();\n\n            res.setHeader(\"Content-Type\", \"application/pdf\");\n            res.setHeader(\"Content-Disposition\", 'attachment; filename=\"productos.pdf\"');\n            res.send(pdfBuffer);\n        } catch (err) {\n            console.error(\"\u274c Error al generar el PDF:\", err);\n            res.status(500).send(\"Error interno al generar el PDF\");\n        }\n    });\n});\n</code></pre> <p>PDFKit-based Handler (Programmatic PDF):</p> <pre><code>// Lines 355-396\nrouter.get(\"/pdfkit/descargar\", verifyToken, (req, res) =&gt; {\n    db.query(\"SELECT * FROM productos\", (error, results) =&gt; {\n        if (error) {\n            return res.status(500).send(\"Error al obtener productos\");\n        }\n\n        const doc = new PDFDocument({ margin: 40, size: 'A4' });\n\n        res.setHeader(\"Content-Disposition\", 'attachment; filename=\"productos_desde_cero.pdf\"');\n        res.setHeader(\"Content-Type\", \"application/pdf\");\n\n        doc.pipe(res);\n\n        // Title\n        doc.fontSize(18).text(\"Listado de Productos\", { align: \"center\" }).moveDown();\n\n        // Table headers\n        doc.font(\"Helvetica-Bold\").fontSize(12);\n        let y = doc.y;\n        doc.text(\"Referencia\", 50, y);\n        doc.text(\"Nombre\", 150, y);\n        doc.text(\"Precio\", 300, y);\n        doc.text(\"Stock\", 380, y);\n\n        y += 20;\n        doc.font(\"Helvetica\").fontSize(11);\n\n        results.forEach((p) =&gt; {\n            doc.text(p.ref.toString(), 50, y);\n            doc.text(p.nombre, 150, y);\n            doc.text(Number(p.precio).toFixed(2), 300, y);\n            doc.text(p.stock.toString(), 380, y);\n            y += 20;\n        });\n\n        doc.end();\n    });\n});\n</code></pre> <p>Sources: src/router.js L317-L353</p> <p>src/router.js L355-L396</p>"},{"location":"Routing-System.html#middleware-integration","title":"Middleware Integration","text":"<p>The routing system integrates five types of middleware to handle authentication, authorization, file uploads, rate limiting, and input validation.</p> <pre><code>flowchart TD\n\nIncomingRequest[\"HTTP Request\"]\nRouteDefinition[\"Route Definition\"]\nMW_Check[\"Middleware&lt;br&gt;Specified?\"]\nMW_Chain[\"Middleware Chain\"]\nHandler[\"Route Handler\"]\nVerifyToken[\"verifyToken&lt;br&gt;JWT Validation\"]\nVerifyAdmin[\"verifyAdmin&lt;br&gt;Role Check\"]\nUpload[\"upload.single()&lt;br&gt;File Upload\"]\nLimiter[\"limiter&lt;br&gt;Rate Limiting\"]\nValidator[\"express-validator&lt;br&gt;Input Validation\"]\nTokenValid[\"Token Valid?\"]\nNextMW[\"next()\"]\nReject401[\"401 Response\"]\nIsAdmin[\"User is Admin?\"]\nNextMW2[\"next()\"]\nReject403[\"403 Response\"]\n\nIncomingRequest --&gt; RouteDefinition\nRouteDefinition --&gt; MW_Check\nMW_Check --&gt; MW_Chain\nMW_Check --&gt; Handler\nVerifyToken --&gt; TokenValid\nTokenValid --&gt; NextMW\nTokenValid --&gt; Reject401\nVerifyAdmin --&gt; IsAdmin\nIsAdmin --&gt; NextMW2\nIsAdmin --&gt; Reject403\nNextMW --&gt; Handler\nNextMW2 --&gt; Handler\n\nsubgraph subGraph0 [\"Middleware Types\"]\n    MW_Chain\n    VerifyToken\n    VerifyAdmin\n    Upload\n    Limiter\n    Validator\n    MW_Chain --&gt; VerifyToken\n    MW_Chain --&gt; VerifyAdmin\n    MW_Chain --&gt; Upload\n    MW_Chain --&gt; Limiter\n    MW_Chain --&gt; Validator\nend</code></pre> <p>Sources: src/router.js L16-L21</p>"},{"location":"Routing-System.html#authentication-middleware-verifytoken","title":"Authentication Middleware (verifyToken)","text":"<p>The <code>verifyToken</code> middleware validates JWT tokens from cookies and attaches user information to <code>req.user</code>. Applied to routes requiring any authenticated user.</p> <p>Routes using <code>verifyToken</code>:</p> <ul> <li><code>/admin</code> - Product management (line 119)</li> <li><code>/pdfAdmin</code> - PDF preview (line 136)</li> <li><code>/soporte</code> - Support chat (line 220)</li> <li><code>/api/mensajes/mios</code> - User's messages (line 256)</li> <li><code>/pdf/descargar</code> - PDF download (line 317)</li> <li><code>/pdfkit/descargar</code> - PDFKit download (line 355)</li> </ul> <p>Sources: src/router.js L16</p> <p>src/router.js L119</p> <p>src/router.js L220</p> <p>src/router.js L256</p> <p>src/router.js L317</p> <p>src/router.js L355</p>"},{"location":"Routing-System.html#authorization-middleware-verifyadmin","title":"Authorization Middleware (verifyAdmin)","text":"<p>The <code>verifyAdmin</code> middleware checks if the authenticated user has the <code>admin</code> role. Applied after <code>verifyToken</code> to restrict access to administrative functions.</p> <p>Routes using <code>verifyAdmin</code>:</p> <ul> <li><code>/api/mensajes?con=&lt;user&gt;</code> - Get any user's messages (line 229)</li> <li><code>/api/usuarios-conversaciones</code> - Get conversation list (line 283)</li> </ul> <p>Sources: src/router.js L17</p> <p>src/router.js L229</p> <p>src/router.js L283</p>"},{"location":"Routing-System.html#file-upload-middleware-upload","title":"File Upload Middleware (upload)","text":"<p>The <code>upload</code> middleware from multer handles multipart form data for file uploads. Configured to accept a single file with the field name <code>profileImage</code>.</p> <p>Routes using <code>upload</code>:</p> <ul> <li>POST <code>/register</code> - Profile image upload (line 414)</li> </ul> <p>Sources: src/router.js L19</p> <p>src/router.js L414</p>"},{"location":"Routing-System.html#rate-limiting-middleware-limiter","title":"Rate Limiting Middleware (limiter)","text":"<p>The <code>limiter</code> middleware implements rate limiting to prevent brute force attacks on authentication endpoints.</p> <p>Routes using <code>limiter</code>:</p> <ul> <li>POST <code>/auth</code> - Login rate limiting (line 532)</li> </ul> <p>Sources: src/router.js L21</p> <p>src/router.js L532</p>"},{"location":"Routing-System.html#input-validation-middleware","title":"Input Validation Middleware","text":"<p>The <code>express-validator</code> library provides validation middleware through the <code>body()</code> function. Validation rules are defined inline and checked using <code>validationResult()</code>.</p> <p>Routes using validation:</p> <ul> <li>POST <code>/register</code> - Validates user, name, pass, email, edad fields (lines 415-428)</li> </ul> <p>Validation Rules:</p> <pre><code>// Lines 415-428\n[\n    body(\"user\")\n        .exists()\n        .isLength({ min: 4 })\n        .withMessage(\"El usuario debe tener al menos 4 caracteres\"),\n    body(\"name\")\n        .isLength({ min: 4 })\n        .withMessage(\"El nombre debe tener al menos 4 caracteres\"),\n    body(\"pass\")\n        .isLength({ min: 4 })\n        .withMessage(\"La contrase\u00f1a debe tener al menos 4 caracteres\"),\n    body(\"email\").isEmail().withMessage(\"El email no es valido\"),\n    body(\"edad\").isNumeric().withMessage(\"La edad debe ser un n\u00famero\"),\n]\n</code></pre> <p>Sources: src/router.js L3</p> <p>src/router.js L414-L428</p> <p>src/router.js L430-L442</p>"},{"location":"Routing-System.html#post-route-handlers","title":"POST Route Handlers","text":"<p>POST routes handle form submissions and data modifications. They implement authentication, file uploads, validation, and business logic before responding with views or redirects.</p>"},{"location":"Routing-System.html#user-registration-handler","title":"User Registration Handler","text":"<p>The registration handler is the most complex POST route, combining file upload, input validation, password hashing, and database insertion.</p> <pre><code>flowchart TD\n\nPOST_Register[\"POST /register\"]\nUpload_MW[\"upload.single('profileImage')\"]\nValidation_MW[\"Validation Middleware Array\"]\nHandler[\"Registration Handler\"]\nValidate_Check[\"Validation&lt;br&gt;Errors?\"]\nRender_Errors[\"res.render('register')&lt;br&gt;with errors and values\"]\nExtract_Data[\"Extract Form Data&lt;br&gt;user, name, rol, pass, profileImage\"]\nHash_Password[\"bcrypt.hash(pass, 8)\"]\nDB_Insert[\"db.query('INSERT INTO usuarios')\"]\nSuccess_Check[\"Insert&lt;br&gt;Success?\"]\nRender_Success[\"res.render('register')&lt;br&gt;with success alert\"]\nLog_Error[\"console.log(error)\"]\n\nPOST_Register --&gt; Upload_MW\nUpload_MW --&gt; Validation_MW\nValidation_MW --&gt; Handler\nHandler --&gt; Validate_Check\nValidate_Check --&gt; Render_Errors\nValidate_Check --&gt; Extract_Data\nExtract_Data --&gt; Hash_Password\nHash_Password --&gt; DB_Insert\nDB_Insert --&gt; Success_Check\nSuccess_Check --&gt; Render_Success\nSuccess_Check --&gt; Log_Error</code></pre> <p>Sources: src/router.js L414-L484</p> <p>Handler Details:</p> <ol> <li>File Upload (line 414): <code>upload.single(\"profileImage\")</code> processes multipart form data</li> <li>Validation (lines 415-428): 5 validation rules for user, name, pass, email, edad</li> <li>Error Handling (lines 430-442): If validation fails, re-render form with errors and previous values</li> <li>Password Hashing (line 453): <code>bcrypt.hash(pass, 8)</code> with 8 salt rounds</li> <li>Database Insert (lines 456-480): Insert new user record with hashed password and profile image filename</li> <li>Success Response (lines 469-478): Render registration page with SweetAlert success message</li> </ol> <p>Sources: src/router.js L414-L484</p>"},{"location":"Routing-System.html#authentication-handler","title":"Authentication Handler","text":"<p>The authentication handler validates credentials, generates JWT tokens, and sets secure HTTP-only cookies.</p> <pre><code>flowchart TD\n\nPOST_Auth[\"POST /auth\"]\nLimiter_MW[\"Rate Limiter Middleware\"]\nAuth_Handler[\"Authentication Handler\"]\nExtract_Creds[\"Extract user and pass&lt;br&gt;from req.body\"]\nCreds_Check[\"Credentials&lt;br&gt;Provided?\"]\nRender_Error1[\"res.render('login')&lt;br&gt;with error alert\"]\nDB_Query[\"db.query('SELECT * FROM usuarios&lt;br&gt;WHERE usuario = ?')\"]\nUser_Check[\"User Found &amp;&lt;br&gt;Password Valid?\"]\nRender_Error2[\"res.render('login')&lt;br&gt;with incorrect credentials alert\"]\nCreate_Payload[\"Create JWT Payload&lt;br&gt;user, name, rol, imagen\"]\nSign_Token[\"jwt.sign(payload, secret,&lt;br&gt;{expiresIn: '1h'})\"]\nSet_Cookie[\"res.cookie('token', token,&lt;br&gt;{httpOnly: true, maxAge: 3600000})\"]\nRender_Success[\"res.render('login')&lt;br&gt;with success alert\"]\n\nPOST_Auth --&gt; Limiter_MW\nLimiter_MW --&gt; Auth_Handler\nAuth_Handler --&gt; Extract_Creds\nExtract_Creds --&gt; Creds_Check\nCreds_Check --&gt; Render_Error1\nCreds_Check --&gt; DB_Query\nDB_Query --&gt; User_Check\nUser_Check --&gt; Render_Error2\nUser_Check --&gt; Create_Payload\nCreate_Payload --&gt; Sign_Token\nSign_Token --&gt; Set_Cookie\nSet_Cookie --&gt; Render_Success</code></pre> <p>Sources: src/router.js L532-L601</p> <p>Handler Details:</p> <ol> <li>Rate Limiting (line 532): Prevent brute force attacks</li> <li>Credential Extraction (lines 533-534): Get username and password from form</li> <li>Database Query (lines 537-540): Fetch user record by username</li> <li>Password Verification (line 543): <code>bcrypt.compare(pass, results[0].pass)</code> validates password</li> <li>JWT Creation (lines 559-567): Create payload and sign with <code>JWT_SECRET</code></li> <li>Cookie Setup (lines 570-574): Store token in HTTP-only cookie with 1-hour expiration</li> <li>Response (lines 577-586): Render login page with success alert and auto-redirect</li> </ol> <p>Sources: src/router.js L532-L601</p>"},{"location":"Routing-System.html#controller-delegation","title":"Controller Delegation","text":"<p>Two POST routes delegate to the <code>controllers.js</code> module for product CRUD operations.</p> <p>Controller Routes:</p> <ul> <li>POST <code>/save</code> - Delegates to <code>crud.save</code> for product creation (line 603)</li> <li>POST <code>/update</code> - Delegates to <code>crud.update</code> for product editing (line 604)</li> </ul> <p>Sources: src/router.js L13</p> <p>src/router.js L603-L604</p>"},{"location":"Routing-System.html#dynamic-route-parameters","title":"Dynamic Route Parameters","text":"<p>Several routes use Express route parameters (<code>:param</code>) to capture dynamic values from URLs.</p>"},{"location":"Routing-System.html#parameter-extraction-pattern","title":"Parameter Extraction Pattern","text":"Route Parameter Extraction Usage <code>/edit/:id</code> <code>:id</code> <code>req.params.id</code> Product reference for editing <code>/delete/:id</code> <code>:id</code> <code>req.params.id</code> Product reference for deletion <code>/set-lang/:lang</code> <code>:lang</code> <code>req.params.lang</code> Language code (es/en) <p>Example: Edit Product Route</p> <pre><code>// Lines 186-196\nrouter.get(\"/edit/:id\", (req, res) =&gt; {\n    const ref = req.params.id; // Capture parameter\n    db.query(\"SELECT * FROM productos WHERE ref = ?\", [ref], (error, results) =&gt; {\n        if (error) {\n            throw error;\n        } else {\n            res.render(\"edit\", { producto: results[0] });\n        }\n    });\n});\n</code></pre> <p>Sources: src/router.js L186-L196</p> <p>src/router.js L198-L208</p> <p>src/router.js L398-L407</p>"},{"location":"Routing-System.html#query-parameters","title":"Query Parameters","text":"<p>API routes use query parameters for filtering and data retrieval.</p> <p>Query Parameter Usage:</p> <ul> <li><code>/api/mensajes?con=&lt;username&gt;</code> - Query parameter <code>con</code> specifies user for message retrieval (line 230)</li> <li><code>/set-lang/:lang?returnTo=&lt;path&gt;</code> - Query parameter <code>returnTo</code> specifies redirect destination (line 400)</li> </ul> <p>Example: Messages Query</p> <pre><code>// Line 230\nconst usuario = req.query.con; // Extract query parameter\n</code></pre> <p>Sources: src/router.js L230</p> <p>src/router.js L400</p>"},{"location":"Routing-System.html#database-integration","title":"Database Integration","text":"<p>The router directly executes MySQL queries for most operations using the <code>db</code> connection object imported from <code>database/db.js</code>.</p>"},{"location":"Routing-System.html#database-query-pattern","title":"Database Query Pattern","text":"<pre><code>flowchart TD\n\nRouteHandler[\"Route Handler\"]\nDBQuery[\"db.query(sql, params, callback)\"]\nCallback[\"Callback Function\"]\nErrorCheck[\"error&lt;br&gt;parameter?\"]\nErrorHandler[\"throw error or&lt;br&gt;res.status(500)\"]\nProcessResults[\"Process results\"]\nResponse[\"Send Response&lt;br&gt;res.render() or res.json()\"]\n\nRouteHandler --&gt; DBQuery\nDBQuery --&gt; Callback\nCallback --&gt; ErrorCheck\nErrorCheck --&gt; ErrorHandler\nErrorCheck --&gt; ProcessResults\nProcessResults --&gt; Response</code></pre> <p>Sources: src/router.js L5</p> <p>src/router.js L121-L133</p>"},{"location":"Routing-System.html#query-examples-by-route-type","title":"Query Examples by Route Type","text":"<p>View Rendering Queries:</p> <pre><code>// Lines 121-133 - Admin page\ndb.query(\"SELECT * FROM productos\", (error, results) =&gt; {\n    if (error) {\n        throw error;\n    } else {\n        res.render(\"admin\", {\n            productos: results,\n            user: req.user,\n            login: true,\n            rol: req.user.rol,\n        });\n    }\n});\n</code></pre> <p>API Endpoint Queries:</p> <pre><code>// Lines 236-252 - Get messages for user\nconst sql = `\nSELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE \n  (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n`;\n\ndb.query(sql, [usuario, usuario], (err, results) =&gt; {\n    if (err) {\n        console.error(\"\u274c Error al consultar mensajes:\", err);\n        return res.status(500).json({ error: \"Error al obtener mensajes\" });\n    }\n    res.json(results);\n});\n</code></pre> <p>Sources: src/router.js L121-L133</p> <p>src/router.js L236-L252</p>"},{"location":"Routing-System.html#complex-sql-queries","title":"Complex SQL Queries","text":"<p>The <code>/api/usuarios-conversaciones</code> endpoint uses a complex SQL query with UNION and subqueries to find all non-admin users who have conversations with admins.</p> <pre><code>// Lines 292-304\nconst sql = `\nSELECT DISTINCT usuario\nFROM (\n  SELECT de_usuario AS usuario FROM mensajes\n  WHERE para_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n\n  UNION\n\n  SELECT para_usuario AS usuario FROM mensajes\n  WHERE de_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n) AS conversaciones\nWHERE usuario NOT IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n`;\n</code></pre> <p>Query Logic:</p> <ol> <li>First subquery: Users who sent messages TO admins</li> <li>Second subquery: Users who received messages FROM admins</li> <li>UNION: Combine both sets</li> <li>WHERE: Exclude admin users from results</li> <li>DISTINCT: Remove duplicates</li> </ol> <p>Sources: src/router.js L292-L314</p>"},{"location":"Routing-System.html#language-switching-system","title":"Language Switching System","text":"<p>The <code>/set-lang/:lang</code> route implements internationalization by storing language preferences in cookies and redirecting back to the originating page.</p> <pre><code>flowchart TD\n\nRequest[\"GET /set-lang/:lang?returnTo=/page\"]\nExtractParams[\"Extract :lang and&lt;br&gt;?returnTo parameters\"]\nValidateLang[\"lang in&lt;br&gt;['es', 'en']?\"]\nSetCookie[\"res.cookie('lang', lang,&lt;br&gt;{maxAge: 900000, httpOnly: true})\"]\nSkipCookie[\"Skip cookie setting\"]\nRedirect[\"res.redirect(returnTo || '/')\"]\n\nRequest --&gt; ExtractParams\nExtractParams --&gt; ValidateLang\nValidateLang --&gt; SetCookie\nValidateLang --&gt; SkipCookie\nSetCookie --&gt; Redirect\nSkipCookie --&gt; Redirect</code></pre> <p>Sources: src/router.js L398-L407</p> <p>Implementation:</p> <pre><code>// Lines 398-407\nrouter.get('/set-lang/:lang', (req, res) =&gt; {\n    const lang = req.params.lang;\n    const returnTo = req.query.returnTo || '/';\n\n    if (['es', 'en'].includes(lang)) {\n        res.cookie('lang', lang, { maxAge: 900000, httpOnly: true });\n    }\n\n    res.redirect(returnTo);\n});\n</code></pre> <p>Cookie Settings:</p> <ul> <li><code>maxAge: 900000</code> - 15 minutes (900,000 milliseconds)</li> <li><code>httpOnly: true</code> - Not accessible via JavaScript for security</li> </ul> <p>Sources: src/router.js L398-L407</p>"},{"location":"Routing-System.html#swaggeropenapi-documentation","title":"Swagger/OpenAPI Documentation","text":"<p>Several routes include JSDoc-style Swagger annotations for API documentation. These annotations describe request/response schemas, authentication requirements, and response codes.</p> <p>Documented Routes:</p> <ul> <li>GET <code>/</code> - Home page (lines 40-58)</li> <li>GET <code>/admin</code> - Admin page (lines 83-118)</li> <li>GET <code>/edit/:id</code> - Edit product (lines 157-184)</li> <li>POST <code>/auth</code> - Authentication (lines 486-530)</li> </ul> <p>Example Swagger Annotation:</p> <pre><code>// Lines 486-530\n/**\n * @swagger\n * /auth:\n *   post:\n *     summary: Autentica al usuario y establece una cookie JWT\n *     description: Valida las credenciales del usuario. Si son correctas, genera un token JWT y lo guarda en una cookie HTTP (`token`). Luego renderiza la vista `/`.\n *     tags:\n *       - Autenticaci\u00f3n\n *     requestBody:\n *       required: true\n *       content:\n *         application/x-www-form-urlencoded:\n *           schema:\n *             type: object\n *             required:\n *               - user\n *               - pass\n *             properties:\n *               user:\n *                 type: string\n *                 description: Nombre de usuario\n *               pass:\n *                 type: string\n *                 description: Contrase\u00f1a del usuario\n *     responses:\n *       200:\n *         description: Autenticaci\u00f3n exitosa. Se establece una cookie JWT y se renderiza la vista `/`.\n *         headers:\n *           Set-Cookie:\n *             description: Cookie HTTP que contiene el JWT (token v\u00e1lido por 1 hora)\n *             schema:\n *               type: string\n *               example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; Path=/; HttpOnly; Max-Age=3600\n *         content:\n *           text/html:\n *             schema:\n *               type: string\n *               example: \"&lt;html&gt;...&lt;/html&gt;\"\n *       400:\n *         description: Usuario o contrase\u00f1a faltantes\n *       401:\n *         description: Credenciales incorrectas\n *       500:\n *         description: Error interno del servidor o de base de datos\n */\n</code></pre> <p>Sources: src/router.js L40-L58</p> <p>src/router.js L83-L118</p> <p>src/router.js L157-L184</p> <p>src/router.js L486-L530</p>"},{"location":"Routing-System.html#error-handling-patterns","title":"Error Handling Patterns","text":"<p>The router implements multiple error handling patterns depending on the route type and error scenario.</p>"},{"location":"Routing-System.html#error-handling-by-route-type","title":"Error Handling by Route Type","text":"Route Type Error Pattern Response View Routes <code>throw error</code> or conditional render 500 error or error alert in view API Routes <code>res.status(500).json({ error: \"...\" })</code> JSON error object with status code PDF Routes <code>res.status(500).send(\"Error message\")</code> Plain text error with status code Database Errors <code>throw error</code> or console.error + status Varies by route type <p>View Route Error Example:</p> <pre><code>// Lines 188-195 - Edit product\ndb.query(\"SELECT * FROM productos WHERE ref = ?\", [ref], (error, results) =&gt; {\n    if (error) {\n        throw error;  // Handled by Express error handler\n    } else {\n        res.render(\"edit\", { producto: results[0] });\n    }\n});\n</code></pre> <p>API Route Error Example:</p> <pre><code>// Lines 244-248 - Get messages API\ndb.query(sql, [usuario, usuario], (err, results) =&gt; {\n    if (err) {\n        console.error(\"\u274c Error al consultar mensajes:\", err);\n        return res.status(500).json({ error: \"Error al obtener mensajes\" });\n    }\n    res.json(results);\n});\n</code></pre> <p>Sources: src/router.js L188-L195</p> <p>src/router.js L244-L252</p> <p>src/router.js L318-L320</p> <p>src/router.js L348-L351</p>"},{"location":"Routing-System.html#validation-error-handling","title":"Validation Error Handling","text":"<p>The registration route has special handling for validation errors, re-rendering the form with error messages and preserving user input.</p> <pre><code>// Lines 430-442\nconst errors = validationResult(req);\nif (!errors.isEmpty()) {\n    const valores = req.body;  // Preserve form values\n    const validacionErrores = errors.array();  // Extract errors\n    res.render(\"register\", {\n        validaciones: validacionErrores,  // Pass errors to template\n        valores: valores,  // Pass values to template\n    });\n}\n</code></pre> <p>Sources: src/router.js L430-L442</p>"},{"location":"Routing-System.html#module-export","title":"Module Export","text":"<p>The router is exported as a CommonJS module and imported by <code>index.js</code> where it is mounted at the root path.</p> <pre><code>// Line 607\nmodule.exports = router;\n</code></pre> <p>Usage in index.js:</p> <pre><code>const router = require('./src/router');\napp.use('/', router);\n</code></pre> <p>Sources: src/router.js L607</p> <p>index.js</p>"},{"location":"Security-Measures.html","title":"Security Measures","text":"<p>Relevant source files * index.js * package-lock.json * src/router.js</p> <p>This page documents the comprehensive security measures implemented in the registro-sesiones application to protect against common web vulnerabilities and attacks. These security layers work together to provide defense-in-depth protection for user data, authentication flows, and application integrity.</p> <p>For authentication and authorization mechanisms, see Authentication &amp; Authorization. For JWT token management specifically, see JWT Token Management. For middleware authentication verification, see verifyToken Middleware and verifyAdmin Middleware.</p>"},{"location":"Security-Measures.html#security-architecture-overview","title":"Security Architecture Overview","text":"<p>The application implements a multi-layered security architecture where each incoming request passes through multiple security checkpoints before reaching business logic. This defense-in-depth approach ensures that even if one security measure fails, others remain in place to protect the system.</p> <pre><code>flowchart TD\n\nRequest[\"Incoming HTTP Request\"]\nHelmet[\"helmet&lt;br&gt;Security Headers\"]\nRateLimit[\"express-rate-limit&lt;br&gt;Request Throttling\"]\nCookieParser[\"cookie-parser&lt;br&gt;Cookie Parsing\"]\nBodyParser[\"Body Parsers&lt;br&gt;urlencoded + json\"]\nInputVal[\"express-validator&lt;br&gt;Input Validation\"]\nAuthLimiter[\"authLimiter&lt;br&gt;Login Rate Limiting\"]\nVerifyToken[\"verifyToken&lt;br&gt;JWT Validation\"]\nVerifyAdmin[\"verifyAdmin&lt;br&gt;Role Check\"]\nBcrypt[\"bcryptjs&lt;br&gt;Password Hashing\"]\nJWTSign[\"JWT Signing&lt;br&gt;Token Generation\"]\nHttpOnlyCookie[\"HTTP-Only Cookies&lt;br&gt;Secure Storage\"]\nRouteHandler[\"Route Handler\"]\nDatabase[\"MySQL Database\"]\n\nRequest --&gt; Helmet\nBodyParser --&gt; InputVal\nAuthLimiter --&gt; VerifyToken\nVerifyAdmin --&gt; RouteHandler\nRouteHandler --&gt; Bcrypt\nRouteHandler --&gt; JWTSign\nBcrypt --&gt; Database\n\nsubgraph subGraph3 [\"Data Security\"]\n    Bcrypt\n    JWTSign\n    HttpOnlyCookie\n    JWTSign --&gt; HttpOnlyCookie\nend\n\nsubgraph subGraph2 [\"Authentication Layer\"]\n    VerifyToken\n    VerifyAdmin\n    VerifyToken --&gt; VerifyAdmin\nend\n\nsubgraph subGraph1 [\"Route-Level Security\"]\n    InputVal\n    AuthLimiter\n    InputVal --&gt; AuthLimiter\nend\n\nsubgraph subGraph0 [\"Security Middleware Stack\"]\n    Helmet\n    RateLimit\n    CookieParser\n    BodyParser\n    Helmet --&gt; RateLimit\n    RateLimit --&gt; CookieParser\n    CookieParser --&gt; BodyParser\nend</code></pre> <p>Sources: index.js L15-L48</p> <p>src/router.js L1-L607</p>"},{"location":"Security-Measures.html#security-middleware-module","title":"Security Middleware Module","text":"<p>The application uses a centralized security middleware module that is applied globally to all routes. This middleware is loaded early in the application bootstrap sequence to ensure all requests are protected.</p>"},{"location":"Security-Measures.html#implementation","title":"Implementation","text":"<p>The security middleware is imported and registered in the main application entry point:</p> Configuration Point Code Reference Purpose Middleware import index.js L15 Loads security middleware module Middleware registration index.js L45 Applies to all routes before routing Position in stack After static files, before routing Protects dynamic routes only <p>The middleware is registered with <code>app.use(securityMiddleware)</code>, which means it applies to every request that isn't serving static assets from <code>/resources</code>. This positioning is intentional\u2014static assets don't need the same security processing as dynamic routes.</p> <p>Sources: index.js L15</p> <p>index.js L45</p>"},{"location":"Security-Measures.html#http-security-headers-helmet","title":"HTTP Security Headers (Helmet)","text":"<p>The application uses the <code>helmet</code> package to set secure HTTP headers that protect against common web vulnerabilities including cross-site scripting (XSS), clickjacking, and content sniffing attacks.</p>"},{"location":"Security-Measures.html#helmet-configuration","title":"Helmet Configuration","text":"<pre><code>flowchart TD\n\nCSP[\"Content-Security-Policy&lt;br&gt;XSS Protection\"]\nXFrame[\"X-Frame-Options&lt;br&gt;Clickjacking Protection\"]\nXContent[\"X-Content-Type-Options&lt;br&gt;MIME Sniffing Protection\"]\nHSTS[\"Strict-Transport-Security&lt;br&gt;Force HTTPS\"]\nXDNSPrefetch[\"X-DNS-Prefetch-Control&lt;br&gt;DNS Prefetch Control\"]\nBrowser[\"Browser\"]\nApp[\"Express Application\"]\n\nApp --&gt; Browser\nCSP --&gt; Browser\nXFrame --&gt; Browser\nXContent --&gt; Browser\nHSTS --&gt; Browser\nXDNSPrefetch --&gt; Browser\n\nsubgraph subGraph0 [\"Helmet Security Headers\"]\n    CSP\n    XFrame\n    XContent\n    HSTS\n    XDNSPrefetch\nend</code></pre>"},{"location":"Security-Measures.html#package-details","title":"Package Details","text":"Package Version Purpose <code>helmet</code> ^8.1.0 Secure HTTP headers middleware <p>The <code>helmet</code> middleware is configured as part of the <code>securityMiddleware</code> module and automatically sets multiple security headers with sensible defaults.</p> <p>Sources: package-lock.json L1740-L1748</p> <p>index.js L45</p>"},{"location":"Security-Measures.html#rate-limiting","title":"Rate Limiting","text":"<p>The application implements two levels of rate limiting to protect against brute-force attacks and resource exhaustion: global rate limiting and authentication-specific rate limiting.</p>"},{"location":"Security-Measures.html#global-rate-limiting","title":"Global Rate Limiting","text":"<p>Global rate limiting is applied through the <code>express-rate-limit</code> middleware, which is part of the security middleware stack.</p>"},{"location":"Security-Measures.html#authentication-rate-limiting","title":"Authentication Rate Limiting","text":"<p>A specialized rate limiter protects the authentication endpoint to prevent brute-force password attacks.</p> <pre><code>flowchart TD\n\nLoginRequest[\"POST /auth Request\"]\nAuthLimiter[\"authLimiter Middleware\"]\nCheckCount[\"Check Request Count&lt;br&gt;for IP Address\"]\nDecision[\"Within Limit?\"]\nAllowRequest[\"Allow Request&lt;br&gt;Process Login\"]\nBlockRequest[\"Block Request&lt;br&gt;429 Too Many Requests\"]\nBcryptCompare[\"bcrypt.compare&lt;br&gt;Verify Password\"]\nJWTGeneration[\"Generate JWT\"]\n\nLoginRequest --&gt; AuthLimiter\nAuthLimiter --&gt; CheckCount\nCheckCount --&gt; Decision\nDecision --&gt; AllowRequest\nDecision --&gt; BlockRequest\nAllowRequest --&gt; BcryptCompare\nBcryptCompare --&gt; JWTGeneration</code></pre>"},{"location":"Security-Measures.html#implementation-details","title":"Implementation Details","text":"<p>The authentication limiter is imported and applied to the login route:</p> Implementation Point Code Reference Details Limiter import src/router.js L21 <code>const limiter = require(\"./middlewares/authLimiter\")</code> Limiter application src/router.js L532 <code>router.post(\"/auth\", limiter, async (req, res)</code> <p>The limiter is placed before the route handler, ensuring that rate limiting occurs before any authentication logic executes.</p> <p>Sources: package-lock.json L1371-L1382</p> <p>src/router.js L21</p> <p>src/router.js L532</p>"},{"location":"Security-Measures.html#input-validation","title":"Input Validation","text":"<p>The application uses <code>express-validator</code> to sanitize and validate user inputs, preventing injection attacks and ensuring data integrity.</p>"},{"location":"Security-Measures.html#validation-implementation","title":"Validation Implementation","text":"<pre><code>flowchart TD\n\nFormInput[\"User Form Input\"]\nBody[\"body validators\"]\nUserVal[\"user validator&lt;br&gt;min 4 chars\"]\nNameVal[\"name validator&lt;br&gt;min 4 chars\"]\nPassVal[\"pass validator&lt;br&gt;min 4 chars\"]\nEmailVal[\"email validator&lt;br&gt;isEmail\"]\nAgeVal[\"edad validator&lt;br&gt;isNumeric\"]\nValidate[\"validationResult\"]\nDecision[\"Errors?\"]\nRenderError[\"Render Form&lt;br&gt;with Errors\"]\nProcessData[\"Process&lt;br&gt;Registration\"]\n\nFormInput --&gt; Body\nUserVal --&gt; Validate\nNameVal --&gt; Validate\nPassVal --&gt; Validate\nEmailVal --&gt; Validate\nAgeVal --&gt; Validate\nValidate --&gt; Decision\nDecision --&gt; RenderError\nDecision --&gt; ProcessData\n\nsubgraph subGraph0 [\"express-validator Chain\"]\n    Body\n    UserVal\n    NameVal\n    PassVal\n    EmailVal\n    AgeVal\n    Body --&gt; UserVal\n    Body --&gt; NameVal\n    Body --&gt; PassVal\n    Body --&gt; EmailVal\n    Body --&gt; AgeVal\nend</code></pre>"},{"location":"Security-Measures.html#registration-validation-rules","title":"Registration Validation Rules","text":"<p>The registration endpoint implements comprehensive validation:</p> Field Validation Rules Code Reference <code>user</code> Exists, min 4 characters src/router.js L416-L419 <code>name</code> Min 4 characters src/router.js L420-L422 <code>pass</code> Min 4 characters src/router.js L423-L425 <code>email</code> Valid email format src/router.js L426 <code>edad</code> Numeric value src/router.js L427"},{"location":"Security-Measures.html#validation-flow","title":"Validation Flow","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant Router\n  participant express-validator\n  participant Handler\n\n  Client-&gt;&gt;Router: POST /register with data\n  Router-&gt;&gt;express-validator: body() validators\n  express-validator-&gt;&gt;express-validator: Check each field\n  express-validator-&gt;&gt;Handler: Continue to handler\n  Handler-&gt;&gt;Handler: validationResult(req)\n  loop [Has Errors]\n    Handler-&gt;&gt;Handler: Extract errors array\n    Handler-&gt;&gt;Client: Render form with errors\n    Handler-&gt;&gt;Handler: Process registration\n    Handler-&gt;&gt;Client: Success response\n  end</code></pre> <p>The validation error handling preserves user input to improve user experience:</p> <ul> <li>src/router.js L430-L441 : Error handling that preserves form values</li> <li>src/router.js L435-L440 : Rendering with validation errors and original values</li> </ul> <p>Sources: package-lock.json L1423-L1435</p> <p>src/router.js L3</p> <p>src/router.js L414-L428</p> <p>src/router.js L430-L441</p>"},{"location":"Security-Measures.html#password-hashing-with-bcrypt","title":"Password Hashing with bcrypt","text":"<p>All user passwords are hashed using <code>bcryptjs</code> before storage, ensuring that even if the database is compromised, plaintext passwords remain protected.</p>"},{"location":"Security-Measures.html#hashing-implementation","title":"Hashing Implementation","text":"<pre><code>flowchart TD\n\nInputPwd[\"User Input Password\"]\nBcryptCompare[\"bcrypt.compare\"]\nStoredHash[\"Stored Hash&lt;br&gt;from database\"]\nResult[\"Match?\"]\nAuthenticated[\"Generate JWT\"]\nRejected[\"Show Error\"]\nPlaintextPwd[\"Plaintext Password\"]\nBcryptHash[\"bcrypt.hash&lt;br&gt;cost factor: 8\"]\nHashedPwd[\"Password Hash\"]\nDatabase[\"MySQL usuarios Table\"]\n\nsubgraph subGraph1 [\"Login Flow\"]\n    InputPwd\n    BcryptCompare\n    StoredHash\n    Result\n    Authenticated\n    Rejected\n    InputPwd --&gt; BcryptCompare\n    StoredHash --&gt; BcryptCompare\n    BcryptCompare --&gt; Result\n    Result --&gt; Authenticated\n    Result --&gt; Rejected\nend\n\nsubgraph subGraph0 [\"Registration Flow\"]\n    PlaintextPwd\n    BcryptHash\n    HashedPwd\n    Database\n    PlaintextPwd --&gt; BcryptHash\n    BcryptHash --&gt; HashedPwd\n    HashedPwd --&gt; Database\nend</code></pre>"},{"location":"Security-Measures.html#code-implementation","title":"Code Implementation","text":"Operation Code Reference Details Import bcrypt src/router.js L4 <code>const bcrypt = require(\"bcryptjs\")</code> Hash password src/router.js L453 <code>await bcrypt.hash(pass, 8)</code> - cost factor 8 Store hash src/router.js L456-L464 Insert hashed password into database Compare password src/router.js L541-L543 <code>await bcrypt.compare(pass, results[0].pass)</code>"},{"location":"Security-Measures.html#hashing-parameters","title":"Hashing Parameters","text":"<p>The application uses a cost factor of 8 for bcrypt hashing src/router.js L453</p> <p>which provides a balance between security and performance. The cost factor determines the computational cost of hashing\u2014higher values increase security but also increase processing time.</p>"},{"location":"Security-Measures.html#security-considerations","title":"Security Considerations","text":"<p>The authentication flow ensures timing-attack resistance by:</p> <ol> <li>Checking if user exists in database</li> <li>Comparing password hashes using bcrypt's constant-time comparison</li> <li>Returning the same error message for both invalid username and invalid password</li> </ol> <p>This prevents attackers from enumerating valid usernames through timing analysis.</p> <p>Sources: package-lock.json L523-L531</p> <p>src/router.js L4</p> <p>src/router.js L453</p> <p>src/router.js L537-L556</p>"},{"location":"Security-Measures.html#jwt-security-implementation","title":"JWT Security Implementation","text":"<p>JSON Web Tokens (JWT) are used for stateless authentication, with several security measures in place to protect token integrity and prevent unauthorized access.</p>"},{"location":"Security-Measures.html#jwt-generation-and-signing","title":"JWT Generation and Signing","text":"<pre><code>flowchart TD\n\nUserData[\"Authenticated User&lt;br&gt;from Database\"]\nPayloadUser[\"user: usuario\"]\nPayloadName[\"name: nombre\"]\nPayloadRol[\"rol: rol\"]\nPayloadImg[\"imagen: imagen\"]\nJWTSecret[\"JWT_SECRET&lt;br&gt;from .env\"]\nJWTSign[\"jwt.sign\"]\nToken[\"Signed JWT Token&lt;br&gt;valid for 1 hour\"]\nHTTPOnlyCookie[\"HTTP-Only Cookie&lt;br&gt;name: token\"]\n\nUserData --&gt; PayloadUser\nUserData --&gt; PayloadName\nUserData --&gt; PayloadRol\nUserData --&gt; PayloadImg\nPayloadUser --&gt; JWTSign\nPayloadName --&gt; JWTSign\nPayloadRol --&gt; JWTSign\nPayloadImg --&gt; JWTSign\nJWTSecret --&gt; JWTSign\nJWTSign --&gt; Token\nToken --&gt; HTTPOnlyCookie\n\nsubgraph subGraph0 [\"JWT Payload\"]\n    PayloadUser\n    PayloadName\n    PayloadRol\n    PayloadImg\nend</code></pre>"},{"location":"Security-Measures.html#jwt-configuration","title":"JWT Configuration","text":"Security Feature Implementation Code Reference Secret key source Environment variable <code>JWT_SECRET</code> src/router.js L567 Token expiration 1 hour src/router.js L567 Cookie storage HTTP-only cookie src/router.js L570-L574 Cookie security <code>httpOnly: true</code> src/router.js L571 Cookie lifetime 3600000ms (1 hour) src/router.js L573"},{"location":"Security-Measures.html#payload-structure","title":"Payload Structure","text":"<p>The JWT payload contains minimal user information required for authorization:</p> <pre><code>// Payload structure at src/router.js:559-564\n{\n  user: results[0].usuario,    // Username for identification\n  name: results[0].nombre,      // Display name\n  rol: results[0].rol,          // Role for authorization\n  imagen: results[0].imagen     // Profile image filename\n}\n</code></pre> <p>The payload excludes sensitive information like password hashes, ensuring that even if a token is intercepted, minimal information is exposed.</p>"},{"location":"Security-Measures.html#token-verification-flow","title":"Token Verification Flow","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant Router\n  participant VerifyToken\n  participant jsonwebtoken\n\n  Client-&gt;&gt;Router: Request with cookie\n  Router-&gt;&gt;VerifyToken: verifyToken middleware\n  VerifyToken-&gt;&gt;VerifyToken: Extract token from cookie\n  loop [Valid token]\n    VerifyToken-&gt;&gt;jsonwebtoken: jwt.verify(token, JWT_SECRET)\n    jsonwebtoken-&gt;&gt;VerifyToken: Return payload\n    VerifyToken-&gt;&gt;VerifyToken: Attach user to req.user\n    VerifyToken-&gt;&gt;Router: next()\n    Router-&gt;&gt;Client: Process request\n    jsonwebtoken-&gt;&gt;VerifyToken: Throw error\n    VerifyToken-&gt;&gt;Client: 401 Unauthorized\n    VerifyToken-&gt;&gt;Client: 401 Unauthorized\n  end</code></pre> <p>Sources: src/router.js L15</p> <p>src/router.js L559-L574</p> <p>src/router.js L62</p>"},{"location":"Security-Measures.html#http-only-cookie-security","title":"HTTP-Only Cookie Security","text":"<p>Tokens are stored in HTTP-only cookies rather than localStorage or sessionStorage, providing enhanced security against cross-site scripting (XSS) attacks.</p>"},{"location":"Security-Measures.html#cookie-configuration","title":"Cookie Configuration","text":"<pre><code>flowchart TD\n\nJWTToken[\"JWT Token\"]\nHttpOnly[\"httpOnly: true&lt;br&gt;Not accessible via JavaScript\"]\nSecure[\"secure: false&lt;br&gt;Set true in production\"]\nMaxAge[\"maxAge: 3600000&lt;br&gt;1 hour lifetime\"]\nPath[\"path: /&lt;br&gt;Available on all routes\"]\nSetCookie[\"res.cookie\"]\nBrowser[\"Browser Cookie Store\"]\n\nJWTToken --&gt; SetCookie\nHttpOnly --&gt; SetCookie\nSecure --&gt; SetCookie\nMaxAge --&gt; SetCookie\nPath --&gt; SetCookie\nSetCookie --&gt; Browser\n\nsubgraph subGraph0 [\"Cookie Options\"]\n    HttpOnly\n    Secure\n    MaxAge\n    Path\nend</code></pre>"},{"location":"Security-Measures.html#cookie-options","title":"Cookie Options","text":"Option Value Purpose Code Reference <code>httpOnly</code> <code>true</code> Prevents JavaScript access to cookie src/router.js L571 <code>secure</code> <code>false</code> (dev) Should be <code>true</code> in production for HTTPS src/router.js L572 <code>maxAge</code> <code>3600000</code> Cookie expires after 1 hour src/router.js L573 Cookie name <code>\"token\"</code> Cookie identifier src/router.js L570"},{"location":"Security-Measures.html#xss-protection","title":"XSS Protection","text":"<p>The <code>httpOnly</code> flag prevents malicious JavaScript from accessing the authentication token:</p> <ul> <li>Even if an XSS vulnerability exists, attackers cannot steal the token via <code>document.cookie</code></li> <li>The browser automatically includes the cookie in requests to the same origin</li> <li>Token theft requires server-side vulnerabilities, not just client-side XSS</li> </ul>"},{"location":"Security-Measures.html#cookie-lifecycle","title":"Cookie Lifecycle","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; NoToken : \"Initial state\"\n    NoToken --&gt; TokenSet : \"POST /auth successful\"\n    TokenSet --&gt; TokenValid : \"Within 1 hour\"\n    TokenValid --&gt; TokenExpired : \"After 1 hour\"\n    TokenValid --&gt; TokenCleared : \"GET /logout\"\n    TokenExpired --&gt; NoToken : \"Auto-removal\"\n    TokenCleared --&gt; NoToken : \"Auto-removal\"\n    NoToken --&gt; [*] : \"POST /auth successful\"</code></pre>"},{"location":"Security-Measures.html#token-removal","title":"Token Removal","text":"<p>The logout route clears the authentication cookie:</p> <ul> <li>src/router.js L215-L218 : <code>res.clearCookie(\"token\")</code> removes the token cookie</li> <li>Browser immediately stops sending the token with subsequent requests</li> <li>User is effectively logged out without server-side session management</li> </ul> <p>Sources: src/router.js L570-L574</p> <p>src/router.js L215-L218</p> <p>src/router.js L61</p>"},{"location":"Security-Measures.html#security-best-practices-summary","title":"Security Best Practices Summary","text":"<p>The application implements multiple layers of security measures that work together to provide comprehensive protection:</p>"},{"location":"Security-Measures.html#security-checklist","title":"Security Checklist","text":"Security Measure Status Implementation Secure HTTP headers \u2713 Implemented <code>helmet</code> middleware Rate limiting (global) \u2713 Implemented <code>express-rate-limit</code> Rate limiting (authentication) \u2713 Implemented <code>authLimiter</code> on <code>/auth</code> Input validation \u2713 Implemented <code>express-validator</code> on forms Password hashing \u2713 Implemented <code>bcryptjs</code> with cost factor 8 Secure token generation \u2713 Implemented <code>jsonwebtoken</code> with secret HTTP-only cookies \u2713 Implemented <code>httpOnly: true</code> flag Token expiration \u2713 Implemented 1-hour token lifetime HTTPS enforcement \u26a0 Partial <code>secure: false</code> in development"},{"location":"Security-Measures.html#security-middleware-execution-order","title":"Security Middleware Execution Order","text":"<pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nLayer1[\"Unsupported markdown: list\"]\nLayer2[\"Unsupported markdown: list\"]\nLayer3[\"Unsupported markdown: list\"]\nLayer4[\"Unsupported markdown: list\"]\nLayer5[\"Unsupported markdown: list\"]\nLayer6[\"Unsupported markdown: list\"]\nLayer7[\"Unsupported markdown: list\"]\nLayer8[\"Unsupported markdown: list\"]\nLayer9[\"authLimiter&lt;br&gt;Login Rate Limit\"]\nLayer10[\"express-validator&lt;br&gt;Input Validation\"]\nLayer11[\"verifyToken&lt;br&gt;JWT Verification\"]\nLayer12[\"verifyAdmin&lt;br&gt;Role Verification\"]\n\nRequest --&gt; Layer1\nLayer1 --&gt; Layer2\nLayer2 --&gt; Layer3\nLayer3 --&gt; Layer4\nLayer4 --&gt; Layer5\nLayer5 --&gt; Layer6\nLayer6 --&gt; Layer7\nLayer7 --&gt; Layer8\nLayer8 --&gt; Layer9\nLayer8 --&gt; Layer10\nLayer8 --&gt; Layer11\nLayer8 --&gt; Layer12\n\nsubgraph subGraph0 [\"Per-Route Security\"]\n    Layer9\n    Layer10\n    Layer11\n    Layer12\nend</code></pre>"},{"location":"Security-Measures.html#file-level-security-overview","title":"File-Level Security Overview","text":"File Security Responsibility Key Components index.js L15-L48 Global security middleware registration <code>securityMiddleware</code>, <code>helmet</code> src/router.js L21 Authentication rate limiting <code>authLimiter</code> src/router.js L3 Input validation <code>express-validator</code> src/router.js L4 Password hashing <code>bcryptjs</code> src/router.js L15 Token signing/verification <code>jsonwebtoken</code> src/middlewares/verifyToken.js JWT validation middleware Token verification logic src/middlewares/verifyAdmin.js Role-based access control Admin role verification <p>Sources: index.js L15-L48</p> <p>src/router.js L1-L607</p> <p>package-lock.json L1-L2896</p>"},{"location":"Socket.IO-Server-Setup.html","title":"Socket.IO Server Setup","text":"<p>Relevant source files * index.js * package-lock.json * src/sockets/socketHandler.js</p>"},{"location":"Socket.IO-Server-Setup.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document covers the initialization and configuration of the Socket.IO server, including server creation, Socket.IO attachment to the HTTP server, authentication middleware registration, and connection handler setup. For information about WebSocket authentication mechanisms and JWT validation, see WebSocket Authentication. For room-based routing and user organization, see Room Management. For event handling and message processing, see Message Handling.</p>"},{"location":"Socket.IO-Server-Setup.html#server-architecture-overview","title":"Server Architecture Overview","text":"<p>The Socket.IO server shares the same HTTP server instance as the Express application, enabling both traditional HTTP request-response patterns and WebSocket bidirectional communication on a single port.</p> <pre><code>flowchart TD\n\nHTTPServer[\"http.createServer(app)\"]\nExpressApp[\"Express Application&lt;br&gt;app = express()\"]\nSocketIOServer[\"Socket.IO Server&lt;br&gt;io = socketIO(server)\"]\nSetupSocket[\"setupSocket(io)&lt;br&gt;src/sockets/socketHandler.js\"]\nAuthMiddleware[\"io.use()&lt;br&gt;JWT Authentication Middleware\"]\nConnectionHandler[\"io.on('connection')&lt;br&gt;Socket Event Handlers\"]\nListenPort[\"Port 3000\"]\n\nExpressApp --&gt; HTTPServer\nHTTPServer --&gt; SocketIOServer\nSocketIOServer --&gt; SetupSocket\nSetupSocket --&gt; AuthMiddleware\nSetupSocket --&gt; ConnectionHandler\nHTTPServer --&gt; ListenPort</code></pre> <p>Sources: index.js L8-L14</p> <p>index.js L56-L65</p>"},{"location":"Socket.IO-Server-Setup.html#http-server-and-socketio-initialization","title":"HTTP Server and Socket.IO Initialization","text":""},{"location":"Socket.IO-Server-Setup.html#creating-the-http-server","title":"Creating the HTTP Server","text":"<p>The HTTP server is created using Node.js's built-in <code>http</code> module, wrapping the Express application instance. This approach allows Socket.IO to attach to the same server that handles HTTP requests.</p> Step Code Entity Location 1. Require HTTP module <code>const http = require(\"http\")</code> index.js L8 2. Require Socket.IO <code>const socketIO = require(\"socket.io\")</code> index.js L9 3. Create HTTP server <code>const server = http.createServer(app)</code> index.js L10 4. Initialize Socket.IO <code>const io = socketIO(server)</code> index.js L12 <p>The <code>server</code> constant holds the HTTP server instance that both Express and Socket.IO use. The Express app is passed to <code>http.createServer()</code>, which wraps it as an HTTP request listener.</p> <p>Sources: index.js L8-L12</p>"},{"location":"Socket.IO-Server-Setup.html#socketio-server-instantiation","title":"Socket.IO Server Instantiation","text":"<p>The Socket.IO server is instantiated by calling <code>socketIO(server)</code>, where <code>server</code> is the HTTP server instance. This creates the <code>io</code> object, which represents the Socket.IO server and provides methods for middleware registration and event handling.</p> <pre><code>sequenceDiagram\n  participant index.js\n  participant http.createServer\n  participant Express App\n  participant Socket.IO Server\n\n  index.js-&gt;&gt;Express App: require(\"express\")\n  index.js-&gt;&gt;Express App: app = express()\n  index.js-&gt;&gt;http.createServer: http.createServer(app)\n  http.createServer--&gt;&gt;index.js: server\n  index.js-&gt;&gt;Socket.IO Server: socketIO(server)\n  Socket.IO Server--&gt;&gt;index.js: io\n  note over index.js,Socket.IO Server: Both Express and Socket.IO</code></pre> <p>Sources: index.js L2-L12</p>"},{"location":"Socket.IO-Server-Setup.html#socket-handler-setup-integration","title":"Socket Handler Setup Integration","text":""},{"location":"Socket.IO-Server-Setup.html#setupsocket-function-registration","title":"setupSocket Function Registration","text":"<p>The <code>setupSocket</code> function from src/sockets/socketHandler.js</p> <p>is invoked to configure authentication middleware and connection handlers. This function encapsulates all Socket.IO configuration logic.</p> <pre><code>flowchart TD\n\nIO[\"io&lt;br&gt;(Socket.IO Server Instance)\"]\nSetup[\"setupSocket(io)&lt;br&gt;src/sockets/socketHandler.js\"]\nAuthMW[\"io.use((socket, next) =&gt; {...})&lt;br&gt;JWT Authentication\"]\nConnHandler[\"io.on('connection', (socket) =&gt; {...})&lt;br&gt;Event Handlers\"]\n\nIO --&gt; Setup\nSetup --&gt; AuthMW\nSetup --&gt; ConnHandler\nAuthMW --&gt; ConnHandler</code></pre> <p>The function is called immediately after the <code>io</code> instance is created and before the HTTP server starts listening:</p> Line Action Purpose index.js L14 <code>const setupSocket = require(\"./src/sockets/socketHandler\")</code> Import handler setup function index.js L57 <code>setupSocket(io)</code> Configure Socket.IO with authentication and event handlers index.js L62 <code>server.listen(3000, ...)</code> Start HTTP server with both Express and Socket.IO <p>Sources: index.js L14</p> <p>index.js L56-L65</p>"},{"location":"Socket.IO-Server-Setup.html#setupsocket-function-structure","title":"setupSocket Function Structure","text":"<p>The <code>setupSocket</code> function accepts the <code>io</code> instance and configures it in two stages:</p> <ol> <li>Authentication Middleware Registration (src/sockets/socketHandler.js L6-L32 )</li> <li>Connection Event Handler Registration (src/sockets/socketHandler.js L36-L68 )</li> </ol> <pre><code>function setupSocket(io) {\n    // Stage 1: Authentication middleware\n    io.use((socket, next) =&gt; {\n        // JWT validation from cookies\n    });\n\n    // Stage 2: Connection handler\n    io.on(\"connection\", (socket) =&gt; {\n        // Event listeners for messages, disconnect, etc.\n    });\n}\n</code></pre> <p>Sources: src/sockets/socketHandler.js L4-L69</p>"},{"location":"Socket.IO-Server-Setup.html#authentication-middleware-registration","title":"Authentication Middleware Registration","text":""},{"location":"Socket.IO-Server-Setup.html#middleware-execution-flow","title":"Middleware Execution Flow","text":"<p>Socket.IO middleware functions execute before connection handlers, enabling authentication and authorization checks before a client can establish a WebSocket connection.</p> <pre><code>sequenceDiagram\n  participant WebSocket Client\n  participant io.use() Middleware\n  participant io.on(\"connection\")\n  participant MySQL Database\n\n  WebSocket Client-&gt;&gt;io.use() Middleware: WebSocket Upgrade Request\n  io.use() Middleware-&gt;&gt;io.use() Middleware: Extract cookies from socket.request\n  io.use() Middleware-&gt;&gt;io.use() Middleware: Find token cookie\n  loop [Valid token]\n    io.use() Middleware-&gt;&gt;io.use() Middleware: jwt.verify(token, JWT_SECRET)\n    io.use() Middleware-&gt;&gt;io.use() Middleware: socket.request.user = decoded\n    io.use() Middleware-&gt;&gt;io.on(\"connection\"): next() - Allow connection\n    io.on(\"connection\")-&gt;&gt;io.on(\"connection\"): socket.join() rooms\n    io.on(\"connection\")--&gt;&gt;WebSocket Client: Connection established\n    io.use() Middleware--&gt;&gt;WebSocket Client: Error(\"Token inv\u00e1lido\")\n    io.use() Middleware--&gt;&gt;WebSocket Client: Error(\"Token no proporcionado\")\n  end</code></pre> <p>Sources: src/sockets/socketHandler.js L6-L32</p>"},{"location":"Socket.IO-Server-Setup.html#cookie-and-token-extraction","title":"Cookie and Token Extraction","text":"<p>The middleware extracts the JWT token from HTTP cookies attached to the WebSocket upgrade request:</p> Step Code Location Access request <code>const req = socket.request</code> src/sockets/socketHandler.js L7 Extract cookies <code>const cookies = req.headers.cookie</code> src/sockets/socketHandler.js L8 Parse token <code>const tokenMatch = cookies.match(/token=([^;]+)/)</code> src/sockets/socketHandler.js L16 Extract value <code>const token = tokenMatch &amp;&amp; tokenMatch[1]</code> src/sockets/socketHandler.js L17 <p>The token is expected to be stored in a cookie named <code>token</code>, which is set during login via HTTP routes (see User Registration &amp; Login).</p> <p>Sources: src/sockets/socketHandler.js L7-L17</p>"},{"location":"Socket.IO-Server-Setup.html#jwt-verification-and-user-attachment","title":"JWT Verification and User Attachment","text":"<p>The extracted token is verified using the <code>jsonwebtoken</code> library with the secret key from environment variables:</p> <pre><code>flowchart TD\n\nToken[\"JWT Token from Cookie\"]\nVerify[\"jwt.verify(token, JWT_SECRET)\"]\nDecoded[\"Decoded Payload&lt;br&gt;{user, name, rol}\"]\nAttach[\"socket.request.user = decoded\"]\nNext[\"next() - Proceed to connection\"]\nError[\"next(new Error())\"]\n\nToken --&gt; Verify\nVerify --&gt; Decoded\nVerify --&gt; Error\nDecoded --&gt; Attach\nAttach --&gt; Next</code></pre> <p>The decoded JWT payload contains:</p> <ul> <li><code>user</code>: Username (primary key from <code>usuarios</code> table)</li> <li><code>name</code>: Full name</li> <li><code>rol</code>: Role (<code>\"admin\"</code> or <code>\"user\"</code>)</li> </ul> <p>These fields are attached to <code>socket.request.user</code> for access in the connection handler.</p> <p>Sources: src/sockets/socketHandler.js L24-L31</p> <p>index.js L6</p>"},{"location":"Socket.IO-Server-Setup.html#connection-handler-registration","title":"Connection Handler Registration","text":""},{"location":"Socket.IO-Server-Setup.html#ioonconnection-setup","title":"io.on(\"connection\") Setup","text":"<p>After passing authentication middleware, the connection event fires with an authenticated socket instance. The handler extracts user information and sets up event listeners.</p> <pre><code>flowchart TD\n\nConnection[\"io.on('connection', (socket) =&gt; {})\"]\nExtract[\"Extract user info&lt;br&gt;const {user, name, rol} = socket.request.user\"]\nJoinRooms[\"socket.join() - Assign rooms&lt;br&gt;user:username + admins\"]\nRegisterEvents[\"Register event handlers\"]\nMPE[\"socket.on('mensaje_privado')\"]\nDisconnect[\"socket.on('disconnect')\"]\n\nConnection --&gt; Extract\nExtract --&gt; JoinRooms\nJoinRooms --&gt; RegisterEvents\nRegisterEvents --&gt; MPE\nRegisterEvents --&gt; Disconnect</code></pre> <p>Sources: src/sockets/socketHandler.js L36-L68</p>"},{"location":"Socket.IO-Server-Setup.html#user-information-extraction","title":"User Information Extraction","text":"<p>The connection handler immediately destructures the authenticated user data from <code>socket.request.user</code>, which was populated by the authentication middleware:</p> Variable Source Purpose <code>user</code> <code>socket.request.user.user</code> Username for room assignment and message routing <code>name</code> <code>socket.request.user.name</code> Display name (not actively used in handler) <code>rol</code> <code>socket.request.user.rol</code> Role for admin room assignment and message routing <p>Sources: src/sockets/socketHandler.js L37</p>"},{"location":"Socket.IO-Server-Setup.html#room-assignment","title":"Room Assignment","text":"<p>Each connected socket is assigned to rooms based on the authenticated user's identity and role:</p> <pre><code>socket.join(`user:${user}`);           // Personal room for direct messages\nif (rol === \"admin\") socket.join(\"admins\");  // Admin broadcast room\n</code></pre> <p>See Room Management for detailed information on room-based routing strategy.</p> <p>Sources: src/sockets/socketHandler.js L42-L43</p>"},{"location":"Socket.IO-Server-Setup.html#server-startup-sequence","title":"Server Startup Sequence","text":""},{"location":"Socket.IO-Server-Setup.html#complete-initialization-flow","title":"Complete Initialization Flow","text":"<p>The following diagram shows the complete startup sequence from application bootstrap to ready state:</p> <pre><code>sequenceDiagram\n  participant Application Bootstrap\n  participant Express App\n  participant HTTP Server\n  participant Socket.IO Server\n  participant setupSocket()\n  participant Port 3000\n\n  Application Bootstrap-&gt;&gt;Express App: Initialize Express\n  Application Bootstrap-&gt;&gt;Express App: Configure middleware\n  Application Bootstrap-&gt;&gt;HTTP Server: (helmet, body-parser, etc.)\n  Application Bootstrap-&gt;&gt;Socket.IO Server: http.createServer(app)\n  Application Bootstrap-&gt;&gt;setupSocket(): socketIO(server)\n  setupSocket()-&gt;&gt;Socket.IO Server: setupSocket(io)\n  setupSocket()-&gt;&gt;Socket.IO Server: io.use() - Auth middleware\n  Application Bootstrap-&gt;&gt;Port 3000: io.on(\"connection\") - Handler\n  note over Application Bootstrap,Port 3000: Server ready for both</code></pre> <p>Sources: index.js L1-L65</p>"},{"location":"Socket.IO-Server-Setup.html#listening-on-port-3000","title":"Listening on Port 3000","text":"<p>The HTTP server (with both Express and Socket.IO attached) starts listening on port 3000:</p> <pre><code>server.listen(3000, () =&gt; {\n    console.log(\"Servidor corriendo en http://localhost:3000\");\n    console.log('Swagger disponible en http://localhost:3000/api-docs');\n});\n</code></pre> <p>This single <code>server.listen()</code> call makes both HTTP routes (via Express) and WebSocket connections (via Socket.IO) available on the same port.</p> <p>Sources: index.js L62-L65</p>"},{"location":"Socket.IO-Server-Setup.html#configuration-summary","title":"Configuration Summary","text":""},{"location":"Socket.IO-Server-Setup.html#key-configuration-points","title":"Key Configuration Points","text":"Configuration Aspect Location Value/Behavior Socket.IO Version package-lock.json 4.8.1 HTTP Server Module index.js L8 Node.js built-in <code>http</code> Server Port index.js L62 3000 Authentication Method src/sockets/socketHandler.js L6 JWT from HTTP-only cookie JWT Secret Source index.js L4 <code>process.env.JWT_SECRET</code> Socket Handler Module index.js L14 <code>./src/sockets/socketHandler</code> Middleware Type src/sockets/socketHandler.js L6 <code>io.use()</code> authentication middleware Connection Event src/sockets/socketHandler.js L36 <code>io.on(\"connection\")</code> <p>Sources: index.js L1-L65</p> <p>src/sockets/socketHandler.js L1-L71</p> <p>package-lock.json L29</p>"},{"location":"Socket.IO-Server-Setup.html#integration-with-express-application","title":"Integration with Express Application","text":""},{"location":"Socket.IO-Server-Setup.html#shared-http-server-pattern","title":"Shared HTTP Server Pattern","text":"<p>Both Express and Socket.IO operate on the same HTTP server instance, allowing them to coexist on a single port. This pattern is essential for several reasons:</p> <ol> <li>Single Port Deployment: Only one port needs to be exposed and configured in firewalls</li> <li>Shared Session Context: Both systems can access the same cookies and headers</li> <li>Unified Authentication: JWT tokens in cookies work for both HTTP and WebSocket requests</li> <li>Simplified Load Balancing: A single endpoint for all application traffic</li> </ol> <pre><code>flowchart TD\n\nClient[\"Client Browser\"]\nServer[\"HTTP Server :3000\"]\nExpress[\"Express Middleware Stack\"]\nSIO[\"Socket.IO Server\"]\nRoutes[\"HTTP Routes&lt;br&gt;/login, /admin, etc.\"]\nWSHandlers[\"WebSocket Handlers&lt;br&gt;mensaje_privado, disconnect\"]\n\nClient --&gt; Server\nClient --&gt; Server\nServer --&gt; Express\nServer --&gt; SIO\nExpress --&gt; Routes\nSIO --&gt; WSHandlers\nExpress --&gt; Client\nSIO --&gt; Client</code></pre> <p>Sources: index.js L2-L12</p> <p>Diagram 1 from high-level architecture</p>"},{"location":"Socket.IO-Server-Setup.html#dependencies-and-modules","title":"Dependencies and Modules","text":""},{"location":"Socket.IO-Server-Setup.html#required-npm-packages","title":"Required npm Packages","text":"Package Version Purpose in Socket.IO Setup <code>socket.io</code> 4.8.1 WebSocket server implementation <code>http</code> Built-in HTTP server for Socket.IO attachment <code>jsonwebtoken</code> 9.0.2 JWT verification in middleware <code>dotenv</code> 16.5.0 Environment variable loading (JWT_SECRET)"},{"location":"Socket.IO-Server-Setup.html#module-imports","title":"Module Imports","text":"<p>The Socket.IO setup requires the following imports across two files:</p> <p>index.js:</p> <ul> <li><code>http</code> - HTTP server creation</li> <li><code>socket.io</code> - Socket.IO server instantiation</li> <li><code>./src/sockets/socketHandler</code> - Configuration function</li> </ul> <p>src/sockets/socketHandler.js:</p> <ul> <li><code>jsonwebtoken</code> - Token verification</li> <li><code>../../database/db</code> - Database connection for message persistence</li> </ul> <p>Sources: index.js L8-L14</p> <p>src/sockets/socketHandler.js L1-L3</p> <p>package-lock.json L29</p>"},{"location":"Socket.IO-Server-Setup.html#error-handling","title":"Error Handling","text":""},{"location":"Socket.IO-Server-Setup.html#authentication-errors","title":"Authentication Errors","text":"<p>The authentication middleware handles three error conditions:</p> Condition Detection Error Response Code Location No cookies present <code>!cookies</code> <code>Error(\"No autenticado\")</code> src/sockets/socketHandler.js L10-L13 Token not found in cookies <code>!token</code> <code>Error(\"Token no proporcionado\")</code> src/sockets/socketHandler.js L19-L22 Invalid/expired JWT <code>jwt.verify()</code> throws <code>Error(\"Token inv\u00e1lido\")</code> src/sockets/socketHandler.js L28-L31 <p>When any of these errors occur, the WebSocket connection is rejected, and the client receives an error event.</p> <p>Sources: src/sockets/socketHandler.js L10-L31</p>"},{"location":"Socket.IO-Server-Setup.html#console-logging","title":"Console Logging","text":"<p>The socket handler logs key events for debugging and monitoring:</p> <pre><code>console.log(\"\u274c No hay cookies en la conexi\u00f3n de socket\");\nconsole.log(\"\u274c No se encontr\u00f3 el token en las cookies\");\nconsole.log(\"\u274c Token inv\u00e1lido:\", err.message);\nconsole.log(`\ud83d\udfe2 Usuario conectado: ${user} (${rol})`);\nconsole.log(`\ud83d\udd34 Usuario desconectado: ${user}`);\n</code></pre> <p>Sources: src/sockets/socketHandler.js L11</p> <p>src/sockets/socketHandler.js L20</p> <p>src/sockets/socketHandler.js L29</p> <p>src/sockets/socketHandler.js L39</p> <p>src/sockets/socketHandler.js L66</p>"},{"location":"Socket.IO-Server-Setup.html#complete-setup-code-flow","title":"Complete Setup Code Flow","text":""},{"location":"Socket.IO-Server-Setup.html#indexjs-initialization-sequence","title":"index.js Initialization Sequence","text":"<pre><code>flowchart TD\n\nStart[\"Application Start\"]\nLoadEnv[\"Load environment variables&lt;br&gt;dotenv.config()\"]\nInitExpress[\"Initialize Express&lt;br&gt;const app = express()\"]\nCreateHTTP[\"Create HTTP server&lt;br&gt;const server = http.createServer(app)\"]\nCreateSIO[\"Create Socket.IO server&lt;br&gt;const io = socketIO(server)\"]\nConfigMiddleware[\"Configure Express middleware&lt;br&gt;body-parser, helmet, sessions, etc.\"]\nSetupSockets[\"Setup Socket.IO&lt;br&gt;setupSocket(io)\"]\nListen[\"Start listening&lt;br&gt;server.listen(3000)\"]\nEnd[\"Server Ready\"]\n\nStart --&gt; LoadEnv\nLoadEnv --&gt; InitExpress\nInitExpress --&gt; CreateHTTP\nCreateHTTP --&gt; CreateSIO\nCreateSIO --&gt; ConfigMiddleware\nConfigMiddleware --&gt; SetupSockets\nSetupSockets --&gt; Listen\nListen --&gt; End</code></pre> <p>Sources: index.js L1-L65</p>"},{"location":"Socket.IO-Server-Setup.html#sockethandlerjs-configuration-sequence","title":"socketHandler.js Configuration Sequence","text":"<pre><code>flowchart TD\n\nEntry[\"setupSocket(io)\"]\nRegAuth[\"Register authentication middleware&lt;br&gt;io.use((socket, next) =&gt; {...})\"]\nRegConn[\"Register connection handler&lt;br&gt;io.on('connection', (socket) =&gt; {...})\"]\nReturnFunc[\"Return (function complete)\"]\nClientConn[\"Client connection attempt\"]\nExecAuth[\"Execute auth middleware\"]\nAuthCheck[\"Authentication&lt;br&gt;successful?\"]\nExecConn[\"Execute connection handler\"]\nRoomJoin[\"Assign to rooms\"]\nRegEvents[\"Register message events\"]\nConnEst[\"Connection established\"]\nReject[\"Reject connection\"]\n\nEntry --&gt; RegAuth\nRegAuth --&gt; RegConn\nRegConn --&gt; ReturnFunc\nClientConn --&gt; ExecAuth\nExecAuth --&gt; AuthCheck\nAuthCheck --&gt; ExecConn\nAuthCheck --&gt; Reject\nExecConn --&gt; RoomJoin\nRoomJoin --&gt; RegEvents\nRegEvents --&gt; ConnEst</code></pre> <p>Sources: src/sockets/socketHandler.js L4-L69</p>"},{"location":"Static-Assets-%26-Styling.html","title":"Static Assets &amp; Styling","text":"<p>Relevant source files * docs/fonts/Montserrat/Montserrat-Bold.ttf * public/css/style.css * views/admin.ejs * views/index.ejs * views/register.ejs</p>"},{"location":"Static-Assets-%26-Styling.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document covers the organization, configuration, and usage of static assets in the registro-sesiones application, including CSS stylesheets, font files, images, and user-uploaded content. For information about the EJS view templates that reference these assets, see View Layer &amp; Templates. For details on how static files are served via Express middleware, see Application Bootstrap.</p>"},{"location":"Static-Assets-%26-Styling.html#static-asset-directory-structure","title":"Static Asset Directory Structure","text":"<p>The application organizes static assets across multiple directories that are served by Express. The primary locations are <code>public/</code> for application assets and <code>docs/fonts/</code> for typography.</p> <pre><code>flowchart TD\n\nPublic[\"public/&lt;br&gt;Main static assets\"]\nDocs[\"docs/fonts/&lt;br&gt;Font files\"]\nCSS[\"css/&lt;br&gt;Stylesheets\"]\nResources[\"resources/&lt;br&gt;Media assets\"]\nStyleCSS[\"css/style.css&lt;br&gt;Main stylesheet\"]\nBodyCSS[\"css/body.css&lt;br&gt;Body-specific styles\"]\nImg[\"resources/img/&lt;br&gt;Application images\"]\nUploads[\"resources/uploads/&lt;br&gt;User profile images\"]\nMontserrat[\"Montserrat/&lt;br&gt;Montserrat font family\"]\nOpenSans[\"Open Sans/&lt;br&gt;Open Sans font family\"]\nMontserratBold[\"Montserrat-Bold.ttf\"]\nMontserratRegular[\"Montserrat-Regular.ttf\"]\n\nPublic --&gt; CSS\nPublic --&gt; Resources\nDocs --&gt; Montserrat\nDocs --&gt; OpenSans\n\nsubgraph subGraph2 [\"docs/fonts/ Structure\"]\n    Montserrat\n    OpenSans\n    MontserratBold\n    MontserratRegular\n    Montserrat --&gt; MontserratBold\n    Montserrat --&gt; MontserratRegular\nend\n\nsubgraph subGraph1 [\"public/ Structure\"]\n    CSS\n    Resources\n    StyleCSS\n    BodyCSS\n    Img\n    Uploads\n    CSS --&gt; StyleCSS\n    CSS --&gt; BodyCSS\n    Resources --&gt; Img\n    Resources --&gt; Uploads\nend\n\nsubgraph subGraph0 [\"Static Asset Locations\"]\n    Public\n    Docs\nend</code></pre> <p>Sources: views/index.ejs L1-L35</p> <p>views/register.ejs L1-L85</p> <p>views/admin.ejs L1-L71</p> <p>docs/fonts/Montserrat/Montserrat-Bold.ttf L1-L10</p>"},{"location":"Static-Assets-%26-Styling.html#css-stylesheets","title":"CSS Stylesheets","text":"<p>The application uses two primary CSS files to style the user interface. Both are located in the <code>public/css/</code> directory and served as static assets.</p>"},{"location":"Static-Assets-%26-Styling.html#main-stylesheet-stylecss","title":"Main Stylesheet (style.css)","text":"<p>The primary stylesheet public/css/style.css L1-L353</p> <p>contains the majority of application styles organized into logical sections:</p> Style Category Lines Purpose Global body styles 1-6 Sets background, font, margins, text alignment Language switcher 8-12 Active state styling for language selection Form containers 14-22 Login and content container widths Login form 24-60 Input fields, login button styling Register button 63-88 Registration button with hover effects Logout link 95-110 Styled anchor for logout action Cancel/Save buttons 113-167 Form action buttons Registration form 170-193 User registration form container Select dropdowns 196-223 Styled select elements Login link 226-241 Styled anchor for login action Navigation menu 249-276 Menu bar and navigation items Footer 279-331 Footer layout and styling Image effects 335-352 Hover effects for images <p>Key Style Patterns:</p> <p>The stylesheet follows a consistent button styling pattern with hover and focus states:</p> <pre><code>.btn-{type} {\n    width: [percentage]%;\n    padding: 15px;\n    background-color: [color];\n    border: 0;\n    cursor: pointer;\n    font-weight: bold;\n}\n.btn-{type}:hover {\n    background-color: [darker-color];\n}\n.btn-{type}:focus {\n    box-shadow: 0 0 0 3px [darker-color];\n}\n</code></pre> <p>Color Palette:</p> Element Type Primary Color Hover Color Purpose Login button <code>#223172</code> <code>#20369b</code> Primary authentication action Register button <code>#158b36</code> <code>#14ad3f</code> User registration action Cancel button <code>#9ca3af</code> <code>#6b7280</code> Form cancellation Save button <code>#1d4ed8</code> <code>#1e3a8a</code> Data persistence Logout link Border <code>#f87171</code> <code>#f87171</code> Session termination Navigation <code>#20369b</code> <code>#158b36</code> Menu navigation Footer <code>#143d20</code> N/A Footer background <p>Sources: public/css/style.css L1-L353</p>"},{"location":"Static-Assets-%26-Styling.html#body-stylesheet-bodycss","title":"Body Stylesheet (body.css)","text":"<p>A secondary stylesheet is referenced in the registration page views/register.ejs L2</p> <p>but the file itself is not included in the provided codebase. This likely contains body-specific styling overrides for the registration view.</p> <p>Sources: views/register.ejs L2</p>"},{"location":"Static-Assets-%26-Styling.html#font-assets","title":"Font Assets","text":"<p>The application uses custom web fonts stored in the <code>docs/fonts/</code> directory, which is served as a static directory by the Express application.</p> <pre><code>flowchart TD\n\nMontserrat[\"Montserrat Font Family&lt;br&gt;docs/fonts/Montserrat/\"]\nOpenSans[\"Open Sans Font Family&lt;br&gt;docs/fonts/Open Sans/\"]\nMBold[\"Montserrat-Bold.ttf&lt;br&gt;Weight: 700\"]\nMRegular[\"Montserrat-Regular.ttf&lt;br&gt;Weight: 400\"]\nMOther[\"Other weights&lt;br&gt;and variants\"]\nFontFace[\"@font-face declarations\"]\nBodyFont[\"body { font-family: roboto }\"]\n\nMontserrat --&gt; MBold\nMontserrat --&gt; MRegular\nMontserrat --&gt; MOther\nMBold --&gt; FontFace\nMRegular --&gt; FontFace\n\nsubgraph subGraph2 [\"Usage in CSS\"]\n    FontFace\n    BodyFont\n    FontFace --&gt; BodyFont\nend\n\nsubgraph subGraph1 [\"Montserrat Variants\"]\n    MBold\n    MRegular\n    MOther\nend\n\nsubgraph subGraph0 [\"Font Files\"]\n    Montserrat\n    OpenSans\nend</code></pre> <p>Font Configuration:</p> <p>The Montserrat font family includes multiple weight and style variants:</p> <ul> <li>Montserrat-Bold.ttf - Bold weight (700) for headings and emphasis docs/fonts/Montserrat/Montserrat-Bold.ttf L1-L10</li> <li>Additional variants for Regular, Light, Italic, etc. (referenced in Diagram 6 of architecture)</li> </ul> <p>The body text uses the Roboto font family as specified in public/css/style.css L3</p> <p>:</p> <pre><code>\n</code></pre> <p>Sources: docs/fonts/Montserrat/Montserrat-Bold.ttf L1-L10</p> <p>public/css/style.css L3</p>"},{"location":"Static-Assets-%26-Styling.html#image-resources","title":"Image Resources","text":""},{"location":"Static-Assets-%26-Styling.html#application-images","title":"Application Images","text":"<p>Application images such as flags for language selection and UI icons are stored in <code>public/resources/img/</code>. These are referenced in the header partial for the language switcher functionality.</p> <pre><code>flowchart TD\n\nImgDir[\"public/resources/img/\"]\nFlags[\"Language flags&lt;br&gt;en.png, es.png\"]\nIcons[\"UI icons&lt;br&gt;Various icons\"]\nHeader[\"partials/header.ejs&lt;br&gt;Language switcher\"]\nViews[\"Various view templates&lt;br&gt;UI elements\"]\n\nFlags --&gt; Header\nIcons --&gt; Views\n\nsubgraph subGraph1 [\"Usage Locations\"]\n    Header\n    Views\nend\n\nsubgraph subGraph0 [\"Image Resource Structure\"]\n    ImgDir\n    Flags\n    Icons\n    ImgDir --&gt; Flags\n    ImgDir --&gt; Icons\nend</code></pre>"},{"location":"Static-Assets-%26-Styling.html#user-uploaded-profile-images","title":"User-Uploaded Profile Images","text":"<p>User profile images are uploaded during registration and stored in <code>public/resources/uploads/</code>. The admin view displays these images views/admin.ejs L4-L7</p> <p>:</p> <pre><code>\n</code></pre> <p>Upload Directory: <code>public/resources/uploads/</code> Reference Pattern: <code>/resources/uploads/&lt;filename&gt;</code> Display Styling: Circular (50% border-radius), 100px width</p> <p>Sources: views/admin.ejs L4-L7</p>"},{"location":"Static-Assets-%26-Styling.html#static-file-serving-configuration","title":"Static File Serving Configuration","text":"<p>Express serves static files from multiple directories configured in the application bootstrap. The configuration maps URL paths to filesystem directories.</p> <pre><code>flowchart TD\n\nApp[\"Express App&lt;br&gt;index.js\"]\nPublicMiddleware[\"express.static('public')&lt;br&gt;Serves /public/*\"]\nResourcesMiddleware[\"express.static('public')&lt;br&gt;Mount at /resources\"]\nDocsMiddleware[\"express.static('docs')&lt;br&gt;Serves /docs/*\"]\nCSSRoute[\"/css/style.css&lt;br&gt;\u2192 public/css/style.css\"]\nImgRoute[\"/resources/img/\u2192 public/resources/img/\"]\nUploadsRoute[\"/resources/uploads/\u2192 public/resources/uploads/\"]\nFontRoute[\"/docs/fonts/\u2192 docs/fonts/\"]\n\nPublicMiddleware --&gt; CSSRoute\nResourcesMiddleware --&gt; ImgRoute\nResourcesMiddleware --&gt; UploadsRoute\nDocsMiddleware --&gt; FontRoute\n\nsubgraph subGraph1 [\"URL Mappings\"]\n    CSSRoute\n    ImgRoute\n    UploadsRoute\n    FontRoute\nend\n\nsubgraph subGraph0 [\"Express Static Middleware\"]\n    App\n    PublicMiddleware\n    ResourcesMiddleware\n    DocsMiddleware\n    App --&gt; PublicMiddleware\n    App --&gt; ResourcesMiddleware\n    App --&gt; DocsMiddleware\nend</code></pre> <p>Static Middleware Configuration:</p> <p>The Express application configures static file serving in <code>index.js</code>:</p> <ol> <li>Public directory - Serves all files from <code>public/</code> directly</li> <li>Resources mounting - Mounts <code>public/</code> at <code>/resources</code> path</li> <li>Docs directory - Serves font files from <code>docs/</code></li> </ol> <p>The specific middleware calls would be structured as:</p> <pre><code>\n</code></pre> <p>Sources: Architecture Diagram 6 from context, inferred from views/admin.ejs L5</p> <p>views/register.ejs L2</p>"},{"location":"Static-Assets-%26-Styling.html#asset-references-in-templates","title":"Asset References in Templates","text":"<p>EJS templates reference static assets using absolute paths from the web root. The application uses a consistent pattern for linking CSS, images, and fonts.</p>"},{"location":"Static-Assets-%26-Styling.html#css-linking-pattern","title":"CSS Linking Pattern","text":"<p>The <code>partials/head.ejs</code> template contains standard CSS links:</p> <pre><code>\n</code></pre> <p>Some views include additional stylesheets views/register.ejs L2</p> <p>:</p> <pre><code>\n</code></pre>"},{"location":"Static-Assets-%26-Styling.html#image-reference-pattern","title":"Image Reference Pattern","text":"<p>Profile images use the <code>/resources/uploads/</code> path views/admin.ejs L5</p> <p>:</p> <pre><code>\n</code></pre>"},{"location":"Static-Assets-%26-Styling.html#font-loading","title":"Font Loading","text":"<p>Font files are loaded via CSS <code>@font-face</code> declarations (not shown in provided files but referenced in architecture) from <code>/docs/fonts/</code> paths.</p> <p>Reference Path Table:</p> Asset Type Template Path Filesystem Path Main CSS <code>/css/style.css</code> <code>public/css/style.css</code> Body CSS <code>/resources/css/body.css</code> <code>public/resources/css/body.css</code> Profile images <code>/resources/uploads/&lt;filename&gt;</code> <code>public/resources/uploads/&lt;filename&gt;</code> Application images <code>/resources/img/&lt;filename&gt;</code> <code>public/resources/img/&lt;filename&gt;</code> Font files <code>/docs/fonts/&lt;family&gt;/&lt;file&gt;</code> <code>docs/fonts/&lt;family&gt;/&lt;file&gt;</code> <p>Sources: views/register.ejs L2</p> <p>views/admin.ejs L4-L7</p>"},{"location":"Static-Assets-%26-Styling.html#styling-components-and-patterns","title":"Styling Components and Patterns","text":""},{"location":"Static-Assets-%26-Styling.html#form-styling","title":"Form Styling","text":"<p>The application implements consistent form styling across login and registration views:</p> <p>**Login Form Structure public/css/style.css L14-L38</p> <p>:**</p> <ul> <li>Container width: 30% centered with auto margins</li> <li>Input fields: Full width with 15px padding, 1px solid border (#ced4da)</li> <li>Consistent 10px bottom margin between fields</li> </ul> <p>**Registration Form Structure public/css/style.css L170-L193</p> <p>:**</p> <ul> <li>Container width: 400px centered</li> <li>Padding: 0px 20px 60px 20px</li> <li>Box shadow for elevation effect</li> <li>Left-aligned text (overriding body center alignment)</li> </ul>"},{"location":"Static-Assets-%26-Styling.html#button-system","title":"Button System","text":"<p>The application uses a comprehensive button system with semantic naming:</p> <pre><code>flowchart TD\n\nLoginLink[\"a-login&lt;br&gt;#14ad3f border/bg&lt;br&gt;Navigation to login\"]\nLogoutLink[\"a-logout&lt;br&gt;#f87171 border/bg&lt;br&gt;Session termination\"]\nLogin[\"btn-login&lt;br&gt;#223172 \u2192 #20369b&lt;br&gt;Primary authentication\"]\nRegister[\"btn-register&lt;br&gt;#158b36 \u2192 #14ad3f&lt;br&gt;User registration\"]\nSave[\"btn-save&lt;br&gt;#1d4ed8 \u2192 #1e3a8a&lt;br&gt;Data persistence\"]\nCancel[\"btn-cancel&lt;br&gt;#9ca3af \u2192 #6b7280&lt;br&gt;Form cancellation\"]\nNormal[\"Normal state&lt;br&gt;Base color\"]\nHover[\"Hover state&lt;br&gt;Darker color\"]\nFocus[\"Focus state&lt;br&gt;Box shadow ring\"]\n\nLogin --&gt; Normal\nRegister --&gt; Normal\nSave --&gt; Normal\nCancel --&gt; Normal\n\nsubgraph States [\"States\"]\n    Normal\n    Hover\n    Focus\n    Normal --&gt; Hover\n    Hover --&gt; Focus\nend\n\nsubgraph subGraph0 [\"Button Types and Colors\"]\n    Login\n    Register\n    Save\n    Cancel\nend\n\nsubgraph subGraph1 [\"Link Styles\"]\n    LoginLink\n    LogoutLink\nend</code></pre> <p>Button Specifications:</p> Class Width Background Hover Focus Shadow Use Case <code>.btn-login</code> 100% <code>#223172</code> <code>#20369b</code> <code>#20369b</code> 3px Login authentication <code>.btn-register</code> 100% <code>#158b36</code> <code>#14ad3f</code> <code>#14ad3f</code> 3px New user registration <code>.btn-save</code> 50% <code>#1d4ed8</code> <code>#1e3a8a</code> <code>#1e3a8a</code> 3px Form submission <code>.btn-cancel</code> 50% <code>#9ca3af</code> <code>#6b7280</code> <code>#6b7280</code> 3px Form cancellation <p>Sources: public/css/style.css L41-L167</p>"},{"location":"Static-Assets-%26-Styling.html#navigation-menu-styling","title":"Navigation Menu Styling","text":"<p>The navigation system uses a custom list-based menu public/css/style.css L249-L276</p> <p>:</p> <p>Structure:</p> <ul> <li><code>.menunave</code> - Container with max-width 1100px, centered</li> <li><code>.nave-lista</code> - Unordered list with no list-style</li> <li><code>.nave-item</code> - Inline display for horizontal layout</li> <li><code>.nave-link</code> - Styled anchors with background color</li> </ul> <p>Link Styling:</p> <ul> <li>Background: <code>#20369b</code> (navy blue)</li> <li>Text: White</li> <li>Padding: 10px 20px</li> <li>Border-radius: 5px</li> <li>Hover background: <code>#158b36</code> (green)</li> </ul> <p>Sources: public/css/style.css L249-L276</p>"},{"location":"Static-Assets-%26-Styling.html#footer-styling","title":"Footer Styling","text":"<p>The footer uses a flexbox layout for responsive design public/css/style.css L279-L331</p> <p>:</p> <p>Structure:</p> <ul> <li>Background: <code>#143d20</code> (dark green)</li> <li>Color: White</li> <li><code>.footer-container</code> - Flexbox with space-between justification</li> <li><code>.footer-section</code> - Flexible sections with min-width 200px</li> <li><code>.footer-bottom</code> - Copyright/credits section</li> </ul> <p>Sources: public/css/style.css L279-L331</p>"},{"location":"Static-Assets-%26-Styling.html#image-effects","title":"Image Effects","text":"<p>The application includes hover effects for images public/css/style.css L335-L352</p> <p>:</p> <p>Hover Effect Specification:</p> <ul> <li>Transform: <code>scale(1.1)</code> - 110% size increase</li> <li>Filter: <code>brightness(1.2)</code> - 20% brightness increase</li> <li>Transition: 0.5s ease for smooth animation</li> <li>Container: Border-radius 10px with overflow hidden</li> </ul> <p>Sources: public/css/style.css L335-L352</p>"},{"location":"Static-Assets-%26-Styling.html#user-uploaded-files","title":"User-Uploaded Files","text":"<p>The application handles user profile images through the registration process and stores them in the static uploads directory.</p> <p>Upload Configuration:</p> <p>Registration form accepts image files views/register.ejs L35-L36</p> <p>:</p> <p>The form uses <code>enctype=\"multipart/form-data\"</code> views/register.ejs L7</p> <p>to support file uploads.</p> <p>Storage Location: <code>public/resources/uploads/</code></p> <p>Display Implementation: views/admin.ejs L4-L7</p> <ul> <li>Conditional rendering based on <code>user.imagen</code> field</li> <li>Circular styling with 50% border-radius</li> <li>Fixed width of 100px</li> </ul> <p>Sources: views/register.ejs L7</p> <p>views/register.ejs L35-L36</p> <p>views/admin.ejs L4-L7</p>"},{"location":"Static-Assets-%26-Styling.html#language-specific-assets","title":"Language-Specific Assets","text":"<p>The application supports internationalization with language-specific image assets for the language switcher in the header.</p> <p>Language Flags:</p> <ul> <li><code>public/resources/img/</code> contains flag images</li> <li>Spanish flag for <code>es</code> locale</li> <li>English flag for <code>en</code> locale</li> </ul> <p>The language switcher is implemented in <code>partials/header.ejs</code> (referenced in architecture) and uses these flag images to provide visual indicators for language selection.</p> <p>**Active Language Styling public/css/style.css L8-L12</p> <p>:**</p> <pre><code>\n</code></pre> <p>Sources: public/css/style.css L8-L12</p> <p>Architecture Diagram 6 from context</p>"},{"location":"Support-Chat-System.html","title":"Support Chat System","text":"<p>Relevant source files * src/router.js * src/sockets/socketHandler.js * views/soporte.ejs</p> <p>The Support Chat System provides real-time bidirectional messaging between users and administrators. The system uses Socket.IO for WebSocket-based communication, implements JWT authentication for secure connections, and persists all messages to the MySQL database. Users see a simple chat interface to communicate with administrators, while administrators see a multi-conversation interface with a user list and notification system.</p> <p>For information about the Socket.IO server setup and initialization, see Real-time Communication System. For details on WebSocket authentication mechanics, see WebSocket Authentication. For the underlying data model, see mensajes Table.</p>"},{"location":"Support-Chat-System.html#system-architecture","title":"System Architecture","text":"<p>The Support Chat System operates through a dual-channel architecture: WebSocket connections for real-time messaging and HTTP REST endpoints for historical message retrieval. The system distinguishes between two user roles (admin and regular users) and provides role-specific functionality.</p> <pre><code>flowchart TD\n\nAdminBrowser[\"Admin Browser&lt;br&gt;views/soporte.ejs&lt;br&gt;role=admin\"]\nUserBrowser[\"User Browser&lt;br&gt;views/soporte.ejs&lt;br&gt;role=user\"]\nHTTPServer[\"Express HTTP Server&lt;br&gt;GET /soporte\"]\nSocketIOServer[\"Socket.IO Server&lt;br&gt;socketHandler.js\"]\nVerifyToken[\"verifyToken&lt;br&gt;JWT validation\"]\nSocketAuth[\"Socket.IO Middleware&lt;br&gt;JWT from cookies\"]\nPersonalRooms[\"Personal Rooms&lt;br&gt;user:{username}\"]\nAdminsRoom[\"admins Room\"]\nMensajePrivado[\"mensaje_privado&lt;br&gt;Event Handler\"]\nMensajeRecibido[\"mensaje_recibido&lt;br&gt;Event Emitter\"]\nGetMensajes[\"/api/mensajes?con=user&lt;br&gt;verifyAdmin\"]\nGetMensajesMios[\"/api/mensajes/mios&lt;br&gt;verifyToken\"]\nGetUsuariosConv[\"/api/usuarios-conversaciones&lt;br&gt;verifyAdmin\"]\nMensajesTable[\"mensajes Table&lt;br&gt;de_usuario, para_usuario&lt;br&gt;mensaje, fecha\"]\n\nAdminBrowser --&gt; HTTPServer\nUserBrowser --&gt; HTTPServer\nHTTPServer --&gt; VerifyToken\nAdminBrowser --&gt; SocketIOServer\nUserBrowser --&gt; SocketIOServer\nSocketIOServer --&gt; SocketAuth\nSocketAuth --&gt; PersonalRooms\nSocketAuth --&gt; AdminsRoom\nPersonalRooms --&gt; MensajePrivado\nAdminsRoom --&gt; MensajePrivado\nMensajePrivado --&gt; MensajesTable\nAdminBrowser --&gt; GetMensajes\nAdminBrowser --&gt; GetUsuariosConv\nUserBrowser --&gt; GetMensajesMios\nGetMensajes --&gt; MensajesTable\nGetMensajesMios --&gt; MensajesTable\nGetUsuariosConv --&gt; MensajesTable\n\nsubgraph DataLayer [\"Data Layer\"]\n    MensajesTable\nend\n\nsubgraph APILayer [\"REST API\"]\n    GetMensajes\n    GetMensajesMios\n    GetUsuariosConv\nend\n\nsubgraph EventLayer [\"Event Handling\"]\n    MensajePrivado\n    MensajeRecibido\n    MensajePrivado --&gt; MensajeRecibido\nend\n\nsubgraph RoomLayer [\"Room Management\"]\n    PersonalRooms\n    AdminsRoom\nend\n\nsubgraph AuthLayer [\"Authentication\"]\n    VerifyToken\n    SocketAuth\nend\n\nsubgraph ServerLayer [\"Server Layer\"]\n    HTTPServer\n    SocketIOServer\nend\n\nsubgraph ClientLayer [\"Client Layer\"]\n    AdminBrowser\n    UserBrowser\nend</code></pre> <p>Sources: src/router.js L220-L315</p> <p>src/sockets/socketHandler.js L4-L69</p> <p>views/soporte.ejs L1-L191</p>"},{"location":"Support-Chat-System.html#route-and-entry-point","title":"Route and Entry Point","text":"<p>The support chat interface is accessed via the <code>/soporte</code> route, which requires authentication through the <code>verifyToken</code> middleware.</p> Route Method Middleware Purpose <code>/soporte</code> GET <code>verifyToken</code> Renders the support chat interface <p>The route handler extracts the username and role from the JWT payload and passes them to the <code>soporte.ejs</code> template:</p> <p>src/router.js L220-L227</p> <pre><code>router.get(\"/soporte\", verifyToken, (req, res) =&gt; {\n    res.render(\"soporte\", {\n        user: {\n            username: req.user.user,\n            role: req.user.rol\n        }\n    });\n});\n</code></pre> <p>The template receives a <code>user</code> object containing <code>username</code> and <code>role</code> properties, which determine the UI variant to display.</p> <p>Sources: src/router.js L220-L227</p>"},{"location":"Support-Chat-System.html#websocket-connection-and-authentication","title":"WebSocket Connection and Authentication","text":"<p>Socket.IO connections are authenticated using JWT tokens extracted from HTTP cookies. The authentication occurs in a Socket.IO middleware defined in <code>setupSocket</code> function.</p> <pre><code>\n</code></pre> <p>The authentication middleware implementation is located at src/sockets/socketHandler.js L6-L32</p> <p>:</p> <ul> <li>Extracts cookies from <code>socket.request.headers.cookie</code></li> <li>Uses regex <code>/token=([^;]+)/</code> to parse the JWT token</li> <li>Verifies the token with <code>jwt.verify(token, process.env.JWT_SECRET)</code></li> <li>Stores decoded payload in <code>socket.request.user</code></li> <li>Calls <code>next()</code> to allow connection or <code>next(Error)</code> to reject</li> </ul> <p>Sources: src/sockets/socketHandler.js L6-L32</p>"},{"location":"Support-Chat-System.html#room-management","title":"Room Management","text":"<p>The system uses Socket.IO rooms for message routing. Each user is assigned to rooms based on their identity and role upon connection.</p> <pre><code>flowchart TD\n\nOnConnection[\"io.on('connection')\"]\nGetUser[\"Extract user, name, rol&lt;br&gt;from socket.request.user\"]\nPersonalRoom[\"socket.join('user:{user}')&lt;br&gt;Personal room\"]\nRoleCheck[\"rol === 'admin'?\"]\nAdminRoom[\"socket.join('admins')&lt;br&gt;Admin group room\"]\nEnd[\"Ready for messaging\"]\n\nOnConnection --&gt; GetUser\nGetUser --&gt; PersonalRoom\nRoleCheck --&gt; End\nAdminRoom --&gt; End\n\nsubgraph RoomAssignment [\"Room Assignment\"]\n    PersonalRoom\n    RoleCheck\n    AdminRoom\n    PersonalRoom --&gt; RoleCheck\n    RoleCheck --&gt; AdminRoom\nend\n\nsubgraph UserExtraction [\"User Extraction\"]\n    GetUser\nend\n\nsubgraph Connection [\"Connection Event\"]\n    OnConnection\nend</code></pre> <p>Room assignment logic at src/sockets/socketHandler.js L36-L43</p> <p>:</p> <ol> <li>Personal Room: Every user joins <code>user:{username}</code> - their own private room</li> <li>Admin Room: Users with <code>rol === \"admin\"</code> additionally join the <code>admins</code> room</li> </ol> Room Type Pattern Purpose Personal <code>user:{username}</code> Direct messages to specific user Admin Group <code>admins</code> Broadcast to all administrators <p>Sources: src/sockets/socketHandler.js L36-L43</p>"},{"location":"Support-Chat-System.html#message-flow","title":"Message Flow","text":"<p>Messages are sent via the <code>mensaje_privado</code> event and received via the <code>mensaje_recibido</code> event. The routing logic varies based on sender role.</p> <pre><code>sequenceDiagram\n  participant Sender\n  participant Socket Handler\n  participant mensaje_privado\n  participant user:{para} Room\n  participant admins Room\n  participant MySQL\n  participant mensajes Table\n  participant Recipient\n  participant Admins\n\n  Sender-&gt;&gt;Socket Handler: \"emit('mensaje_privado',\n  Socket Handler-&gt;&gt;Socket Handler: {para, mensaje})\"\n  Socket Handler-&gt;&gt;user:{para} Room: \"de = socket.request.user.user\"\n  user:{para} Room-&gt;&gt;Recipient: \"io.to('user:{para}')\n  loop [Sender is not admin]\n    Socket Handler-&gt;&gt;admins Room: .emit('mensaje_recibido')\"\n    admins Room-&gt;&gt;Admins: \"mensaje_recibido event\"\n  end\n  Socket Handler-&gt;&gt;MySQL: \"io.to('admins')\n  MySQL-&gt;&gt;Socket Handler: .emit('mensaje_recibido')\"</code></pre>"},{"location":"Support-Chat-System.html#event-handler-mensaje_privado","title":"Event Handler: mensaje_privado","text":"<p>The <code>mensaje_privado</code> event handler is located at src/sockets/socketHandler.js L45-L63</p> <p>It performs the following operations:</p> <ol> <li>Extract sender: <code>const de = user;</code> (from <code>socket.request.user</code>)</li> <li>Emit to recipient: <code>io.to(\\</code>user:${para}<code>).emit(\"mensaje_recibido\", { de, mensaje })</code></li> <li>Notify admins: If <code>rol !== \"admin\"</code>, emit to <code>admins</code> room</li> <li>Persist to database: Execute INSERT query to <code>mensajes</code> table</li> </ol>"},{"location":"Support-Chat-System.html#message-routing-rules","title":"Message Routing Rules","text":"Sender Role Recipient Room Admins Room Logic Regular User \u2713 Notified \u2713 Notified All admins see user messages Admin \u2713 Notified \u2717 Not notified Only recipient sees message <p>Sources: src/sockets/socketHandler.js L45-L63</p>"},{"location":"Support-Chat-System.html#database-integration","title":"Database Integration","text":"<p>All messages are persisted to the <code>mensajes</code> table immediately upon receipt. The insertion occurs within the <code>mensaje_privado</code> event handler.</p> <p>SQL Query src/sockets/socketHandler.js L55-L62</p> <p>:</p> <pre><code>INSERT INTO mensajes (de_usuario, para_usuario, mensaje) \nVALUES (?, ?, ?)\n</code></pre> <p>Table Structure:</p> Column Type Description <code>de_usuario</code> VARCHAR Sender username (FK to usuarios) <code>para_usuario</code> VARCHAR Recipient username (FK to usuarios) <code>mensaje</code> TEXT Message content <code>fecha</code> DATETIME Timestamp (auto-generated) <p>The <code>fecha</code> column is automatically populated by the database with the current timestamp upon insertion.</p> <p>Sources: src/sockets/socketHandler.js L55-L62</p>"},{"location":"Support-Chat-System.html#http-api-endpoints","title":"HTTP API Endpoints","text":"<p>The system provides three REST API endpoints for retrieving message history. These endpoints complement the real-time WebSocket functionality.</p>"},{"location":"Support-Chat-System.html#get-apimensajes","title":"GET /api/mensajes","text":"<p>Authorization: <code>verifyAdmin</code> middleware required Query Parameter: <code>con</code> (username) Location: src/router.js L229-L253</p> <p>Returns all messages exchanged with a specific user (bidirectional conversation).</p> <p>SQL Query:</p> <pre><code>SELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <p>Response Format:</p> <pre><code>[\n  {\n    \"de_usuario\": \"john\",\n    \"para_usuario\": \"admin\",\n    \"mensaje\": \"Need help\",\n    \"fecha\": \"2024-01-15T10:30:00.000Z\"\n  }\n]\n</code></pre>"},{"location":"Support-Chat-System.html#get-apimensajesmios","title":"GET /api/mensajes/mios","text":"<p>Authorization: <code>verifyToken</code> middleware required Location: src/router.js L256-L280</p> <p>Returns all messages involving the authenticated user (extracted from <code>req.user.user</code>).</p> <p>SQL Query: Same as <code>/api/mensajes</code> but using authenticated user's username.</p>"},{"location":"Support-Chat-System.html#get-apiusuarios-conversaciones","title":"GET /api/usuarios-conversaciones","text":"<p>Authorization: <code>verifyAdmin</code> middleware required Location: src/router.js L283-L315</p> <p>Returns a list of non-admin users who have conversations with administrators.</p> <p>SQL Query:</p> <pre><code>SELECT DISTINCT usuario\nFROM (\n  SELECT de_usuario AS usuario FROM mensajes\n  WHERE para_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n\n  UNION\n\n  SELECT para_usuario AS usuario FROM mensajes\n  WHERE de_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n) AS conversaciones\nWHERE usuario NOT IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n</code></pre> <p>Response Format:</p> <pre><code>[\"john\", \"alice\", \"bob\"]\n</code></pre> Endpoint Method Auth Purpose <code>/api/mensajes</code> GET Admin Get specific user conversation <code>/api/mensajes/mios</code> GET User Get own conversation history <code>/api/usuarios-conversaciones</code> GET Admin List users with conversations <p>Sources: src/router.js L229-L315</p>"},{"location":"Support-Chat-System.html#user-interface-regular-users","title":"User Interface: Regular Users","text":"<p>Regular users (non-admins) see a simplified single-conversation interface. The UI is defined at views/soporte.ejs L26-L33</p> <p>and client-side logic at views/soporte.ejs L164-L188</p>"},{"location":"Support-Chat-System.html#ui-components","title":"UI Components","text":"<pre><code>flowchart TD\n\nContainer[\"Container div.container.mt-4\"]\nHeader[\"Header: Connected as username\"]\nChatDiv[\"Chat div#chat&lt;br&gt;400px height&lt;br&gt;overflow-y: auto\"]\nForm[\"Form#formulario\"]\nInputMsg[\"input#mensaje&lt;br&gt;text field\"]\nBtnSend[\"button.btn.btn-primary&lt;br&gt;Enviar\"]\n\nContainer --&gt; Header\nContainer --&gt; ChatDiv\nContainer --&gt; Form\nForm --&gt; InputMsg\nForm --&gt; BtnSend</code></pre>"},{"location":"Support-Chat-System.html#client-side-initialization","title":"Client-Side Initialization","text":"<ol> <li>Load Message History views/soporte.ejs L166-L171 : * Fetch from <code>/api/mensajes/mios</code> * Parse JSON response * Call <code>agregarMensaje()</code> for each message with timestamp</li> <li>WebSocket Listener views/soporte.ejs L174-L177 : * Listen for <code>mensaje_recibido</code> event * Display incoming messages with sender username</li> <li>Form Submit Handler views/soporte.ejs L180-L187 : * Prevent default form submission * Emit <code>mensaje_privado</code> event with <code>{ para: \"admin\", mensaje }</code> * Display own message locally as \"T\u00fa\"</li> </ol> <p>Message Destination: All user messages are hardcoded to send to <code>\"admin\"</code> as the recipient.</p> <p>Sources: views/soporte.ejs L26-L33</p> <p>views/soporte.ejs L164-L188</p>"},{"location":"Support-Chat-System.html#user-interface-administrators","title":"User Interface: Administrators","text":"<p>Administrators see a more complex interface with a user list sidebar, conversation switching, and visual notifications for new messages. The UI is defined at views/soporte.ejs L8-L24</p> <p>and client-side logic at views/soporte.ejs L62-L163</p>"},{"location":"Support-Chat-System.html#ui-layout","title":"UI Layout","text":"<pre><code>flowchart TD\n\nContainer[\"Container div.container.mt-4\"]\nRow[\"Row div.row\"]\nSidebar[\"Sidebar div.col-md-3.border-end\"]\nUserListHeader[\"h5: Usuarios\"]\nUserList[\"ul#lista-usuarios.list-group\"]\nChatArea[\"Chat Area div.col-md-9\"]\nChatDiv[\"Chat div#chat\"]\nForm[\"Form#formulario\"]\nHiddenInput[\"input#usuarioActual&lt;br&gt;type=hidden\"]\nInputMsg[\"input#mensaje\"]\nBtnSend[\"button Enviar\"]\n\nContainer --&gt; Row\nRow --&gt; Sidebar\nRow --&gt; ChatArea\nSidebar --&gt; UserListHeader\nSidebar --&gt; UserList\nChatArea --&gt; ChatDiv\nChatArea --&gt; Form\nForm --&gt; HiddenInput\nForm --&gt; InputMsg\nForm --&gt; BtnSend</code></pre>"},{"location":"Support-Chat-System.html#client-side-state-management","title":"Client-Side State Management","text":"<p>Key Variables views/soporte.ejs L65-L66</p> <p>:</p> Variable Type Purpose <code>conversaciones</code> Object Maps username to array of message objects <code>notificaciones</code> Object (Declared but unused in current implementation) <code>usuarioActual</code> HTMLInputElement Hidden field storing currently selected user"},{"location":"Support-Chat-System.html#initialization-sequence","title":"Initialization Sequence","text":"<ol> <li>Fetch User List views/soporte.ejs L105-L112 : * GET <code>/api/usuarios-conversaciones</code> * For each user: call <code>agregarUsuarioLista()</code> and <code>cargarHistorial()</code></li> <li>Load Conversation History views/soporte.ejs L115-L125 : * GET <code>/api/mensajes?con={usuario}</code> * Store in <code>conversaciones[usuario]</code> array * Call <code>renderConversacion()</code> to display</li> </ol>"},{"location":"Support-Chat-System.html#function-agregarusuariolista","title":"Function: agregarUsuarioLista","text":"<p>Located at views/soporte.ejs L89-L102</p> <p>Creates a list item (<code>&lt;li&gt;</code>) element with the following properties:</p> <ul> <li><code>id</code>: <code>\"user-{username}\"</code></li> <li><code>className</code>: <code>\"list-group-item\"</code></li> <li><code>dataset.nuevo</code>: Tracks if user has new messages</li> <li>Click handler: calls <code>renderConversacion(usuario)</code></li> </ul>"},{"location":"Support-Chat-System.html#function-renderconversacion","title":"Function: renderConversacion","text":"<p>Located at views/soporte.ejs L69-L86</p> <p>Displays messages for a specific user:</p> <ol> <li>Clear chat div: <code>chat.innerHTML = ''</code></li> <li>Retrieve messages: <code>conversaciones[usuario]</code></li> <li>Render each message with <code>agregarMensaje(de, mensaje, fecha)</code></li> <li>Update <code>usuarioActual.value</code></li> <li>Update list item styles: * Active conversation: <code>bg-light</code>, <code>text-success</code>, <code>fw-bold</code> * Mark as viewed: <code>dataset.nuevo = \"false\"</code></li> </ol>"},{"location":"Support-Chat-System.html#notification-system","title":"Notification System","text":"<p>The system provides visual feedback for new messages using Bootstrap color classes:</p> State Classes Applied Meaning Active Conversation <code>bg-light</code>, <code>text-success</code>, <code>fw-bold</code> Currently viewing New Message <code>fw-bold</code>, <code>text-danger</code> Unread message Previously Viewed <code>text-success</code> No special styling after first view <p>Logic views/soporte.ejs L136-L145</p> <p>:</p> <p>When <code>mensaje_recibido</code> event fires:</p> <ul> <li>If message is from non-active user \u2192 apply red styling (<code>text-danger</code>, <code>fw-bold</code>)</li> <li>If message is from active user \u2192 call <code>renderConversacion()</code> to mark as read</li> </ul>"},{"location":"Support-Chat-System.html#message-sending","title":"Message Sending","text":"<p>Form submit handler at views/soporte.ejs L150-L162</p> <p>:</p> <ol> <li>Get recipient from <code>usuarioActual.value</code></li> <li>Emit <code>mensaje_privado</code> with <code>{ para, mensaje }</code></li> <li>Store message locally in <code>conversaciones[para]</code></li> <li>Re-render conversation to display own message immediately</li> </ol> <p>Sources: views/soporte.ejs L8-L24</p> <p>views/soporte.ejs L62-L163</p>"},{"location":"Support-Chat-System.html#utility-functions","title":"Utility Functions","text":""},{"location":"Support-Chat-System.html#formatearfecha","title":"formatearFecha","text":"<p>Located at views/soporte.ejs L44-L52</p> <p>Converts ISO 8601 timestamp to Spanish date format: <code>DD/MM/YYYY HH:MM</code></p> <p>Implementation:</p> <ul> <li>Parses ISO string with <code>new Date(isoString)</code></li> <li>Extracts day, month, year, hour, minute</li> <li>Applies <code>padStart(2, '0')</code> for zero-padding</li> </ul>"},{"location":"Support-Chat-System.html#agregarmensaje","title":"agregarMensaje","text":"<p>Located at views/soporte.ejs L54-L60</p> <p>Appends a message to the chat div with formatted HTML:</p> <pre><code>&lt;p&gt;\n  &lt;strong&gt;username:&lt;/strong&gt; message text\n  &lt;span class=\"text-muted\" style=\"font-size: 0.8em;\"&gt; (DD/MM/YYYY HH:MM)&lt;/span&gt;\n&lt;/p&gt;\n</code></pre> <p>The timestamp span is only included if <code>fecha</code> parameter is provided. After appending, the function auto-scrolls to bottom: <code>chat.scrollTop = chat.scrollHeight</code>.</p> <p>Sources: views/soporte.ejs L44-L60</p>"},{"location":"Support-Chat-System.html#disconnect-handling","title":"Disconnect Handling","text":"<p>The Socket.IO server handles disconnection events at src/sockets/socketHandler.js L65-L67</p> <p>:</p> <pre><code>socket.on(\"disconnect\", () =&gt; {\n    console.log(`\ud83d\udd34 Usuario desconectado: ${user}`);\n});\n</code></pre> <p>Currently, the disconnect handler only logs the event. The system does not:</p> <ul> <li>Remove users from rooms (Socket.IO handles this automatically)</li> <li>Notify other users of disconnection</li> <li>Update online/offline status indicators</li> </ul> <p>When a user disconnects, Socket.IO automatically removes them from all rooms they joined during connection.</p> <p>Sources: src/sockets/socketHandler.js L65-L67</p>"},{"location":"Support-Chat-System.html#error-handling","title":"Error Handling","text":""},{"location":"Support-Chat-System.html#authentication-errors","title":"Authentication Errors","text":"<p>WebSocket authentication failures are handled in the Socket.IO middleware src/sockets/socketHandler.js L10-L31</p> <p>:</p> Error Condition Error Message Action No cookies present \"No autenticado\" Reject connection with <code>next(Error)</code> Token not found in cookies \"Token no proporcionado\" Reject connection Token verification fails \"Token inv\u00e1lido\" Reject connection"},{"location":"Support-Chat-System.html#database-errors","title":"Database Errors","text":"<p>Message insertion errors are logged but do not prevent message delivery src/sockets/socketHandler.js L57-L61</p> <p>:</p> <pre><code>if (err) {\n    console.error(\"\u274c Error al guardar mensaje:\", err);\n} else {\n    console.log(\"\ud83d\udcbe Mensaje guardado:\", `${de} \u27a1\ufe0f ${para}`);\n}\n</code></pre> <p>The system delivers messages to recipients via WebSocket even if database insertion fails.</p>"},{"location":"Support-Chat-System.html#api-endpoint-errors","title":"API Endpoint Errors","text":"<p>HTTP API endpoints return appropriate status codes and JSON error messages:</p> <ul> <li><code>400</code>: Missing required query parameter src/router.js L232-L234</li> <li><code>403</code>: User not authorized src/router.js L260</li> <li><code>500</code>: Database query error src/router.js L246-L248 src/router.js L273-L275</li> </ul> <p>Sources: src/sockets/socketHandler.js L10-L31</p> <p>src/sockets/socketHandler.js L57-L61</p> <p>src/router.js L229-L280</p>"},{"location":"System-Components.html","title":"System Components","text":"<p>Relevant source files * index.js * package-lock.json * src/router.js</p> <p>This document details the major subsystems that compose the registro-sesiones application. It describes the core architectural components, their responsibilities, and how they interact to provide authentication, product management, and real-time communication functionality.</p> <p>For information about how these components are initialized and configured at startup, see Application Bootstrap. For details on the request processing flow through these components, see Request Processing Pipeline.</p>"},{"location":"System-Components.html#component-overview","title":"Component Overview","text":"<p>The sistema consists of ten major subsystems organized into distinct functional layers. The following diagram maps these high-level components to their primary code artifacts:</p> <pre><code>flowchart TD\n\nHTTPServer[\"HTTP Server&lt;br&gt;(index.js:10-12)\"]\nExpressApp[\"Express Application&lt;br&gt;(index.js:2-3)\"]\nSocketIOServer[\"Socket.IO Server&lt;br&gt;(index.js:9-12)\"]\nRouter[\"Router Module&lt;br&gt;(src/router.js)\"]\nControllers[\"Controllers&lt;br&gt;(src/controllers.js)\"]\nJWTModule[\"JWT Module&lt;br&gt;(jsonwebtoken)\"]\nVerifyToken[\"verifyToken Middleware&lt;br&gt;(src/middlewares/verifyToken.js)\"]\nVerifyAdmin[\"verifyAdmin Middleware&lt;br&gt;(src/middlewares/verifyAdmin.js)\"]\nBCrypt[\"BCrypt Module&lt;br&gt;(bcryptjs)\"]\nSecurityMiddleware[\"Security Middleware&lt;br&gt;(src/middlewares/security.js)\"]\nAuthLimiter[\"Rate Limiter&lt;br&gt;(src/middlewares/authLimiter.js)\"]\nValidator[\"Express Validator&lt;br&gt;(express-validator)\"]\nDBConnection[\"Database Connection&lt;br&gt;(database/db.js)\"]\nUsuariosTable[\"usuarios table\"]\nProductosTable[\"productos table\"]\nMensajesTable[\"mensajes table\"]\nSocketHandler[\"Socket Handler&lt;br&gt;(src/sockets/socketHandler.js)\"]\nSetupSocket[\"setupSocket function&lt;br&gt;(index.js:14, 57)\"]\nEJSEngine[\"EJS Engine&lt;br&gt;(index.js:52)\"]\nViewTemplates[\"View Templates&lt;br&gt;(views/*.ejs)\"]\nI18nModule[\"i18n Module&lt;br&gt;(i18n)\"]\nLocaleFiles[\"Locale Files&lt;br&gt;(locales/en.json, locales/es.json)\"]\nPuppeteer[\"Puppeteer&lt;br&gt;(puppeteer)\"]\nPDFKit[\"PDFKit&lt;br&gt;(pdfkit)\"]\nMulter[\"Multer&lt;br&gt;(src/middlewares/multerConfig.js)\"]\nStaticServer[\"Static File Server&lt;br&gt;(index.js:43)\"]\n\nExpressApp --&gt; SecurityMiddleware\nExpressApp --&gt; Router\nRouter --&gt; VerifyToken\nRouter --&gt; VerifyAdmin\nRouter --&gt; EJSEngine\nSocketIOServer --&gt; SetupSocket\nControllers --&gt; DBConnection\nSocketHandler --&gt; DBConnection\nRouter --&gt; Puppeteer\nRouter --&gt; PDFKit\nRouter --&gt; Multer\nExpressApp --&gt; I18nModule\nRouter --&gt; Validator\nRouter --&gt; BCrypt\n\nsubgraph subGraph9 [\"File Handling\"]\n    Multer\n    StaticServer\nend\n\nsubgraph subGraph8 [\"Document Generation\"]\n    Puppeteer\n    PDFKit\nend\n\nsubgraph Internationalization [\"Internationalization\"]\n    I18nModule\n    LocaleFiles\n    I18nModule --&gt; LocaleFiles\nend\n\nsubgraph subGraph6 [\"View Layer\"]\n    EJSEngine\n    ViewTemplates\n    EJSEngine --&gt; ViewTemplates\nend\n\nsubgraph subGraph5 [\"Real-time Layer\"]\n    SocketHandler\n    SetupSocket\n    SetupSocket --&gt; SocketHandler\nend\n\nsubgraph subGraph4 [\"Data Layer\"]\n    DBConnection\n    UsuariosTable\n    ProductosTable\n    MensajesTable\n    DBConnection --&gt; UsuariosTable\n    DBConnection --&gt; ProductosTable\n    DBConnection --&gt; MensajesTable\nend\n\nsubgraph subGraph3 [\"Security Layer\"]\n    SecurityMiddleware\n    AuthLimiter\n    Validator\n    SecurityMiddleware --&gt; AuthLimiter\nend\n\nsubgraph subGraph2 [\"Authentication Layer\"]\n    JWTModule\n    VerifyToken\n    VerifyAdmin\n    BCrypt\n    VerifyToken --&gt; JWTModule\n    VerifyAdmin --&gt; VerifyToken\nend\n\nsubgraph subGraph1 [\"Request Routing Layer\"]\n    Router\n    Controllers\n    Router --&gt; Controllers\nend\n\nsubgraph subGraph0 [\"Application Server Layer\"]\n    HTTPServer\n    ExpressApp\n    SocketIOServer\n    HTTPServer --&gt; ExpressApp\n    HTTPServer --&gt; SocketIOServer\nend</code></pre> <p>Sources: index.js L1-L86</p> <p>src/router.js L1-L608</p> <p>package-lock.json L1-L50</p>"},{"location":"System-Components.html#application-server-layer","title":"Application Server Layer","text":"<p>The application server layer consists of three primary components that handle all incoming network connections.</p>"},{"location":"System-Components.html#http-server","title":"HTTP Server","text":"<p>The HTTP server is created using Node.js's built-in <code>http</code> module and serves as the foundation for both traditional HTTP requests and WebSocket connections. It is instantiated in index.js L8-L10</p> <p>:</p> <pre><code>const http = require(\"http\");\nconst server = http.createServer(app);\n</code></pre> <p>This server listens on port 3000 as defined in index.js L62-L65</p>"},{"location":"System-Components.html#express-application","title":"Express Application","text":"<p>The Express application (<code>app</code>) manages HTTP request/response cycles, middleware execution, and route handling. It is initialized in index.js L2-L3</p> <p>:</p> <pre><code>const express = require(\"express\");\nconst app = express();\n</code></pre> <p>The Express application is configured with multiple middleware layers defined in index.js L37-L48</p> <p>including body parsers, static file serving, security headers, session management, and internationalization.</p>"},{"location":"System-Components.html#socketio-server","title":"Socket.IO Server","text":"<p>The Socket.IO server enables bidirectional real-time communication via WebSockets. It is attached to the HTTP server in index.js L9-L12</p> <p>:</p> <pre><code>const socketIO = require(\"socket.io\");\nconst io = socketIO(server);\n</code></pre> <p>The Socket.IO server is configured with custom connection handling logic through the <code>setupSocket</code> function, invoked in index.js L57</p> <p>Sources: index.js L1-L65</p>"},{"location":"System-Components.html#routing-system","title":"Routing System","text":"<p>The routing system directs incoming HTTP requests to appropriate handlers and middleware chains.</p> <pre><code>flowchart TD\n\nRouterInstance[\"express.Router()&lt;br&gt;(router.js:2)\"]\nPublicRoutes[\"Public Routes&lt;br&gt;/, /login, /registro\"]\nProtectedRoutes[\"Protected Routes&lt;br&gt;/admin, /soporte\"]\nAdminRoutes[\"Admin Routes&lt;br&gt;/edit, /delete\"]\nAPIRoutes[\"API Routes&lt;br&gt;/api/mensajes, /api/usuarios-conversaciones\"]\nPDFRoutes[\"PDF Routes&lt;br&gt;/pdf/descargar, /pdfkit/descargar\"]\nInlineHandlers[\"Inline Handlers&lt;br&gt;(router.js)\"]\nCRUDHandlers[\"CRUD Handlers&lt;br&gt;(controllers.js)\"]\n\nsubgraph subGraph0 [\"Router Module (src/router.js)\"]\n    RouterInstance\n    PublicRoutes\n    ProtectedRoutes\n    AdminRoutes\n    APIRoutes\n    PDFRoutes\n    InlineHandlers\n    CRUDHandlers\n    RouterInstance --&gt; PublicRoutes\n    RouterInstance --&gt; ProtectedRoutes\n    RouterInstance --&gt; AdminRoutes\n    RouterInstance --&gt; APIRoutes\n    RouterInstance --&gt; PDFRoutes\n    PublicRoutes --&gt; InlineHandlers\n    ProtectedRoutes --&gt; InlineHandlers\n    AdminRoutes --&gt; InlineHandlers\n    APIRoutes --&gt; InlineHandlers\n    PDFRoutes --&gt; InlineHandlers\n    PublicRoutes --&gt; CRUDHandlers\n    ProtectedRoutes --&gt; CRUDHandlers\nend</code></pre> <p>The router module exports an Express Router instance that is mounted in the Express application at index.js L48</p> <p>It defines the following route categories:</p> Route Category Authentication Required Examples Lines Public Routes No <code>/</code>, <code>/login</code>, <code>/registro</code>, <code>/set-lang/:lang</code> router.js L59-L80 router.js L398-L407 Protected User Routes <code>verifyToken</code> <code>/admin</code>, <code>/soporte</code>, <code>/pdfAdmin</code> router.js L119-L134 router.js L220-L227 Protected API Routes <code>verifyToken</code> or <code>verifyAdmin</code> <code>/api/mensajes</code>, <code>/api/mensajes/mios</code>, <code>/api/usuarios-conversaciones</code> router.js L229-L315 CRUD Routes Varies <code>/create</code>, <code>/edit/:id</code>, <code>/delete/:id</code> router.js L153-L208 PDF Generation Routes <code>verifyToken</code> <code>/pdf/descargar</code>, <code>/pdfkit/descargar</code> router.js L317-L396 Authentication Routes No (with rate limiting) <code>/auth</code>, <code>/register</code> router.js L532-L601 router.js L414-L484 <p>Sources: src/router.js L1-L608</p>"},{"location":"System-Components.html#authentication-layer","title":"Authentication Layer","text":"<p>The authentication layer provides user identity verification and role-based access control using JWT tokens.</p> <pre><code>flowchart TD\n\nLoginRoute[\"POST /auth&lt;br&gt;(router.js:532-601)\"]\nCredentialValidation[\"Credential Validation&lt;br&gt;(bcrypt.compare)\"]\nPayloadCreation[\"Payload Creation&lt;br&gt;(router.js:559-564)\"]\nTokenSigning[\"jwt.sign()&lt;br&gt;(router.js:567)\"]\nCookieStorage[\"Cookie Storage&lt;br&gt;(router.js:570-574)\"]\nVerifyTokenMW[\"verifyToken middleware&lt;br&gt;(src/middlewares/verifyToken.js)\"]\nCookieParsing[\"Cookie Parsing&lt;br&gt;(cookie-parser)\"]\nJWTVerify[\"jwt.verify()&lt;br&gt;verifyToken.js\"]\nUserAttachment[\"req.user attachment&lt;br&gt;verifyToken.js\"]\nVerifyAdminMW[\"verifyAdmin middleware&lt;br&gt;(src/middlewares/verifyAdmin.js)\"]\nRoleCheck[\"Role Check&lt;br&gt;(req.user.rol === 'admin')\"]\nBCryptHash[\"bcrypt.hash()&lt;br&gt;(router.js:453)\"]\nBCryptCompare[\"bcrypt.compare()&lt;br&gt;(router.js:543)\"]\n\nCredentialValidation --&gt; BCryptCompare\nUserAttachment --&gt; VerifyAdminMW\n\nsubgraph subGraph3 [\"Password Security\"]\n    BCryptHash\n    BCryptCompare\nend\n\nsubgraph subGraph2 [\"Role Authorization\"]\n    VerifyAdminMW\n    RoleCheck\n    VerifyAdminMW --&gt; RoleCheck\nend\n\nsubgraph subGraph1 [\"Token Verification\"]\n    VerifyTokenMW\n    CookieParsing\n    JWTVerify\n    UserAttachment\n    CookieParsing --&gt; VerifyTokenMW\n    VerifyTokenMW --&gt; JWTVerify\n    JWTVerify --&gt; UserAttachment\nend\n\nsubgraph subGraph0 [\"Token Generation (router.js)\"]\n    LoginRoute\n    CredentialValidation\n    PayloadCreation\n    TokenSigning\n    CookieStorage\n    LoginRoute --&gt; CredentialValidation\n    CredentialValidation --&gt; PayloadCreation\n    PayloadCreation --&gt; TokenSigning\n    TokenSigning --&gt; CookieStorage\nend</code></pre>"},{"location":"System-Components.html#jwt-token-management","title":"JWT Token Management","text":"<p>JSON Web Tokens are used for stateless authentication. The JWT secret is loaded from environment variables via index.js L4</p> <p>Tokens are:</p> <ul> <li>Generated during login at router.js L567  with a 1-hour expiration</li> <li>Signed with <code>HS256</code> algorithm using <code>process.env.JWT_SECRET</code></li> <li>Stored in HTTP-only cookies named <code>token</code> at router.js L570-L574</li> <li>Verified by the <code>verifyToken</code> middleware imported at router.js L16</li> </ul> <p>The token payload structure is defined at router.js L559-L564</p> <p>and includes:</p> <ul> <li><code>user</code>: username</li> <li><code>name</code>: display name</li> <li><code>rol</code>: user role (admin/user)</li> <li><code>imagen</code>: profile image filename</li> </ul>"},{"location":"System-Components.html#middleware-chain","title":"Middleware Chain","text":"<p>Two middleware functions enforce authentication and authorization:</p> <ol> <li><code>verifyToken</code> (router.js L16 ): Validates JWT from cookies and attaches decoded user data to <code>req.user</code></li> <li><code>verifyAdmin</code> (router.js L17 ): Extends <code>verifyToken</code> by additionally checking that <code>req.user.rol === 'admin'</code></li> </ol> <p>These are applied to routes requiring authentication. For example:</p> <ul> <li><code>/admin</code> uses <code>verifyToken</code> at router.js L119</li> <li><code>/api/mensajes</code> uses <code>verifyAdmin</code> at router.js L229</li> </ul>"},{"location":"System-Components.html#password-hashing","title":"Password Hashing","text":"<p>User passwords are hashed using bcrypt with a cost factor of 8:</p> <ul> <li>Hashing occurs during registration at router.js L453</li> <li>Verification occurs during login at router.js L543</li> </ul> <p>Sources: src/router.js L1-L608</p> <p>index.js L4-L7</p>"},{"location":"System-Components.html#security-layer","title":"Security Layer","text":"<p>The security layer implements multiple defense mechanisms against common web vulnerabilities.</p>"},{"location":"System-Components.html#security-middleware-module","title":"Security Middleware Module","text":"<p>A centralized security configuration is applied via index.js L15</p> <p>and index.js L45</p> <p>:</p> <pre><code>const securityMiddleware = require(\"./src/middlewares/security\");\napp.use(securityMiddleware);\n</code></pre> <p>This module (referenced from <code>package-lock.json</code> dependencies) configures:</p> <ul> <li>Helmet (package-lock.json L1740-L1748 ): Sets secure HTTP headers</li> <li>Express Rate Limit (package-lock.json L1371-L1382 ): Prevents brute-force attacks</li> </ul>"},{"location":"System-Components.html#rate-limiting","title":"Rate Limiting","text":"<p>Authentication endpoints are protected by a rate limiter imported at router.js L21</p> <p>:</p> <pre><code>const limiter = require(\"./middlewares/authLimiter\");\nrouter.post(\"/auth\", limiter, async (req, res) =&gt; { ... });\n</code></pre> <p>This is applied to the login route at router.js L532</p>"},{"location":"System-Components.html#input-validation","title":"Input Validation","text":"<p>User input is validated using <code>express-validator</code> (router.js L3</p> <p>). Validation rules are defined inline with route handlers. For example, the registration route at router.js L415-L428</p> <p>validates:</p> <ul> <li><code>user</code>: minimum 4 characters</li> <li><code>name</code>: minimum 4 characters</li> <li><code>pass</code>: minimum 4 characters</li> <li><code>email</code>: valid email format</li> <li><code>edad</code>: numeric value</li> </ul> <p>Validation errors are collected and rendered back to the user at router.js L430-L441</p> <p>Sources: src/router.js L1-L484</p> <p>index.js L15-L46</p> <p>package-lock.json L1371-L1748</p>"},{"location":"System-Components.html#data-layer","title":"Data Layer","text":"<p>The data layer manages persistent storage using MySQL.</p> <pre><code>flowchart TD\n\nDBModule[\"db module&lt;br&gt;(database/db.js)\"]\nMySQL2Driver[\"mysql2 driver&lt;br&gt;(package-lock.json:26)\"]\nUsuariosTable[\"usuarios table&lt;br&gt;PK: usuario\"]\nProductosTable[\"productos table&lt;br&gt;PK: ref (AUTO_INCREMENT)\"]\nMensajesTable[\"mensajes table&lt;br&gt;FK: de_usuario, para_usuario\"]\nRouterQueries[\"Router Queries&lt;br&gt;(router.js)\"]\nControllerQueries[\"Controller Queries&lt;br&gt;(controllers.js)\"]\nSocketQueries[\"Socket Handler Queries&lt;br&gt;(socketHandler.js)\"]\n\nRouterQueries --&gt; DBModule\nControllerQueries --&gt; DBModule\nSocketQueries --&gt; DBModule\nDBModule --&gt; UsuariosTable\nDBModule --&gt; ProductosTable\nDBModule --&gt; MensajesTable\n\nsubgraph subGraph2 [\"Data Access Points\"]\n    RouterQueries\n    ControllerQueries\n    SocketQueries\nend\n\nsubgraph subGraph1 [\"Database Schema\"]\n    UsuariosTable\n    ProductosTable\n    MensajesTable\n    MensajesTable --&gt; UsuariosTable\n    MensajesTable --&gt; UsuariosTable\nend\n\nsubgraph subGraph0 [\"Database Connection\"]\n    DBModule\n    MySQL2Driver\n    DBModule --&gt; MySQL2Driver\nend</code></pre>"},{"location":"System-Components.html#database-connection-module","title":"Database Connection Module","text":"<p>The database connection is established through a module at <code>database/db.js</code> (router.js L5</p> <p>index.js L13</p> <p>):</p> <pre><code>const db = require(\"./database/db\");\n</code></pre> <p>This module uses the <code>mysql2</code> package (package-lock.json L26</p> <p>) to create a connection pool.</p>"},{"location":"System-Components.html#data-schema","title":"Data Schema","text":"<p>Three primary tables store application data:</p> Table Primary Key Key Columns Purpose <code>usuarios</code> <code>usuario</code> <code>nombre</code>, <code>rol</code>, <code>pass</code>, <code>imagen</code> User authentication and profiles <code>productos</code> <code>ref</code> (AUTO_INCREMENT) <code>nombre</code>, <code>precio</code>, <code>stock</code> Product inventory <code>mensajes</code> Composite <code>de_usuario</code> (FK), <code>para_usuario</code> (FK), <code>mensaje</code>, <code>fecha</code> Chat message history"},{"location":"System-Components.html#query-patterns","title":"Query Patterns","text":"<p>Database queries are executed throughout the application:</p> <ul> <li>Router queries: Direct queries in route handlers (router.js L121 router.js L188 router.js L200 router.js L244 router.js L271 router.js L306 router.js L318 router.js L356 router.js L537 )</li> <li>Controller queries: Encapsulated in controller functions (router.js L13 router.js L603-L604 )</li> <li>Socket handler queries: Real-time message persistence in socket event handlers</li> </ul> <p>All queries use parameterized statements to prevent SQL injection, e.g., <code>db.query(\"SELECT * FROM productos WHERE ref = ?\", [ref], ...)</code> at router.js L188</p> <p>Sources: src/router.js L5-L608</p> <p>index.js L13</p> <p>package-lock.json L26</p>"},{"location":"System-Components.html#real-time-communication-system","title":"Real-time Communication System","text":"<p>The real-time communication system enables bidirectional messaging between clients and server using Socket.IO.</p> <pre><code>flowchart TD\n\nIOInstance[\"io (Socket.IO Server)&lt;br&gt;(index.js:12)\"]\nSetupSocketCall[\"setupSocket(io)&lt;br&gt;(index.js:57)\"]\nSocketHandlerFile[\"socketHandler.js&lt;br&gt;(src/sockets/)\"]\nConnectionEvent[\"connection event\"]\nAuthMiddleware[\"JWT Authentication&lt;br&gt;(from cookie)\"]\nRoomJoining[\"Room Joining&lt;br&gt;user:username, admins\"]\nEventHandlers[\"Event Handlers&lt;br&gt;mensaje_privado, disconnect\"]\nMensajesInsert[\"INSERT INTO mensajes\"]\nMessageDB[\"mensajes table\"]\nUserRoom[\"Personal Room&lt;br&gt;user:username\"]\nAdminRoom[\"Admin Room&lt;br&gt;admins\"]\nEmitRecipient[\"io.to().emit()&lt;br&gt;mensaje_recibido\"]\n\nSetupSocketCall --&gt; SocketHandlerFile\nEventHandlers --&gt; MensajesInsert\nEventHandlers --&gt; EmitRecipient\nRoomJoining --&gt; UserRoom\nRoomJoining --&gt; AdminRoom\n\nsubgraph subGraph3 [\"Message Routing\"]\n    UserRoom\n    AdminRoom\n    EmitRecipient\n    EmitRecipient --&gt; UserRoom\n    EmitRecipient --&gt; AdminRoom\nend\n\nsubgraph subGraph2 [\"Message Persistence\"]\n    MensajesInsert\n    MessageDB\n    MensajesInsert --&gt; MessageDB\nend\n\nsubgraph subGraph1 [\"Socket Handler Module\"]\n    SocketHandlerFile\n    ConnectionEvent\n    AuthMiddleware\n    RoomJoining\n    EventHandlers\n    SocketHandlerFile --&gt; ConnectionEvent\n    ConnectionEvent --&gt; AuthMiddleware\n    AuthMiddleware --&gt; RoomJoining\n    RoomJoining --&gt; EventHandlers\nend\n\nsubgraph subGraph0 [\"Socket.IO Server Setup\"]\n    IOInstance\n    SetupSocketCall\n    IOInstance --&gt; SetupSocketCall\nend</code></pre>"},{"location":"System-Components.html#socketio-server-initialization","title":"Socket.IO Server Initialization","text":"<p>The Socket.IO server is created and attached to the HTTP server at index.js L9-L12</p> <p>:</p> <pre><code>const socketIO = require(\"socket.io\");\nconst io = socketIO(server);\n</code></pre>"},{"location":"System-Components.html#socket-handler-setup","title":"Socket Handler Setup","text":"<p>The socket connection logic is configured through a setup function imported at index.js L14</p> <p>:</p> <pre><code>const setupSocket = require(\"./src/sockets/socketHandler\");\n</code></pre> <p>This function is invoked at index.js L57</p> <p>and configures:</p> <ul> <li>Connection authentication using JWT from cookies</li> <li>Room-based routing (personal rooms and admin room)</li> <li>Event listeners for <code>mensaje_privado</code> and <code>disconnect</code> events</li> </ul>"},{"location":"System-Components.html#room-architecture","title":"Room Architecture","text":"<p>The system uses a room-based routing strategy:</p> <ul> <li>Personal rooms: Each user joins a room named <code>user:{username}</code> for direct messaging</li> <li>Admin room: All users with <code>rol === 'admin'</code> join a collective <code>admins</code> room</li> <li>Routing logic: Messages from non-admin users are delivered to both recipient's personal room and the admin room, enabling supervision</li> </ul>"},{"location":"System-Components.html#message-persistence","title":"Message Persistence","text":"<p>All messages are persisted to the <code>mensajes</code> table with columns:</p> <ul> <li><code>de_usuario</code>: sender username (FK to usuarios)</li> <li><code>para_usuario</code>: recipient username (FK to usuarios)</li> <li><code>mensaje</code>: message content (TEXT)</li> <li><code>fecha</code>: timestamp (DATETIME)</li> </ul> <p>Sources: index.js L9-L57</p> <p>Diagram 3 from high-level architecture</p>"},{"location":"System-Components.html#view-layer","title":"View Layer","text":"<p>The view layer renders HTML responses using the EJS templating engine.</p>"},{"location":"System-Components.html#ejs-engine-configuration","title":"EJS Engine Configuration","text":"<p>The EJS view engine is configured at index.js L52</p> <p>:</p> <pre><code>app.set(\"view engine\", \"ejs\");\n</code></pre> <p>Views are stored in the <code>views/</code> directory by default.</p>"},{"location":"System-Components.html#template-structure","title":"Template Structure","text":"<p>The view layer uses a master-detail pattern:</p> <ul> <li>Layout template: <code>views/layout.ejs</code> serves as the master template</li> <li>Partials: Reusable components in <code>views/partials/</code> (head, header, footer, popover)</li> <li>Page templates: Individual views like <code>index.ejs</code>, <code>login.ejs</code>, <code>register.ejs</code>, <code>admin.ejs</code>, <code>soporte.ejs</code></li> </ul>"},{"location":"System-Components.html#rendering-in-routes","title":"Rendering in Routes","text":"<p>Templates are rendered in route handlers using <code>res.render()</code>. For example:</p> <ul> <li>Homepage at router.js L64 : <code>res.render(\"index\", { user, login })</code></li> <li>Admin page at router.js L126 : <code>res.render(\"admin\", { productos, user, login, rol })</code></li> <li>Login page at router.js L76 : <code>res.render(\"login\")</code></li> <li>Support chat at router.js L221 : <code>res.render(\"soporte\", { user })</code></li> </ul>"},{"location":"System-Components.html#pdf-template","title":"PDF Template","text":"<p>A special template <code>pdfTabla.ejs</code> is used for PDF generation and is rendered server-side at router.js L324</p> <p>to HTML before conversion to PDF.</p> <p>Sources: index.js L52</p> <p>src/router.js L59-L227</p> <p>Diagram 6 from high-level architecture</p>"},{"location":"System-Components.html#internationalization-system","title":"Internationalization System","text":"<p>The i18n system provides multi-language support for English and Spanish.</p>"},{"location":"System-Components.html#i18n-module-configuration","title":"i18n Module Configuration","text":"<p>The <code>i18n</code> module is configured at index.js L16-L31</p> <p>:</p> <pre><code>const i18n = require('i18n');\ni18n.configure({\n    locales: ['en', 'es'],\n    directory: path.join(__dirname, 'locales'),\n    defaultLocale: 'es',\n    cookie: 'lang',\n    queryParameter: 'lang',\n    autoReload: true,\n    syncFiles: true\n});\n</code></pre> <p>The middleware is applied at index.js L46</p> <p>:</p> <pre><code>app.use(i18n.init);\n</code></pre>"},{"location":"System-Components.html#language-switching","title":"Language Switching","text":"<p>Users can change language via the <code>/set-lang/:lang</code> route defined at router.js L398-L407</p> <p>:</p> <pre><code>router.get('/set-lang/:lang', (req, res) =&gt; {\n    const lang = req.params.lang;\n    const returnTo = req.query.returnTo || '/';\n    if (['es', 'en'].includes(lang)) {\n        res.cookie('lang', lang, { maxAge: 900000, httpOnly: true });\n    }\n    res.redirect(returnTo);\n});\n</code></pre> <p>The selected language is stored in a <code>lang</code> cookie and read by the i18n middleware on subsequent requests.</p>"},{"location":"System-Components.html#locale-files","title":"Locale Files","text":"<p>Translation strings are stored in JSON files:</p> <ul> <li><code>locales/en.json</code>: English translations</li> <li><code>locales/es.json</code>: Spanish translations (default)</li> </ul> <p>Sources: index.js L16-L46</p> <p>src/router.js L398-L407</p>"},{"location":"System-Components.html#document-generation-system","title":"Document Generation System","text":"<p>The system supports PDF generation through two different approaches.</p>"},{"location":"System-Components.html#puppeteer-based-pdf-generation","title":"Puppeteer-based PDF Generation","text":"<p>The Puppeteer approach renders an EJS template to HTML, then uses a headless Chrome browser to generate a PDF. This is implemented at router.js L317-L353</p> <p>:</p> <pre><code>router.get(\"/pdf/descargar\", verifyToken, async (req, res) =&gt; {\n    // 1. Query database for products\n    // 2. Render EJS template to HTML (router.js:324-326)\n    // 3. Launch headless browser (router.js:328-331)\n    // 4. Load HTML into page (router.js:334)\n    // 5. Generate PDF buffer (router.js:336-340)\n    // 6. Send PDF to client (router.js:344-346)\n});\n</code></pre> <p>The Puppeteer library is imported at router.js L6</p>"},{"location":"System-Components.html#pdfkit-based-pdf-generation","title":"PDFKit-based PDF Generation","text":"<p>The PDFKit approach programmatically constructs a PDF document without HTML. This is implemented at router.js L355-L396</p> <p>:</p> <pre><code>router.get(\"/pdfkit/descargar\", verifyToken, (req, res) =&gt; {\n    // 1. Query database for products\n    // 2. Create PDFDocument instance (router.js:361)\n    // 3. Pipe to response stream (router.js:367)\n    // 4. Add title and headers (router.js:370-379)\n    // 5. Iterate and add product rows (router.js:386-392)\n    // 6. Finalize document (router.js:394)\n});\n</code></pre> <p>The PDFKit library is imported at router.js L9</p> <p>Both routes require authentication via <code>verifyToken</code> middleware.</p> <p>Sources: src/router.js L6-L396</p>"},{"location":"System-Components.html#static-asset-server","title":"Static Asset Server","text":"<p>Static files are served from the <code>public/</code> directory by the Express application.</p>"},{"location":"System-Components.html#static-middleware-configuration","title":"Static Middleware Configuration","text":"<p>Static file serving is configured at index.js L43</p> <p>:</p> <pre><code>app.use(\"/resources\", express.static(__dirname + \"/public\"));\n</code></pre> <p>This mounts the <code>public/</code> directory at the <code>/resources</code> URL path, making files accessible at URLs like:</p> <ul> <li><code>/resources/css/style.css</code></li> <li><code>/resources/img/logo.png</code></li> <li><code>/resources/uploads/profile-image.jpg</code></li> </ul>"},{"location":"System-Components.html#file-upload-handling","title":"File Upload Handling","text":"<p>User-uploaded files (profile images) are handled by the Multer middleware configured in <code>src/middlewares/multerConfig.js</code>. It is imported at router.js L19</p> <p>and applied to the registration route at router.js L414</p> <p>:</p> <pre><code>const upload = require(\"./middlewares/multerConfig\");\nrouter.post(\"/register\", upload.single(\"profileImage\"), ...);\n</code></pre> <p>Uploaded files are stored in <code>public/uploads/</code> (or <code>public/resources/uploads/</code>) and their filenames are saved to the <code>usuarios.imagen</code> column at router.js L450-L463</p> <p>Sources: index.js L43</p> <p>src/router.js L19-L484</p>"},{"location":"System-Components.html#middleware-stack","title":"Middleware Stack","text":"<p>The complete middleware execution order is configured in index.js L37-L48</p> <p>:</p> Order Middleware Purpose Line 1 <code>cookieParser</code> Parse cookies from request headers index.js L37 2 <code>express.urlencoded</code> Parse URL-encoded form data index.js L41 3 <code>express.json</code> Parse JSON request bodies index.js L42 4 Static file server Serve files from <code>public/</code> index.js L43 5 Swagger UI API documentation interface index.js L44 6 <code>securityMiddleware</code> Helmet + rate limiting index.js L45 7 <code>i18n.init</code> Language detection and translation index.js L46 8 <code>setGlobals</code> Set global template variables index.js L47 9 Router Route request to handlers index.js L48 <p>Within routes, additional middleware may be applied conditionally:</p> <ul> <li><code>verifyToken</code>: Applied to protected routes</li> <li><code>verifyAdmin</code>: Applied to admin-only routes</li> <li><code>limiter</code>: Applied to authentication routes</li> <li><code>upload</code>: Applied to file upload routes</li> </ul> <p>Sources: index.js L37-L48</p> <p>src/router.js L16-L21</p>"},{"location":"System-Components.html#component-interaction-summary","title":"Component Interaction Summary","text":"<p>The following diagram illustrates how a typical authenticated request flows through the major system components:</p> <pre><code>sequenceDiagram\n  participant Client\n  participant HTTPServer\n  participant SecurityMiddleware\n  participant Router\n  participant VerifyToken\n  participant VerifyAdmin\n  participant Controller\n  participant DB\n  participant EJS\n\n  Client-&gt;&gt;HTTPServer: HTTP Request\n  HTTPServer-&gt;&gt;SecurityMiddleware: helmet, rate-limit\n  SecurityMiddleware-&gt;&gt;Router: route matching\n  Router-&gt;&gt;VerifyToken: JWT validation\n  VerifyToken-&gt;&gt;VerifyToken: jwt.verify(token)\n  VerifyToken-&gt;&gt;VerifyAdmin: role check\n  VerifyAdmin-&gt;&gt;Controller: execute business logic\n  Controller-&gt;&gt;DB: db.query()\n  DB--&gt;&gt;Controller: results\n  Controller-&gt;&gt;EJS: res.render()\n  EJS--&gt;&gt;Client: HTML response</code></pre> <p>For real-time communication, a parallel flow exists:</p> <pre><code>sequenceDiagram\n  participant Client\n  participant SocketIO\n  participant SocketHandler\n  participant DB\n  participant Recipients\n\n  Client-&gt;&gt;SocketIO: WebSocket connection\n  SocketIO-&gt;&gt;SocketHandler: authenticate (JWT from cookie)\n  SocketHandler-&gt;&gt;SocketHandler: join rooms (user:X, admins)\n  Client-&gt;&gt;SocketHandler: emit mensaje_privado\n  SocketHandler-&gt;&gt;DB: INSERT INTO mensajes\n  SocketHandler-&gt;&gt;Recipients: io.to(room).emit(mensaje_recibido)\n  Recipients--&gt;&gt;Client: message delivered</code></pre> <p>Sources: All component sections above</p>"},{"location":"Technology-Stack.html","title":"Technology Stack","text":"<p>Relevant source files * package-lock.json * package.json</p> <p>This document catalogs the technologies, frameworks, and libraries used in the registro-sesiones application. It provides an overview of the core dependencies, their versions, and their roles within the system architecture. For information about how these technologies are configured and initialized during application startup, see Application Bootstrap.</p>"},{"location":"Technology-Stack.html#core-framework-and-runtime","title":"Core Framework and Runtime","text":"<p>The application is built on Node.js and uses Express 5.1.0 as the primary web application framework. Express handles HTTP routing, middleware management, and serves both traditional request-response patterns and static assets.</p> Technology Version Purpose Node.js &gt;=18 JavaScript runtime environment Express 5.1.0 Web application framework and HTTP server express-ejs-layouts 2.5.1 Layout support for EJS templates <p>The server is initialized in index.js</p> <p>where Express is configured with middleware and routing. The application uses CommonJS module system as specified in package.json L17</p> <pre><code>flowchart TD\n\nNodeJS[\"Node.js Runtime&lt;br&gt;&gt;=18\"]\nExpress[\"Express 5.1.0&lt;br&gt;HTTP Server\"]\nIndexJS[\"index.js&lt;br&gt;Application Entry Point\"]\nRouter[\"src/router.js&lt;br&gt;Route Definitions\"]\nControllers[\"src/controllers.js&lt;br&gt;Business Logic\"]\n\nNodeJS --&gt; IndexJS\nIndexJS --&gt; Express\nExpress --&gt; Router\nRouter --&gt; Controllers</code></pre> <p>Sources: package.json L22-L42</p> <p>package-lock.json L1324-L1365</p>"},{"location":"Technology-Stack.html#database-layer","title":"Database Layer","text":"<p>The application uses MySQL as its relational database management system, accessed through the mysql2 driver which provides Promise-based APIs and prepared statement support.</p> Component Version Purpose mysql2 3.14.1 MySQL database driver with Promise support <p>Database connection configuration is managed in database/db.js</p> <p>The driver provides connection pooling capabilities for efficient database resource management.</p> <pre><code>flowchart TD\n\nApp[\"Application&lt;br&gt;Controllers + Socket Handler\"]\nMySQL2[\"mysql2 Driver&lt;br&gt;v3.14.1\"]\nMySQL[\"MySQL Database&lt;br&gt;usuarios, productos, mensajes\"]\n\nApp --&gt; MySQL2\nMySQL2 --&gt; MySQL</code></pre> <p>Sources: package.json L37</p> <p>package-lock.json L956-L964</p>"},{"location":"Technology-Stack.html#authentication-and-security","title":"Authentication and Security","text":"<p>The authentication system combines multiple security technologies to provide JWT-based stateless authentication with session management fallback.</p>"},{"location":"Technology-Stack.html#authentication-libraries","title":"Authentication Libraries","text":"Library Version Purpose jsonwebtoken 9.0.2 JWT creation, signing, and verification bcryptjs 3.0.2 Password hashing with bcrypt algorithm cookie-parser 1.4.7 Parse and sign HTTP cookies express-session 1.18.2 Session middleware for Express cookie-session 2.1.1 Cookie-based session storage <p>JWT tokens are generated using the <code>jsonwebtoken</code> library and stored in HTTP-only cookies. The <code>bcryptjs</code> library provides one-way password hashing with configurable salt rounds. Authentication flows are implemented in src/controllers.js</p> <p>and protected by middleware in src/middlewares/verifyToken.js</p> <p>and src/middlewares/verifyAdmin.js</p>"},{"location":"Technology-Stack.html#security-middleware","title":"Security Middleware","text":"Library Version Purpose helmet 8.1.0 Security headers (CSP, HSTS, X-Frame-Options) express-rate-limit 6.7.0 Rate limiting to prevent brute-force attacks express-validator 7.2.1 Input validation and sanitization <p>Sources: package.json L23-L33</p> <p>package-lock.json L523-L1748</p> <pre><code>flowchart TD\n\nRequest[\"Incoming Request\"]\nHelmet[\"helmet&lt;br&gt;Security Headers\"]\nRateLimit[\"express-rate-limit&lt;br&gt;Brute-force Protection\"]\nCookieParser[\"cookie-parser&lt;br&gt;Parse JWT Cookie\"]\nValidator[\"express-validator&lt;br&gt;Input Validation\"]\nVerifyToken[\"verifyToken&lt;br&gt;src/middlewares/verifyToken.js\"]\nVerifyAdmin[\"verifyAdmin&lt;br&gt;src/middlewares/verifyAdmin.js\"]\nHandler[\"Route Handler\"]\n\nRequest --&gt; Helmet\nHelmet --&gt; RateLimit\nRateLimit --&gt; CookieParser\nCookieParser --&gt; Validator\nValidator --&gt; VerifyToken\nVerifyToken --&gt; VerifyAdmin\nVerifyAdmin --&gt; Handler</code></pre> <p>Sources: package.json L22-L33</p> <p>src/middlewares/verifyToken.js</p> <p>src/middlewares/verifyAdmin.js</p>"},{"location":"Technology-Stack.html#real-time-communication","title":"Real-time Communication","text":"<p>The application uses Socket.IO 4.8.1 for bidirectional real-time communication between clients and server, enabling the support chat system.</p> Library Version Purpose socket.io 4.8.1 WebSocket library for real-time communication <p>Socket.IO is attached to the HTTP server in index.js</p> <p>and configured with authentication middleware. The socket event handlers are implemented in src/sockets/socketHandler.js</p> <p>which manages room-based message routing and persistence.</p> <pre><code>flowchart TD\n\nHTTPServer[\"HTTP Server&lt;br&gt;Created by index.js\"]\nSocketIOServer[\"Socket.IO Server&lt;br&gt;socket.io v4.8.1\"]\nSocketHandler[\"src/sockets/socketHandler.js&lt;br&gt;setupSocket()\"]\nEvents[\"Socket Events&lt;br&gt;mensaje_privado&lt;br&gt;disconnect\"]\nRooms[\"Room Management&lt;br&gt;user:username&lt;br&gt;admins\"]\nDB[\"MySQL&lt;br&gt;mensajes table\"]\n\nHTTPServer --&gt; SocketIOServer\nSocketIOServer --&gt; SocketHandler\nSocketHandler --&gt; Events\nEvents --&gt; Rooms\nEvents --&gt; DB</code></pre> <p>Sources: package.json L40</p> <p>package-lock.json L2312-L2330</p> <p>src/sockets/socketHandler.js</p>"},{"location":"Technology-Stack.html#view-layer-and-templating","title":"View Layer and Templating","text":"<p>The presentation layer uses EJS as the templating engine with layout support for consistent page structure.</p> Library Version Purpose ejs 3.1.10 Embedded JavaScript templating engine express-ejs-layouts 2.5.1 Layout and partial support for EJS <p>EJS templates are located in views/</p> <p>directory with a master layout in views/layout.ejs</p> <p>and reusable partials in views/partials/</p> <p>The view engine is configured in index.js</p> <p>Sources: package.json L27-L29</p> <p>package-lock.json L1049-L1370</p>"},{"location":"Technology-Stack.html#pdf-generation","title":"PDF Generation","text":"<p>The application implements two approaches for PDF generation, providing flexibility based on use case requirements.</p> Library Version Purpose puppeteer 24.14.0 Headless Chrome for HTML-to-PDF conversion pdfkit 0.17.1 Programmatic PDF document creation"},{"location":"Technology-Stack.html#pdf-generation-approaches","title":"PDF Generation Approaches","text":"<pre><code>flowchart TD\n\nData[\"Product Data\"]\nPDFKit[\"PDFKit&lt;br&gt;v0.17.1\"]\nPDF2[\"PDF Output\"]\nEJSTemplate[\"EJS Template&lt;br&gt;views/pdfTabla.ejs\"]\nHeadlessChrome[\"Puppeteer&lt;br&gt;Headless Chrome&lt;br&gt;v24.14.0\"]\nPDF1[\"PDF Output\"]\n\nsubgraph subGraph1 [\"Approach 2: PDFKit\"]\n    Data\n    PDFKit\n    PDF2\n    Data --&gt; PDFKit\n    PDFKit --&gt; PDF2\nend\n\nsubgraph subGraph0 [\"Approach 1: Puppeteer\"]\n    EJSTemplate\n    HeadlessChrome\n    PDF1\n    EJSTemplate --&gt; HeadlessChrome\n    HeadlessChrome --&gt; PDF1\nend</code></pre> <p>Puppeteer renders EJS templates to HTML and converts them to PDF using Chrome's printing capabilities. PDFKit provides a programmatic API for creating PDFs with precise control over layout, fonts, and formatting. Both approaches are used in src/controllers.js</p> <p>for product report generation.</p> <p>Sources: package.json L38-L39</p> <p>package-lock.json L208-L1549</p>"},{"location":"Technology-Stack.html#internationalization","title":"Internationalization","text":"<p>The application supports multiple languages through the i18n library, enabling English and Spanish translations.</p> Library Version Purpose i18n 0.15.1 Internationalization and localization framework <p>Translation files are stored in locales/en.json</p> <p>and locales/es.json</p> <p>The i18n middleware is configured in index.js</p> <p>and language selection is handled via the <code>/set-lang/:lang</code> route defined in src/router.js</p> <p>Current language preference is stored in cookies.</p> <p>Sources: package.json L34</p> <p>package-lock.json L1791-L1810</p>"},{"location":"Technology-Stack.html#file-upload-handling","title":"File Upload Handling","text":"<p>User profile images and other file uploads are processed using multer.</p> Library Version Purpose multer 2.0.2 Multipart/form-data file upload middleware <p>Multer is configured in src/router.js</p> <p>for the registration route to handle profile image uploads. Files are stored in public/uploads/</p> <p>directory with references saved in the database.</p> <p>Sources: package.json L36</p> <p>package-lock.json L2239-L2313</p>"},{"location":"Technology-Stack.html#api-documentation","title":"API Documentation","text":"<p>The application includes interactive API documentation powered by Swagger.</p> Library Version Purpose swagger-jsdoc 6.2.8 JSDoc annotations to OpenAPI specification swagger-ui-express 5.0.1 Swagger UI middleware for Express <p>Swagger documentation is served at the <code>/api-docs</code> endpoint. The configuration extracts API documentation from JSDoc comments in route files.</p> <p>Sources: package.json L41-L42</p> <p>package-lock.json L2389-L2553</p>"},{"location":"Technology-Stack.html#environment-configuration","title":"Environment Configuration","text":"<p>Application configuration is managed through environment variables using dotenv.</p> Library Version Purpose dotenv 16.5.0 Load environment variables from .env file <p>Configuration variables include database credentials, JWT secrets, port numbers, and other environment-specific settings. The dotenv module is loaded in index.js</p> <p>at application startup.</p> <p>Sources: package.json L26</p> <p>package-lock.json L1008-L1019</p>"},{"location":"Technology-Stack.html#complete-dependency-map","title":"Complete Dependency Map","text":"<p>The following diagram shows the relationships between major technology categories and their implementations:</p> <pre><code>flowchart TD\n\nNodeJS[\"Node.js &gt;=18\"]\nExpress[\"Express 5.1.0\"]\nMySQL2[\"mysql2 3.14.1\"]\nMySQLDB[\"MySQL Database\"]\nJWT[\"jsonwebtoken 9.0.2\"]\nBCrypt[\"bcryptjs 3.0.2\"]\nSessions[\"express-session 1.18.2&lt;br&gt;cookie-parser 1.4.7\"]\nHelmet[\"helmet 8.1.0\"]\nRateLimit[\"express-rate-limit 6.7.0\"]\nValidator[\"express-validator 7.2.1\"]\nSocketIO[\"socket.io 4.8.1\"]\nEJS[\"ejs 3.1.10\"]\nLayouts[\"express-ejs-layouts 2.5.1\"]\nI18n[\"i18n 0.15.1\"]\nPuppeteer[\"puppeteer 24.14.0\"]\nPDFKit[\"pdfkit 0.17.1\"]\nMulter[\"multer 2.0.2\"]\nDotenv[\"dotenv 16.5.0\"]\nSwagger[\"swagger-jsdoc 6.2.8&lt;br&gt;swagger-ui-express 5.0.1\"]\n\nExpress --&gt; MySQL2\nExpress --&gt; JWT\nExpress --&gt; Helmet\nExpress --&gt; SocketIO\nExpress --&gt; EJS\nExpress --&gt; Multer\nPuppeteer --&gt; EJS\n\nsubgraph Utilities [\"Utilities\"]\n    Multer\n    Dotenv\n    Swagger\nend\n\nsubgraph PDF [\"PDF\"]\n    Puppeteer\n    PDFKit\nend\n\nsubgraph Presentation [\"Presentation\"]\n    EJS\n    Layouts\n    I18n\n    EJS --&gt; Layouts\n    EJS --&gt; I18n\nend\n\nsubgraph Real-time [\"Real-time\"]\n    SocketIO\nend\n\nsubgraph Security [\"Security\"]\n    Helmet\n    RateLimit\n    Validator\n    Helmet --&gt; RateLimit\n    Helmet --&gt; Validator\nend\n\nsubgraph Authentication [\"Authentication\"]\n    JWT\n    BCrypt\n    Sessions\n    JWT --&gt; BCrypt\n    JWT --&gt; Sessions\nend\n\nsubgraph subGraph1 [\"Data Layer\"]\n    MySQL2\n    MySQLDB\n    MySQL2 --&gt; MySQLDB\nend\n\nsubgraph subGraph0 [\"Server Infrastructure\"]\n    NodeJS\n    Express\n    NodeJS --&gt; Express\nend</code></pre> <p>Sources: package.json L22-L42</p> <p>package-lock.json L1-L49</p>"},{"location":"Technology-Stack.html#development-dependencies","title":"Development Dependencies","text":"<p>Development tools support documentation generation and code quality.</p> Library Version Purpose jsdoc 4.0.4 JavaScript documentation generator docdash 2.0.2 JSDoc theme for documentation <p>JSDoc is configured via jsdoc.json</p> <p>and can be run using <code>npm run docs</code> as defined in package.json L8</p> <p>Sources: package.json L44-L47</p> <p>package-lock.json L1963-L2005</p>"},{"location":"Technology-Stack.html#version-requirements","title":"Version Requirements","text":"<p>The application requires specific Node.js and npm versions to ensure compatibility with its dependencies:</p> <ul> <li>Node.js: &gt;=18.0.0 (required by Express 5.x, Helmet 8.x, and Puppeteer)</li> <li>npm: &gt;=6 (required by jsonwebtoken)</li> </ul> <p>These requirements are enforced by the dependencies' engines specifications in package-lock.json</p> <p>Sources: package-lock.json L225-L2032</p>"},{"location":"Template-Structure.html","title":"Template Structure","text":"<p>Relevant source files * proyecto.zip * public/css/style.css * views/admin.ejs * views/index.ejs * views/register.ejs</p>"},{"location":"Template-Structure.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the EJS template architecture used in the registro-sesiones system, focusing on how templates are organized, structured, and composed. It covers the master template pattern, partial components, and how individual page views are constructed from reusable pieces.</p> <p>For information about individual partial components (head, header, footer), see Partial Components. For documentation of specific page templates and their functionality, see Page Views.</p>"},{"location":"Template-Structure.html#overview","title":"Overview","text":"<p>The template system uses EJS (Embedded JavaScript) as the view engine with a component-based architecture. Templates are composed using two primary patterns:</p> <ol> <li>Partial Includes: Reusable components included in multiple views</li> <li>Layout Composition: Common structural elements shared across pages</li> </ol> <p>The system prioritizes code reuse through partials while maintaining flexibility for page-specific layouts.</p>"},{"location":"Template-Structure.html#template-architecture-pattern","title":"Template Architecture Pattern","text":"<p>The application uses a manual composition pattern where individual page templates explicitly include partial components rather than inheriting from a base layout through middleware. This provides explicit control over which components appear on each page and in what order.</p> <pre><code>flowchart TD\n\nRoute[\"Route Handler&lt;br&gt;src/router.js\"]\nRenderCall[\"res.render('viewName', data)\"]\nEJSEngine[\"EJS Template Engine\"]\nViewFile[\"View File&lt;br&gt;views/*.ejs\"]\nHeadPartial[\"partials/head.ejs&lt;br&gt;Meta, CSS, Scripts\"]\nHeaderPartial[\"partials/header.ejs&lt;br&gt;Navigation Menu\"]\nPageContent[\"Page-Specific Content&lt;br&gt;HTML + EJS\"]\nPopoverPartial[\"partials/popover.ejs&lt;br&gt;Optional Modal\"]\nFooterPartial[\"partials/footer.ejs&lt;br&gt;Footer Content\"]\nHTMLHead[\"HTML Head Section\"]\nHTMLHeader[\"Header HTML\"]\nHTMLMain[\"Main Content HTML\"]\nHTMLModal[\"Modal HTML\"]\nHTMLFooter[\"Footer HTML\"]\nFinalHTML[\"Complete HTML Document\"]\n\nViewFile --&gt; HeadPartial\nViewFile --&gt; HeaderPartial\nViewFile --&gt; PageContent\nViewFile --&gt; PopoverPartial\nViewFile --&gt; FooterPartial\nHeadPartial --&gt; HTMLHead\nHeaderPartial --&gt; HTMLHeader\nPageContent --&gt; HTMLMain\nPopoverPartial --&gt; HTMLModal\nFooterPartial --&gt; HTMLFooter\nHTMLHead --&gt; FinalHTML\nHTMLHeader --&gt; FinalHTML\nHTMLMain --&gt; FinalHTML\nHTMLModal --&gt; FinalHTML\nHTMLFooter --&gt; FinalHTML\n\nsubgraph subGraph1 [\"Template Composition\"]\n    HeadPartial\n    HeaderPartial\n    PageContent\n    PopoverPartial\n    FooterPartial\nend\n\nsubgraph subGraph0 [\"View Rendering Flow\"]\n    Route\n    RenderCall\n    EJSEngine\n    ViewFile\n    Route --&gt; RenderCall\n    RenderCall --&gt; EJSEngine\n    EJSEngine --&gt; ViewFile\nend</code></pre> <p>Sources: views/index.ejs L1-L35</p> <p>views/admin.ejs L1-L71</p> <p>views/register.ejs L1-L85</p>"},{"location":"Template-Structure.html#standard-template-structure","title":"Standard Template Structure","text":"<p>Every page template follows a consistent structure with includes at the beginning and end, wrapping page-specific content:</p>"},{"location":"Template-Structure.html#basic-template-pattern","title":"Basic Template Pattern","text":""},{"location":"Template-Structure.html#template-structure-breakdown","title":"Template Structure Breakdown","text":"Component Purpose Required Position <code>partials/head</code> HTML <code>&lt;head&gt;</code> element with meta tags, CSS links, scripts Yes First <code>partials/header</code> Site navigation, logo, language selector Yes After head Page Content Page-specific HTML and EJS logic Yes Middle <code>partials/popover</code> Optional modal/popover component No Before footer <code>partials/footer</code> Site footer with links and copyright Yes Last"},{"location":"Template-Structure.html#template-include-mechanism","title":"Template Include Mechanism","text":""},{"location":"Template-Structure.html#ejs-include-syntax","title":"EJS Include Syntax","text":"<p>The <code>&lt;%- include() %&gt;</code> directive is used to insert partial templates:</p> <pre><code>\n</code></pre> <p>The <code>&lt;%-</code> syntax (with dash) outputs unescaped content, allowing HTML from the partial to be rendered directly. This differs from <code>&lt;%= %&gt;</code> which would escape HTML entities.</p>"},{"location":"Template-Structure.html#include-resolution","title":"Include Resolution","text":"<p>Partial paths are relative to the configured views directory:</p> <ul> <li>Include path: <code>'partials/head'</code></li> <li>Resolves to: <code>views/partials/head.ejs</code></li> <li>Configured in: index.js  via <code>app.set('views', './views')</code></li> </ul>"},{"location":"Template-Structure.html#page-specific-template-examples","title":"Page-Specific Template Examples","text":""},{"location":"Template-Structure.html#homepage-template-structure","title":"Homepage Template Structure","text":"<p>views/index.ejs L1-L35</p> <p>demonstrates a minimal page structure:</p> <pre><code>flowchart TD\n\nHeadInclude[\"head partial&lt;br&gt;CSS, Meta\"]\nHeaderInclude[\"header partial&lt;br&gt;Navigation\"]\nContent[\"Welcome Content&lt;br&gt;Login Status&lt;br&gt;User Greeting\"]\nPopoverInclude[\"popover partial&lt;br&gt;Modal Dialog\"]\nFooterInclude[\"footer partial&lt;br&gt;Site Footer\"]\n\nHeadInclude --&gt; HeaderInclude\nHeaderInclude --&gt; Content\nContent --&gt; PopoverInclude\nPopoverInclude --&gt; FooterInclude</code></pre> <p>Key Features:</p> <ul> <li>Conditional content based on <code>login</code> variable views/index.ejs L15-L31</li> <li>Internationalization using <code>__()</code> function views/index.ejs L14</li> <li>Dynamic user name display views/index.ejs L18</li> <li>Includes popover component views/index.ejs L34</li> </ul>"},{"location":"Template-Structure.html#admin-dashboard-template-structure","title":"Admin Dashboard Template Structure","text":"<p>views/admin.ejs L1-L71</p> <p>shows a more complex page with tables and role-based rendering:</p> <pre><code>flowchart TD\n\nHead[\"head partial\"]\nHeader[\"header partial\"]\nAuthCheck[\"login variable&lt;br&gt;true?\"]\nContainer[\"Bootstrap Container\"]\nRoleCheck[\"rol == 'admin'?\"]\nAddButton[\"Create Product Button\"]\nSkipButton[\"Skip Button\"]\nProductTable[\"Product Data Table\"]\nRoleActions[\"rol == 'admin'?\"]\nEditDelete[\"Edit/Delete Actions\"]\nReadOnly[\"Read-Only View\"]\nPDFLinks[\"PDF Download Links\"]\nFooter[\"footer partial\"]\nLoginPrompt[\"Login Required Message\"]\n\nHead --&gt; Header\nHeader --&gt; AuthCheck\nAuthCheck --&gt; Container\nAuthCheck --&gt; LoginPrompt\nContainer --&gt; RoleCheck\nRoleCheck --&gt; AddButton\nRoleCheck --&gt; SkipButton\nAddButton --&gt; ProductTable\nSkipButton --&gt; ProductTable\nProductTable --&gt; RoleActions\nRoleActions --&gt; EditDelete\nRoleActions --&gt; ReadOnly\nEditDelete --&gt; PDFLinks\nReadOnly --&gt; PDFLinks\nPDFLinks --&gt; Footer\nLoginPrompt --&gt; Footer</code></pre> <p>Key Features:</p> <ul> <li>Two-level conditional rendering (login status and role) views/admin.ejs L8-L67</li> <li>Profile image display views/admin.ejs L4-L7</li> <li>Dynamic table generation with <code>forEach</code> views/admin.ejs L27-L52</li> <li>Role-based action buttons views/admin.ejs L21-L23 views/admin.ejs L41-L50</li> </ul>"},{"location":"Template-Structure.html#form-template-structure","title":"Form Template Structure","text":"<p>views/register.ejs L1-L85</p> <p>demonstrates form handling with validation:</p> <pre><code>flowchart TD\n\nHead[\"head partial&lt;br&gt;+ body.css\"]\nHeader[\"header partial\"]\nFormContainer[\"Register Form Container\"]\nFormInputs[\"Form Inputs&lt;br&gt;user, name, rol, pass, email,&lt;br&gt;edad, profileImage\"]\nValidationCheck[\"validaciones&lt;br&gt;array exists?\"]\nValidationAlerts[\"Alert Messages&lt;br&gt;Bootstrap Alerts\"]\nNoValidation[\"No Alerts\"]\nSweetAlertCheck[\"alert&lt;br&gt;variable exists?\"]\nSweetAlertScript[\"SweetAlert2 Popup&lt;br&gt;Success/Error\"]\nNoAlert[\"No Popup\"]\nSVGDefs[\"SVG Icon Definitions\"]\nFooter[\"footer partial\"]\n\nHead --&gt; Header\nHeader --&gt; FormContainer\nFormContainer --&gt; FormInputs\nFormInputs --&gt; ValidationCheck\nValidationCheck --&gt; ValidationAlerts\nValidationCheck --&gt; NoValidation\nValidationAlerts --&gt; SweetAlertCheck\nNoValidation --&gt; SweetAlertCheck\nSweetAlertCheck --&gt; SweetAlertScript\nSweetAlertCheck --&gt; NoAlert\nSweetAlertScript --&gt; SVGDefs\nNoAlert --&gt; SVGDefs\nSVGDefs --&gt; Footer</code></pre> <p>Key Features:</p> <ul> <li>Custom CSS override views/register.ejs L2</li> <li>File upload input for profile images views/register.ejs L36</li> <li>Value preservation on validation errors views/register.ejs L10</li> <li>Conditional validation messages views/register.ejs L44-L56</li> <li>SweetAlert2 integration views/register.ejs L62-L74</li> </ul> <p>Sources: views/index.ejs L1-L35</p> <p>views/admin.ejs L1-L71</p> <p>views/register.ejs L1-L85</p>"},{"location":"Template-Structure.html#data-flow-to-templates","title":"Data Flow to Templates","text":""},{"location":"Template-Structure.html#rendering-process","title":"Rendering Process","text":"<p>When a route handler renders a view, it passes a data object that becomes available as variables in the template:</p>"},{"location":"Template-Structure.html#global-variables","title":"Global Variables","text":"<p>The following variables are commonly available across templates:</p> Variable Type Purpose Set By <code>login</code> Boolean User authentication status Auth middleware <code>user</code> String/Object Username or user data Auth middleware <code>rol</code> String User role (\"admin\" or \"user\") Auth middleware <code>__</code> Function i18n translation function i18n middleware <code>validaciones</code> Array Form validation errors Validation middleware <code>alert</code> Boolean Show SweetAlert popup Route handler"},{"location":"Template-Structure.html#variable-scope-in-includes","title":"Variable Scope in Includes","text":"<p>When a partial is included, it has access to all variables in the parent template's scope. This allows partials like <code>header.ejs</code> to access <code>login</code> and <code>user</code> variables without explicit passing.</p> <pre><code>flowchart TD\n\nRouteHandler[\"Route Handler&lt;br&gt;res.render(view, data)\"]\nDataObject[\"Data Object&lt;br&gt;{login, user, rol, ...}\"]\nMainTemplate[\"Main Template&lt;br&gt;views/page.ejs\"]\nPartial1[\"partials/head.ejs\"]\nPartial2[\"partials/header.ejs\"]\nPartial3[\"partials/footer.ejs\"]\n\nRouteHandler --&gt; DataObject\nDataObject --&gt; MainTemplate\nMainTemplate --&gt; Partial1\nMainTemplate --&gt; Partial2\nMainTemplate --&gt; Partial3\nDataObject --&gt; Partial1\nDataObject --&gt; Partial2\nDataObject --&gt; Partial3</code></pre> <p>Sources: views/index.ejs L15-L31</p> <p>views/admin.ejs L8-L67</p> <p>views/register.ejs L10</p>"},{"location":"Template-Structure.html#template-organization","title":"Template Organization","text":""},{"location":"Template-Structure.html#directory-structure","title":"Directory Structure","text":"<pre><code>views/\n\u251c\u2500\u2500 index.ejs           # Homepage\n\u251c\u2500\u2500 login.ejs           # Login form\n\u251c\u2500\u2500 register.ejs        # Registration form\n\u251c\u2500\u2500 admin.ejs           # Admin dashboard\n\u251c\u2500\u2500 create.ejs          # Product creation\n\u251c\u2500\u2500 edit.ejs            # Product editing\n\u251c\u2500\u2500 soporte.ejs         # Support chat\n\u251c\u2500\u2500 layout.ejs          # Layout reference (legacy/unused)\n\u2514\u2500\u2500 partials/\n    \u251c\u2500\u2500 head.ejs        # HTML head section\n    \u251c\u2500\u2500 header.ejs      # Site header/navigation\n    \u251c\u2500\u2500 footer.ejs      # Site footer\n    \u2514\u2500\u2500 popover.ejs     # Modal component\n</code></pre>"},{"location":"Template-Structure.html#file-naming-conventions","title":"File Naming Conventions","text":"Pattern Purpose Example <code>noun.ejs</code> Page representing an entity/concept <code>admin.ejs</code>, <code>soporte.ejs</code> <code>verb.ejs</code> Page for performing an action <code>create.ejs</code>, <code>edit.ejs</code> <code>partials/*.ejs</code> Reusable component <code>partials/header.ejs</code>"},{"location":"Template-Structure.html#css-and-static-asset-inclusion","title":"CSS and Static Asset Inclusion","text":""},{"location":"Template-Structure.html#css-link-pattern","title":"CSS Link Pattern","text":"<p>The <code>head.ejs</code> partial includes CSS files that apply globally:</p> <pre><code>\n</code></pre> <p>Individual pages can override or add CSS:</p> <pre><code>\n</code></pre> <p>views/register.ejs L2</p> <p>demonstrates this pattern.</p>"},{"location":"Template-Structure.html#static-asset-routes","title":"Static Asset Routes","text":"<p>Static files are served from the <code>public/</code> directory and accessed via <code>/resources/</code> URL path:</p> File Path URL Path Usage <code>public/css/style.css</code> <code>/resources/css/style.css</code> Main stylesheet <code>public/css/body.css</code> <code>/resources/css/body.css</code> Body-specific styles <code>public/resources/uploads/</code> <code>/resources/uploads/</code> User profile images <p>Sources: views/register.ejs L2</p> <p>views/admin.ejs L5</p> <p>public/css/style.css L1-L353</p>"},{"location":"Template-Structure.html#conditional-rendering-patterns","title":"Conditional Rendering Patterns","text":""},{"location":"Template-Structure.html#authentication-based-rendering","title":"Authentication-Based Rendering","text":"<p>Most templates check the <code>login</code> variable to determine what content to display:</p> <pre><code>\n</code></pre> <p>views/index.ejs L15-L31</p>"},{"location":"Template-Structure.html#role-based-rendering","title":"Role-Based Rendering","text":"<p>Admin pages check both authentication and role:</p> <p>views/admin.ejs L10-L23</p> <p>views/admin.ejs L41-L50</p>"},{"location":"Template-Structure.html#validation-error-rendering","title":"Validation Error Rendering","text":"<p>Forms conditionally display validation errors:</p> <p>views/register.ejs L44-L56</p>"},{"location":"Template-Structure.html#template-to-route-mapping","title":"Template-to-Route Mapping","text":"<pre><code>flowchart TD\n\nR1[\"GET /&lt;br&gt;index\"]\nR2[\"GET /admin&lt;br&gt;admin\"]\nR3[\"GET /login&lt;br&gt;login\"]\nR4[\"GET /registro&lt;br&gt;register\"]\nR5[\"GET /create&lt;br&gt;create\"]\nR6[\"GET /edit/:ref&lt;br&gt;edit\"]\nR7[\"GET /soporte&lt;br&gt;soporte\"]\nT1[\"index.ejs\"]\nT2[\"admin.ejs\"]\nT3[\"login.ejs\"]\nT4[\"register.ejs\"]\nT5[\"create.ejs\"]\nT6[\"edit.ejs\"]\nT7[\"soporte.ejs\"]\n\nR1 --&gt; T1\nR2 --&gt; T2\nR3 --&gt; T3\nR4 --&gt; T4\nR5 --&gt; T5\nR6 --&gt; T6\nR7 --&gt; T7\n\nsubgraph subGraph1 [\"Templates (views/)\"]\n    T1\n    T2\n    T3\n    T4\n    T5\n    T6\n    T7\nend\n\nsubgraph subGraph0 [\"Routes (src/router.js)\"]\n    R1\n    R2\n    R3\n    R4\n    R5\n    R6\n    R7\nend</code></pre> <p>Each route corresponds to a specific template file with matching functionality.</p> <p>Sources: src/router.js</p> <p>views/index.ejs</p> <p>views/admin.ejs</p> <p>views/login.ejs</p> <p>views/register.ejs</p> <p>views/create.ejs</p> <p>views/edit.ejs</p> <p>views/soporte.ejs</p>"},{"location":"Template-Structure.html#best-practices-observed","title":"Best Practices Observed","text":"<ol> <li>Consistent Include Order: All templates include <code>head</code>, then <code>header</code>, then content, then <code>footer</code></li> <li>Defensive Checks: Use <code>typeof variable !== 'undefined'</code> before accessing optional variables</li> <li>Separation of Concerns: Presentation logic in templates, business logic in controllers</li> <li>Reusable Components: Common UI elements extracted to partials</li> <li>Conditional Asset Loading: Page-specific CSS loaded after common styles</li> <li>Bootstrap Integration: Heavy use of Bootstrap classes in public/css/style.css L1-L353</li> </ol> <p>Sources: views/index.ejs L1-L35</p> <p>views/admin.ejs L1-L71</p> <p>views/register.ejs L1-L85</p> <p>public/css/style.css L1-L353</p>"},{"location":"User-Chat-Interface.html","title":"User Chat Interface","text":"<p>Relevant source files * src/router.js * views/soporte.ejs</p>"},{"location":"User-Chat-Interface.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the user-facing chat interface in the support chat system. This interface is displayed to users with the <code>user</code> role when they access the support page. It provides a simple, single-conversation chat experience where users communicate with administrators.</p> <p>For information about the admin-facing multi-conversation interface, see Admin Chat Interface. For the overall support chat system architecture including WebSocket handling, see Support Chat System.</p> <p>Sources: views/soporte.ejs L1-L191</p>"},{"location":"User-Chat-Interface.html#route-and-access-control","title":"Route and Access Control","text":"<p>The user chat interface is served by the <code>/soporte</code> route, which requires authentication via the <code>verifyToken</code> middleware. The route handler renders the <code>soporte.ejs</code> template with user information extracted from the JWT token.</p> Aspect Details Route Path <code>GET /soporte</code> Middleware <code>verifyToken</code> (authentication required) View Template <code>views/soporte.ejs</code> Data Passed User object with <code>username</code> and <code>role</code> properties <p>The route implementation at src/router.js L220-L227</p> <p>extracts the username and role from the decoded JWT token (<code>req.user</code>) and passes them to the view for rendering.</p> <p>Sources: src/router.js L220-L227</p>"},{"location":"User-Chat-Interface.html#html-structure","title":"HTML Structure","text":"<p>The user chat interface consists of two main elements rendered when <code>user.role !== 'admin'</code>:</p> <pre><code>flowchart TD\n\nContainer[\"Container div.container.mt-4\"]\nHeader[\"Header section&lt;br&gt;Shows username and role\"]\nChatArea[\"Chat display area&lt;br&gt;div#chat&lt;br&gt;400px height, scrollable\"]\nForm[\"Message form&lt;br&gt;form#formulario\"]\nInput[\"Text input&lt;br&gt;input#mensaje\"]\nButton[\"Submit button&lt;br&gt;btn-primary\"]\n\nContainer --&gt; Header\nContainer --&gt; ChatArea\nContainer --&gt; Form\nForm --&gt; Input\nForm --&gt; Button</code></pre>"},{"location":"User-Chat-Interface.html#chat-display-area","title":"Chat Display Area","text":"<p>The chat area is a bordered, scrollable div that displays message history and incoming messages:</p> <ul> <li>Element ID: <code>chat</code></li> <li>Styling: Border, rounded corners, padding, 400px fixed height with <code>overflow-y: auto</code></li> <li>Location: views/soporte.ejs L27</li> </ul>"},{"location":"User-Chat-Interface.html#message-input-form","title":"Message Input Form","text":"<p>The form allows users to compose and send messages:</p> <ul> <li>Element ID: <code>formulario</code></li> <li>Input Field ID: <code>mensaje</code></li> <li>Layout: Bootstrap grid (10 columns for input, 2 for button)</li> <li>Location: views/soporte.ejs L28-L32</li> </ul> <p>Sources: views/soporte.ejs L25-L33</p>"},{"location":"User-Chat-Interface.html#client-side-javascript-components","title":"Client-Side JavaScript Components","text":""},{"location":"User-Chat-Interface.html#socketio-connection-initialization","title":"Socket.IO Connection Initialization","text":"<p>The user interface establishes a WebSocket connection using Socket.IO immediately upon page load:</p> <pre><code>flowchart TD\n\nPageLoad[\"Page loads&lt;br&gt;soporte.ejs\"]\nLoadLib[\"Load /socket.io/socket.io.js\"]\nInitSocket[\"Execute: const socket = io()\"]\nConnected[\"WebSocket connection established&lt;br&gt;JWT from cookie used for auth\"]\n\nPageLoad --&gt; LoadLib\nLoadLib --&gt; InitSocket\nInitSocket --&gt; Connected</code></pre> <p>The Socket.IO client library is loaded from the server-provided endpoint at views/soporte.ejs L37</p> <p>and the connection is established at views/soporte.ejs L39</p> <p>Sources: views/soporte.ejs L37-L42</p>"},{"location":"User-Chat-Interface.html#message-display-function","title":"Message Display Function","text":"<p>The <code>agregarMensaje</code> function renders individual messages in the chat area:</p> <p>Function Signature: <code>agregarMensaje(de, mensaje, fecha = null)</code></p> Parameter Type Description <code>de</code> string Username of message sender <code>mensaje</code> string Message content <code>fecha</code> string/Date Optional timestamp (ISO format) <p>Behavior:</p> <ol> <li>Creates a <code>&lt;p&gt;</code> element</li> <li>Formats sender name in bold</li> <li>Appends formatted timestamp if provided (via <code>formatearFecha</code>)</li> <li>Appends message to <code>chat</code> div</li> <li>Auto-scrolls chat to bottom</li> </ol> <p>The timestamp formatting function <code>formatearFecha</code> converts ISO date strings to <code>DD/MM/YYYY HH:MM</code> format for readability.</p> <p>Sources: views/soporte.ejs L44-L60</p>"},{"location":"User-Chat-Interface.html#loading-message-history","title":"Loading Message History","text":"<p>Upon page load, the user interface fetches historical messages from the <code>/api/mensajes/mios</code> endpoint:</p> <pre><code>sequenceDiagram\n  participant Browser\n  participant (soporte.ejs user view)\n  participant GET /api/mensajes/mios\n  participant verifyToken\n  participant mensajes table\n  participant div\n\n  Browser-&gt;&gt;GET /api/mensajes/mios: GET /api/mensajes/mios\n  GET /api/mensajes/mios-&gt;&gt;GET /api/mensajes/mios: JWT in cookie\n  GET /api/mensajes/mios-&gt;&gt;mensajes table: Extract username from JWT\n  mensajes table--&gt;&gt;GET /api/mensajes/mios: SELECT * WHERE\n  GET /api/mensajes/mios--&gt;&gt;Browser: de_usuario=? OR para_usuario=?\n  Browser-&gt;&gt;Browser: Message rows\n  Browser-&gt;&gt;Browser: JSON array of messages\n  Browser-&gt;&gt;div: Clear chat.innerHTML</code></pre> <p>API Endpoint Details:</p> <ul> <li>Route: <code>GET /api/mensajes/mios</code> src/router.js L256-L280</li> <li>Authentication: Requires <code>verifyToken</code> middleware</li> <li>Response: JSON array of message objects with <code>de_usuario</code>, <code>para_usuario</code>, <code>mensaje</code>, <code>fecha</code></li> <li>Query Logic: Returns all messages where user is either sender or recipient, ordered by date ascending</li> </ul> <p>Client Implementation at views/soporte.ejs L166-L171</p> <p>:</p> <ol> <li>Fetch from endpoint</li> <li>Parse JSON response</li> <li>Clear existing chat content</li> <li>Iterate through messages and call <code>agregarMensaje</code> for each</li> </ol> <p>Sources: views/soporte.ejs L166-L171</p> <p>src/router.js L256-L280</p>"},{"location":"User-Chat-Interface.html#receiving-real-time-messages","title":"Receiving Real-time Messages","text":"<p>The user interface listens for the <code>mensaje_recibido</code> WebSocket event to receive messages in real-time:</p> <pre><code>flowchart TD\n\nServerEmit[\"Socket.IO Server&lt;br&gt;Emits 'mensaje_recibido'\"]\nEventHandler[\"socket.on('mensaje_recibido', handler)\"]\nExtractData[\"Extract: de, mensaje&lt;br&gt;from event payload\"]\nCreateTimestamp[\"Create new Date() timestamp\"]\nCallDisplay[\"Call agregarMensaje(de, mensaje, fecha)\"]\nUpdateUI[\"Message appears in chat\"]\n\nServerEmit --&gt; EventHandler\nEventHandler --&gt; ExtractData\nExtractData --&gt; CreateTimestamp\nCreateTimestamp --&gt; CallDisplay\nCallDisplay --&gt; UpdateUI</code></pre> <p>Event Handler at views/soporte.ejs L174-L177</p> <p>:</p> <ul> <li>Event Name: <code>mensaje_recibido</code></li> <li>Payload Structure: <code>{ de, mensaje }</code></li> <li>Action: Calls <code>agregarMensaje</code> with sender username, message content, and current timestamp</li> </ul> <p>Sources: views/soporte.ejs L174-L177</p>"},{"location":"User-Chat-Interface.html#sending-messages","title":"Sending Messages","text":"<p>Users send messages by submitting the form, which emits a <code>mensaje_privado</code> event to the server:</p> <pre><code>sequenceDiagram\n  participant User\n  participant form\n  participant input\n  participant Socket.IO Client\n  participant Socket.IO Server\n  participant mensajes table\n  participant div\n\n  User-&gt;&gt;form: Submit form\n  form-&gt;&gt;form: e.preventDefault()\n  form-&gt;&gt;input: Get value.trim()\n  form-&gt;&gt;form: Validate not empty\n  form-&gt;&gt;Socket.IO Client: emit('mensaje_privado',\n  Socket.IO Client-&gt;&gt;Socket.IO Server: {para: 'admin', mensaje})\n  Socket.IO Server-&gt;&gt;mensajes table: WebSocket message\n  Socket.IO Server-&gt;&gt;Socket.IO Server: INSERT message\n  form-&gt;&gt;div: Route to admin rooms\n  form-&gt;&gt;input: agregarMensaje('T\u00fa', mensaje, new Date())</code></pre> <p>Form Submit Handler at views/soporte.ejs L180-L187</p> <p>:</p> Step Action Code Location 1 Prevent default form submission <code>e.preventDefault()</code> 2 Extract and trim message <code>inputMensaje.value.trim()</code> 3 Validate non-empty Early return if empty 4 Emit Socket.IO event <code>socket.emit(\"mensaje_privado\", {para: \"admin\", mensaje})</code> 5 Display locally as \"T\u00fa\" <code>agregarMensaje(\"T\u00fa\", mensaje, new Date())</code> 6 Clear input field <code>inputMensaje.value = ''</code> <p>Key Implementation Detail: The recipient is hardcoded to <code>\"admin\"</code> at views/soporte.ejs L184</p> <p>This ensures all user messages are routed to the admin room, regardless of which specific admin responds. The server-side socket handler (documented in Socket Handler) manages the actual message routing and persistence.</p> <p>Sources: views/soporte.ejs L180-L187</p>"},{"location":"User-Chat-Interface.html#complete-user-interaction-flow","title":"Complete User Interaction Flow","text":"<pre><code>flowchart TD\n\nStart[\"User accesses /soporte\"]\nAuth[\"verifyToken middleware&lt;br&gt;validates JWT\"]\nRender[\"Render soporte.ejs&lt;br&gt;user.role !== 'admin'\"]\nLoadScript[\"Load Socket.IO client library\"]\nConnectWS[\"Establish WebSocket connection&lt;br&gt;const socket = io()\"]\nFetchHistory[\"fetch('/api/mensajes/mios')\"]\nDisplayHistory[\"Display historical messages&lt;br&gt;agregarMensaje() for each\"]\nListenEvents[\"Listen for 'mensaje_recibido'\"]\nReady[\"User can send/receive messages\"]\nUserTypes[\"User types message\"]\nSubmit[\"Submit form\"]\nEmitEvent[\"socket.emit('mensaje_privado',&lt;br&gt;{para: 'admin', mensaje})\"]\nLocalDisplay[\"Display in local chat as 'T\u00fa'\"]\nIncomingMsg[\"Admin sends message\"]\nReceiveEvent[\"socket.on('mensaje_recibido')\"]\nDisplayIncoming[\"agregarMensaje(de, mensaje, fecha)\"]\n\nStart --&gt; Auth\nAuth --&gt; Render\nRender --&gt; LoadScript\nLoadScript --&gt; ConnectWS\nConnectWS --&gt; FetchHistory\nFetchHistory --&gt; DisplayHistory\nDisplayHistory --&gt; ListenEvents\nListenEvents --&gt; Ready\nReady --&gt; UserTypes\nUserTypes --&gt; Submit\nSubmit --&gt; EmitEvent\nEmitEvent --&gt; LocalDisplay\nReady --&gt; IncomingMsg\nIncomingMsg --&gt; ReceiveEvent\nReceiveEvent --&gt; DisplayIncoming</code></pre> <p>Sources: views/soporte.ejs L164-L188</p> <p>src/router.js L220-L227</p> <p>src/router.js L256-L280</p>"},{"location":"User-Chat-Interface.html#code-entity-mapping","title":"Code Entity Mapping","text":""},{"location":"User-Chat-Interface.html#key-variables-and-elements","title":"Key Variables and Elements","text":"JavaScript Variable HTML Element ID Purpose <code>socket</code> N/A Socket.IO client instance <code>chat</code> <code>#chat</code> Message display container <code>inputMensaje</code> <code>#mensaje</code> Message text input field <code>formulario</code> <code>#formulario</code> Message submission form <p>Sources: views/soporte.ejs L39-L42</p>"},{"location":"User-Chat-Interface.html#event-handlers","title":"Event Handlers","text":"Event Type Element Handler Function Location <code>submit</code> <code>#formulario</code> Anonymous function views/soporte.ejs L180-L187 <code>mensaje_recibido</code> <code>socket</code> (WebSocket) Anonymous function views/soporte.ejs L174-L177 <p>Sources: views/soporte.ejs L174-L177</p> <p>views/soporte.ejs L180-L187</p>"},{"location":"User-Chat-Interface.html#helper-functions","title":"Helper Functions","text":"Function Name Parameters Return Type Purpose <code>formatearFecha</code> <code>isoString</code> <code>string</code> Converts ISO timestamp to DD/MM/YYYY HH:MM <code>agregarMensaje</code> <code>de, mensaje, fecha=null</code> <code>void</code> Appends formatted message to chat <p>Sources: views/soporte.ejs L44-L60</p>"},{"location":"User-Chat-Interface.html#differences-from-admin-interface","title":"Differences from Admin Interface","text":"<p>The user interface is significantly simpler than the admin interface:</p> Feature User Interface Admin Interface User List Not present Shows all users with conversations Conversation Switching Not applicable (single conversation) Can switch between user conversations Recipient Selection Hardcoded to \"admin\" Selected from active conversation Notifications Not implemented Visual indicators for new messages Message History Endpoint <code>/api/mensajes/mios</code> <code>/api/mensajes?con=username</code> Conversation State Stateless Maintains <code>conversaciones</code> object <p>Sources: views/soporte.ejs L25-L33</p> <p>views/soporte.ejs L8-L24</p>"},{"location":"User-Registration-%26-Login.html","title":"User Registration &amp; Login","text":"<p>Relevant source files * package-lock.json * public/css/style.css * src/router.js * views/admin.ejs * views/index.ejs * views/register.ejs</p> <p>This page documents the user registration and login flows, including form validation, password hashing with bcrypt, profile image upload, JWT token generation, and session cookie management. These authentication mechanisms serve as the entry points to the system's protected resources.</p> <p>For information about JWT token structure and management, see JWT Token Management. For details on how authentication is enforced on protected routes, see verifyToken Middleware and verifyAdmin Middleware. For broader security measures including rate limiting, see Security Measures.</p>"},{"location":"User-Registration-%26-Login.html#overview","title":"Overview","text":"<p>The system implements two primary authentication endpoints:</p> Endpoint Method Purpose Middleware <code>/registro</code> GET Renders registration form None <code>/register</code> POST Processes registration <code>upload.single(\"profileImage\")</code>, validation middleware <code>/login</code> GET Renders login form None <code>/auth</code> POST Processes login <code>limiter</code> (rate limiting) <p>Both flows interact with the <code>usuarios</code> table in MySQL and use bcryptjs for password security. Successful login generates a JWT token stored in an HTTP-only cookie.</p> <p>Sources: src/router.js L75-L80</p> <p>src/router.js L414-L484</p> <p>src/router.js L532-L601</p>"},{"location":"User-Registration-%26-Login.html#registration-flow","title":"Registration Flow","text":""},{"location":"User-Registration-%26-Login.html#registration-form-structure","title":"Registration Form Structure","text":"<p>The registration form is rendered by the <code>views/register.ejs</code> template and accepts the following inputs:</p> Field Input Type Validation Required <code>user</code> text min 4 characters Yes <code>name</code> text min 4 characters Yes <code>rol</code> select admin/user Yes <code>pass</code> password min 4 characters Yes <code>email</code> text valid email format Yes <code>edad</code> text numeric Yes <code>profileImage</code> file image format No <p>The form submits to <code>POST /register</code> with <code>enctype=\"multipart/form-data\"</code> to support file uploads.</p> <p>Sources: views/register.ejs L7-L41</p>"},{"location":"User-Registration-%26-Login.html#registration-request-processing-diagram","title":"Registration Request Processing Diagram","text":"<pre><code>sequenceDiagram\n  participant Client Browser\n  participant POST /register\n  participant (src/router.js)\n  participant upload.single()\n  participant (multerConfig)\n  participant express-validator\n  participant body() chains\n  participant bcrypt.hash()\n  participant MySQL usuarios\n  participant views/register.ejs\n\n  Client Browser-&gt;&gt;POST /register: \"POST /register\"\n  POST /register-&gt;&gt;upload.single(): \"Process file upload\"\n  upload.single()-&gt;&gt;upload.single(): \"Save to public/uploads/\"\n  upload.single()--&gt;&gt;POST /register: \"req.file populated\"\n  POST /register-&gt;&gt;express-validator: \"Validate fields\"\n  express-validator-&gt;&gt;express-validator: \"Check min lengths, email, numeric\"\n  loop [\"Validation Errors\"]\n    express-validator--&gt;&gt;POST /register: \"errors array\"\n    POST /register-&gt;&gt;views/register.ejs: \"Render with validaciones\"\n    views/register.ejs--&gt;&gt;Client Browser: \"HTML with error alerts\"\n    express-validator--&gt;&gt;POST /register: \"No errors\"\n    POST /register-&gt;&gt;bcrypt.hash(): \"hash(pass, 8)\"\n    bcrypt.hash()--&gt;&gt;POST /register: \"passwordHash\"\n    POST /register-&gt;&gt;MySQL usuarios: \"INSERT INTO usuarios\"\n    MySQL usuarios--&gt;&gt;POST /register: \"results\"\n    POST /register-&gt;&gt;views/register.ejs: \"Render with alert=true\"\n    views/register.ejs--&gt;&gt;Client Browser: \"SweetAlert success + redirect\"\n  end</code></pre> <p>Sources: src/router.js L414-L484</p>"},{"location":"User-Registration-%26-Login.html#input-validation-rules","title":"Input Validation Rules","text":"<p>The registration endpoint uses <code>express-validator</code> with the following validation chains defined at src/router.js L415-L428</p> <p>:</p> <pre><code>body(\"user\").exists().isLength({ min: 4 })\nbody(\"name\").isLength({ min: 4 })\nbody(\"pass\").isLength({ min: 4 })\nbody(\"email\").isEmail()\nbody(\"edad\").isNumeric()\n</code></pre> <p>When validation fails, the form is re-rendered with:</p> <ul> <li><code>validaciones</code> array containing error messages</li> <li><code>valores</code> object preserving user input</li> <li>Bootstrap alert components displaying errors</li> </ul> <p>Sources: src/router.js L415-L428</p> <p>src/router.js L430-L441</p> <p>views/register.ejs L44-L56</p>"},{"location":"User-Registration-%26-Login.html#password-hashing","title":"Password Hashing","text":"<p>Passwords are hashed using <code>bcryptjs</code> with a salt rounds value of 8:</p> <pre><code>const passwordHash = await bcrypt.hash(pass, 8);\n</code></pre> <p>The hashed password is stored in the <code>usuarios.pass</code> column. Original plaintext passwords are never stored.</p> <p>Sources: src/router.js L453</p> <p>package-lock.json L523-L531</p>"},{"location":"User-Registration-%26-Login.html#profile-image-upload","title":"Profile Image Upload","text":"<p>Profile images are handled by <code>multer</code> middleware configured in <code>src/middlewares/multerConfig.js</code>:</p> <ul> <li>Files are saved to <code>public/uploads/</code> directory</li> <li>Filename is available in <code>req.file.filename</code></li> <li>If no file is uploaded, <code>profileImage</code> is set to <code>null</code></li> <li>The filename (not the binary data) is stored in <code>usuarios.imagen</code> column</li> </ul> <p>Sources: src/router.js L19</p> <p>src/router.js L414</p> <p>src/router.js L450</p>"},{"location":"User-Registration-%26-Login.html#database-insertion","title":"Database Insertion","text":"<p>The registration data is inserted into the <code>usuarios</code> table:</p> <pre><code>db.query(\"INSERT INTO usuarios SET ?\", {\n    usuario: user,\n    nombre: name,\n    rol: rol,\n    pass: passwordHash,\n    imagen: profileImage\n}, callback)\n</code></pre> <p>Upon successful insertion, a SweetAlert popup displays \"El usuario se ha registrado correctamente\" with a 2.5 second timer before redirecting to the homepage.</p> <p>Sources: src/router.js L456-L481</p>"},{"location":"User-Registration-%26-Login.html#login-flow","title":"Login Flow","text":""},{"location":"User-Registration-%26-Login.html#login-form-structure","title":"Login Form Structure","text":"<p>The login form at <code>views/login.ejs</code> is minimal, requesting only:</p> Field Input Type Required <code>user</code> text Yes <code>pass</code> password Yes <p>The form submits to <code>POST /auth</code>.</p> <p>Sources: src/router.js L75-L77</p>"},{"location":"User-Registration-%26-Login.html#login-authentication-sequence","title":"Login Authentication Sequence","text":"<p>Sources: src/router.js L532-L601</p>"},{"location":"User-Registration-%26-Login.html#credential-verification-process","title":"Credential Verification Process","text":"<p>The authentication process at src/router.js L532-L601</p> <p>performs the following steps:</p> <ol> <li>Input validation: Checks that both <code>user</code> and <code>pass</code> are provided</li> <li>Database query: Retrieves user record by <code>usuario</code> field</li> <li>Existence check: Verifies <code>results.length &gt; 0</code></li> <li>Password comparison: Uses <code>bcrypt.compare()</code> to verify hashed password</li> <li>Token generation: Creates JWT with user payload on success</li> <li>Cookie setting: Stores token in HTTP-only cookie</li> </ol> <p>Sources: src/router.js L536-L556</p>"},{"location":"User-Registration-%26-Login.html#jwt-payload-construction","title":"JWT Payload Construction","text":"<p>Upon successful authentication, a JWT payload is constructed with the following user data:</p> <pre><code>const payload = {\n    user: results[0].usuario,\n    name: results[0].nombre,\n    rol: results[0].rol,\n    imagen: results[0].imagen\n};\n</code></pre> <p>This payload is signed using the <code>JWT_SECRET</code> environment variable and set to expire in 1 hour:</p> <pre><code>const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: \"1h\" });\n</code></pre> <p>Sources: src/router.js L559-L567</p>"},{"location":"User-Registration-%26-Login.html#session-cookie-configuration","title":"Session Cookie Configuration","text":"<p>The generated JWT is stored in a cookie named <code>token</code> with the following options:</p> Option Value Purpose <code>httpOnly</code> <code>true</code> Prevents JavaScript access (XSS protection) <code>secure</code> <code>false</code> Set to <code>true</code> in production with HTTPS <code>maxAge</code> <code>3600000</code> 1 hour in milliseconds <pre><code>res.cookie(\"token\", token, {\n    httpOnly: true,\n    secure: false,\n    maxAge: 3600000\n});\n</code></pre> <p>The cookie is automatically sent with subsequent requests and validated by the <code>verifyToken</code> middleware.</p> <p>Sources: src/router.js L570-L574</p>"},{"location":"User-Registration-%26-Login.html#rate-limiting-protection","title":"Rate Limiting Protection","text":"<p>The <code>/auth</code> endpoint is protected by the <code>limiter</code> middleware (imported from <code>src/middlewares/authLimiter.js</code>) to prevent brute-force attacks. This middleware restricts the number of login attempts from a single IP address within a time window.</p> <p>Sources: src/router.js L21</p> <p>src/router.js L532</p>"},{"location":"User-Registration-%26-Login.html#database-schema-reference","title":"Database Schema Reference","text":""},{"location":"User-Registration-%26-Login.html#usuarios-table-structure","title":"usuarios Table Structure","text":"<p>The registration and login flows interact with the <code>usuarios</code> table, which has the following relevant columns:</p> Column Type Constraints Purpose <code>usuario</code> varchar PRIMARY KEY Username for login <code>nombre</code> varchar NOT NULL Display name <code>rol</code> varchar NOT NULL \"admin\" or \"user\" <code>pass</code> varchar NOT NULL bcrypt hashed password <code>imagen</code> varchar NULL Profile image filename <p>Sources: src/router.js L456-L465</p> <p>src/router.js L537-L539</p>"},{"location":"User-Registration-%26-Login.html#error-handling-and-user-feedback","title":"Error Handling and User Feedback","text":""},{"location":"User-Registration-%26-Login.html#registration-error-display","title":"Registration Error Display","text":"<p>Validation errors are displayed using Bootstrap alerts rendered by views/register.ejs L44-L56</p> <p>Each error from the <code>validaciones</code> array is shown as a dismissible danger alert with:</p> <ul> <li>SVG icon (<code>#exclamation-triangle-fill</code>)</li> <li>Strong-tagged error message</li> <li>Close button</li> </ul> <p>Form field values are preserved through the <code>valores</code> object, preventing users from re-entering all data.</p> <p>Sources: views/register.ejs L44-L56</p> <p>src/router.js L436-L441</p>"},{"location":"User-Registration-%26-Login.html#login-error-display","title":"Login Error Display","text":"<p>Login errors use SweetAlert2 popups with the following characteristics:</p> Scenario alertTitle alertMessage alertIcon Actions Missing credentials \"Error\" \"Introduzca su usuario y contrase\u00f1a\" error showConfirmButton: true Invalid credentials \"Error\" \"El usuario o la contrase\u00f1a son incorrectos\" error showConfirmButton: true Success \"Login\" \"Has iniciado sesi\u00f3n correctamente\" success Auto-redirect after 2.5s <p>Sources: src/router.js L545-L556</p> <p>src/router.js L577-L586</p> <p>src/router.js L590-L599</p>"},{"location":"User-Registration-%26-Login.html#success-flow","title":"Success Flow","text":"<p>Both successful registration and login render the same template structure with conditional SweetAlert2 execution:</p> <pre><code>if (typeof alert !== 'undefined') {\n    Swal.fire({...}).then(() =&gt; {\n        window.location = '/&lt;%= ruta %&gt;'\n    })\n}\n</code></pre> <ul> <li>Registration redirects to <code>''</code> (homepage)</li> <li>Login redirects to <code>''</code> (homepage)</li> </ul> <p>The authenticated user can then access protected routes via the JWT cookie.</p> <p>Sources: views/register.ejs L62-L74</p>"},{"location":"User-Registration-%26-Login.html#registration-vs-login-flow-comparison","title":"Registration vs Login Flow Comparison","text":"<pre><code>flowchart TD\n\nLoginForm[\"Form Submission&lt;br&gt;{user, pass}\"]\nLoginLimiter[\"Rate Limiter&lt;br&gt;authLimiter\"]\nLoginQuery[\"SELECT * FROM usuarios&lt;br&gt;WHERE usuario = ?\"]\nLoginCheck[\"User exists&lt;br&gt;&amp; password&lt;br&gt;matches?\"]\nLoginError[\"SweetAlert error&lt;br&gt;'Credenciales incorrectas'\"]\nLoginJWT[\"jwt.sign(payload,&lt;br&gt;JWT_SECRET, {expiresIn: '1h'})\"]\nLoginCookie[\"Set-Cookie: token=...&lt;br&gt;{httpOnly, maxAge: 3600000}\"]\nLoginSuccess[\"SweetAlert success&lt;br&gt;Redirect to /\"]\nRegForm[\"Form Submission&lt;br&gt;{user, name, rol, pass,&lt;br&gt;email, edad, profileImage}\"]\nRegMulter[\"Multer Middleware&lt;br&gt;upload.single('profileImage')\"]\nRegValidation[\"express-validator&lt;br&gt;body() chains\"]\nRegCheck[\"Validation&lt;br&gt;Errors?\"]\nRegRerender[\"Re-render form&lt;br&gt;with validaciones\"]\nRegBcrypt[\"bcrypt.hash(pass, 8)\"]\nRegInsert[\"INSERT INTO usuarios\"]\nRegSuccess[\"SweetAlert success&lt;br&gt;Redirect to /\"]\n\nsubgraph Login [\"Login Flow (POST /auth)\"]\n    LoginForm\n    LoginLimiter\n    LoginQuery\n    LoginCheck\n    LoginError\n    LoginJWT\n    LoginCookie\n    LoginSuccess\n    LoginForm --&gt; LoginLimiter\n    LoginLimiter --&gt; LoginQuery\n    LoginQuery --&gt; LoginCheck\n    LoginCheck --&gt; LoginError\n    LoginCheck --&gt; LoginJWT\n    LoginJWT --&gt; LoginCookie\n    LoginCookie --&gt; LoginSuccess\nend\n\nsubgraph Registration [\"Registration Flow (POST /register)\"]\n    RegForm\n    RegMulter\n    RegValidation\n    RegCheck\n    RegRerender\n    RegBcrypt\n    RegInsert\n    RegSuccess\n    RegForm --&gt; RegMulter\n    RegMulter --&gt; RegValidation\n    RegValidation --&gt; RegCheck\n    RegCheck --&gt; RegRerender\n    RegCheck --&gt; RegBcrypt\n    RegBcrypt --&gt; RegInsert\n    RegInsert --&gt; RegSuccess\nend</code></pre> <p>Sources: src/router.js L414-L484</p> <p>src/router.js L532-L601</p>"},{"location":"User-Registration-%26-Login.html#key-dependencies","title":"Key Dependencies","text":"<p>The registration and login flows depend on the following npm packages:</p> Package Version Purpose Usage <code>bcryptjs</code> ^3.0.2 Password hashing <code>bcrypt.hash()</code>, <code>bcrypt.compare()</code> <code>jsonwebtoken</code> ^9.0.2 JWT generation <code>jwt.sign()</code> <code>express-validator</code> ^7.2.1 Form validation <code>body()</code>, <code>validationResult()</code> <code>multer</code> ^2.0.2 File upload handling <code>upload.single()</code> <code>cookie-parser</code> ^1.4.7 Cookie parsing Parses <code>req.cookies.token</code> <p>Sources: package-lock.json L12-L25</p> <p>src/router.js L1-L19</p>"},{"location":"User-Registration-%26-Login.html#related-endpoints","title":"Related Endpoints","text":"<p>After successful authentication, users access the system through these routes:</p> Route Auth Required Description <code>/</code> Optional Homepage, displays user info if JWT present <code>/admin</code> verifyToken Product management interface <code>/soporte</code> verifyToken Support chat interface <code>/logout</code> None Clears token cookie <p>The <code>/</code> route demonstrates optional authentication by checking for <code>req.cookies.token</code> and decoding it to display user information.</p> <p>Sources: src/router.js L59-L74</p> <p>src/router.js L119-L134</p> <p>src/router.js L220-L227</p> <p>src/router.js L215-L218</p>"},{"location":"WebSocket-Authentication.html","title":"WebSocket Authentication","text":"<p>Relevant source files * src/middlewares/verifyToken.js * src/sockets/socketHandler.js</p>"},{"location":"WebSocket-Authentication.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document explains how JWT-based authentication is applied to WebSocket connections in the real-time communication system. The authentication mechanism validates clients before establishing Socket.IO connections, ensuring only authenticated users can access the chat functionality.</p> <p>For information about HTTP authentication middleware, see verifyToken Middleware. For details on Socket.IO server initialization, see Socket.IO Server Setup. For room assignment after successful authentication, see Room Management.</p>"},{"location":"WebSocket-Authentication.html#authentication-flow-overview","title":"Authentication Flow Overview","text":"<p>WebSocket authentication occurs at connection time using a Socket.IO middleware function. Unlike HTTP requests where authentication happens per-request, WebSocket authentication validates the connection once during the initial handshake.</p>"},{"location":"WebSocket-Authentication.html#authentication-sequence","title":"Authentication Sequence","text":"<pre><code>sequenceDiagram\n  participant Client Browser\n  participant Socket.IO Server\n  participant Auth Middleware\n  participant (io.use)\n  participant jwt.verify()\n  participant Connection Handler\n\n  Client Browser-&gt;&gt;Socket.IO Server: \"WebSocket Connection\n  Socket.IO Server-&gt;&gt;Auth Middleware: + HTTP Headers\n  Auth Middleware-&gt;&gt;Auth Middleware: + Cookies\"\n  Auth Middleware-&gt;&gt;Auth Middleware: \"socket, next\"\n  loop [Token invalid]\n    Auth Middleware--&gt;&gt;Socket.IO Server: \"Extract socket.request\"\n    Socket.IO Server--&gt;&gt;Client Browser: \"Parse cookies from\n    Auth Middleware-&gt;&gt;Auth Middleware: req.headers.cookie\"\n    Auth Middleware--&gt;&gt;Socket.IO Server: \"next(Error('No autenticado'))\"\n    Socket.IO Server--&gt;&gt;Client Browser: \"Connection Rejected\"\n    Auth Middleware-&gt;&gt;jwt.verify(): \"Extract token from cookie\n    jwt.verify()--&gt;&gt;Auth Middleware: using regex match\"\n    Auth Middleware--&gt;&gt;Socket.IO Server: \"next(Error('Token no proporcionado'))\"\n    Socket.IO Server--&gt;&gt;Client Browser: \"Connection Rejected\"\n    jwt.verify()--&gt;&gt;Auth Middleware: \"jwt.verify(token, JWT_SECRET)\"\n    Auth Middleware-&gt;&gt;Auth Middleware: \"throw error\"\n    Auth Middleware-&gt;&gt;Socket.IO Server: \"next(Error('Token inv\u00e1lido'))\"\n    Socket.IO Server-&gt;&gt;Connection Handler: \"Connection Rejected\"\n    Connection Handler-&gt;&gt;Client Browser: \"decoded payload\"\n  end</code></pre> <p>Sources: src/sockets/socketHandler.js L6-L32</p>"},{"location":"WebSocket-Authentication.html#socketio-middleware-registration","title":"Socket.IO Middleware Registration","text":"<p>The authentication middleware is registered using <code>io.use()</code> before any connection handlers. This ensures all incoming WebSocket connections are validated before the <code>connection</code> event fires.</p> <pre><code>// Registration in setupSocket function\nio.use((socket, next) =&gt; {\n    // Authentication logic\n});\n</code></pre> <p>The middleware receives two parameters:</p> <ul> <li><code>socket</code>: The Socket.IO socket instance for the incoming connection</li> <li><code>next</code>: Callback function to either accept the connection <code>next()</code> or reject it <code>next(new Error(...))</code></li> </ul> <p>Sources: src/sockets/socketHandler.js L6</p>"},{"location":"WebSocket-Authentication.html#cookie-extraction-process","title":"Cookie Extraction Process","text":""},{"location":"WebSocket-Authentication.html#accessing-the-http-request","title":"Accessing the HTTP Request","text":"<p>Socket.IO connections begin as HTTP requests that are upgraded to WebSocket connections. The initial HTTP request, including headers and cookies, is accessible via <code>socket.request</code>:</p> <pre><code>const req = socket.request;\nconst cookies = req.headers.cookie;\n</code></pre> <p>Sources: src/sockets/socketHandler.js L7-L8</p>"},{"location":"WebSocket-Authentication.html#parsing-the-token-cookie","title":"Parsing the Token Cookie","text":"<p>The <code>token</code> cookie is extracted using a regular expression pattern that matches <code>token=&lt;value&gt;</code> in the cookie header string:</p> <pre><code>const tokenMatch = cookies.match(/token=([^;]+)/);\nconst token = tokenMatch &amp;&amp; tokenMatch[1];\n</code></pre> <p>The regex pattern <code>/token=([^;]+)/</code> captures all characters after <code>token=</code> until the next semicolon, effectively isolating the JWT value from other cookies.</p> <p>Sources: src/sockets/socketHandler.js L16-L17</p>"},{"location":"WebSocket-Authentication.html#cookie-format-example","title":"Cookie Format Example","text":"Cookie Header String Extracted Token <code>token=eyJhbGc...; lang=en</code> <code>eyJhbGc...</code> <code>lang=es; token=eyJhbGc...</code> <code>eyJhbGc...</code> <code>sessionId=abc; other=xyz</code> <code>null</code>"},{"location":"WebSocket-Authentication.html#token-verification","title":"Token Verification","text":""},{"location":"WebSocket-Authentication.html#jwt-verification-call","title":"JWT Verification Call","text":"<p>Once extracted, the token is verified using the <code>jsonwebtoken</code> library with the secret key stored in environment variables:</p> <pre><code>const decoded = jwt.verify(token, process.env.JWT_SECRET);\nreq.user = decoded;\n</code></pre> <p>If verification succeeds, the decoded payload is attached to <code>socket.request.user</code>, making it available to all subsequent event handlers for that socket connection.</p> <p>Sources: src/sockets/socketHandler.js L25-L26</p>"},{"location":"WebSocket-Authentication.html#decoded-payload-structure","title":"Decoded Payload Structure","text":"<p>The decoded JWT payload contains the user's identity and role information:</p> Field Type Description <code>user</code> string Username (primary identifier) <code>name</code> string Display name <code>rol</code> string User role (<code>\"admin\"</code> or <code>\"user\"</code>) <p>This payload structure is later accessed in the connection handler at src/sockets/socketHandler.js L37</p> <p>Sources: src/sockets/socketHandler.js L25-L26</p> <p>src/sockets/socketHandler.js L37</p>"},{"location":"WebSocket-Authentication.html#error-handling-and-connection-rejection","title":"Error Handling and Connection Rejection","text":"<p>The authentication middleware handles three distinct error scenarios:</p>"},{"location":"WebSocket-Authentication.html#no-cookies-present","title":"No Cookies Present","text":"<pre><code>if (!cookies) {\n    console.log(\"\u274c No hay cookies en la conexi\u00f3n de socket\");\n    return next(new Error(\"No autenticado\"));\n}\n</code></pre> <p>Sources: src/sockets/socketHandler.js L10-L13</p>"},{"location":"WebSocket-Authentication.html#token-not-found-in-cookies","title":"Token Not Found in Cookies","text":"<pre><code>if (!token) {\n    console.log(\"\u274c No se encontr\u00f3 el token en las cookies\");\n    return next(new Error(\"Token no proporcionado\"));\n}\n</code></pre> <p>Sources: src/sockets/socketHandler.js L19-L22</p>"},{"location":"WebSocket-Authentication.html#invalid-or-expired-token","title":"Invalid or Expired Token","text":"<pre><code>try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    req.user = decoded;\n    next();\n} catch (err) {\n    console.log(\"\u274c Token inv\u00e1lido:\", err.message);\n    return next(new Error(\"Token inv\u00e1lido\"));\n}\n</code></pre> <p>Sources: src/sockets/socketHandler.js L24-L31</p>"},{"location":"WebSocket-Authentication.html#error-handling-flow","title":"Error Handling Flow","text":"<pre><code>flowchart TD\n\nStart[\"Authentication Middleware\"]\nCheckCookies[\"Cookies&lt;br&gt;present?\"]\nLogNoCookies[\"console.log:&lt;br&gt;'No hay cookies'\"]\nRejectNoCookies[\"next(Error:&lt;br&gt;'No autenticado'))\"]\nExtractToken[\"Extract token using&lt;br&gt;regex match\"]\nCheckToken[\"Token&lt;br&gt;found?\"]\nLogNoToken[\"console.log:&lt;br&gt;'No se encontr\u00f3 el token'\"]\nRejectNoToken[\"next(Error:&lt;br&gt;'Token no proporcionado'))\"]\nVerify[\"jwt.verify(token,&lt;br&gt;JWT_SECRET)\"]\nCatchBlock[\"catch block\"]\nLogInvalid[\"console.log:&lt;br&gt;'Token inv\u00e1lido'\"]\nRejectInvalid[\"next(Error:&lt;br&gt;'Token inv\u00e1lido'))\"]\nAttachUser[\"req.user = decoded\"]\nAccept[\"next()\"]\nClientReject[\"Connection Rejected\"]\nConnectionEvent[\"connection event fires\"]\n\nStart --&gt; CheckCookies\nCheckCookies --&gt; LogNoCookies\nLogNoCookies --&gt; RejectNoCookies\nCheckCookies --&gt; ExtractToken\nExtractToken --&gt; CheckToken\nCheckToken --&gt; LogNoToken\nLogNoToken --&gt; RejectNoToken\nCheckToken --&gt; Verify\nVerify --&gt; CatchBlock\nCatchBlock --&gt; LogInvalid\nLogInvalid --&gt; RejectInvalid\nVerify --&gt; AttachUser\nAttachUser --&gt; Accept\nRejectNoCookies --&gt; ClientReject\nRejectNoToken --&gt; ClientReject\nRejectInvalid --&gt; ClientReject\nAccept --&gt; ConnectionEvent</code></pre> <p>Sources: src/sockets/socketHandler.js L6-L32</p>"},{"location":"WebSocket-Authentication.html#comparison-http-vs-websocket-authentication","title":"Comparison: HTTP vs WebSocket Authentication","text":"<p>Both authentication mechanisms use the same JWT token stored in cookies, but they differ in implementation and timing.</p> Aspect HTTP Authentication<code>verifyToken.js</code> WebSocket Authentication<code>socketHandler.js</code> Middleware Type Express middleware Socket.IO middleware Registration <code>router.get('/path', verifyToken, handler)</code> <code>io.use((socket, next) =&gt; {...})</code> Trigger Point Per HTTP request Once at connection time Cookie Access <code>req.cookies.token</code> (parsed by <code>cookie-parser</code>) Manual extraction from <code>req.headers.cookie</code> Token Extraction Direct property access Regex pattern matching User Attachment <code>req.user = payload</code> <code>socket.request.user = decoded</code> Success Callback <code>next()</code> <code>next()</code> Failure Response <code>res.status(401/403).send(...)</code> <code>next(new Error(...))</code> Scope Single request Entire socket connection lifetime <p>Sources: src/middlewares/verifyToken.js L3-L15</p> <p>src/sockets/socketHandler.js L6-L32</p>"},{"location":"WebSocket-Authentication.html#why-manual-cookie-parsing","title":"Why Manual Cookie Parsing?","text":"<p>Socket.IO connections bypass Express middleware like <code>cookie-parser</code>, so cookies must be manually extracted from the raw <code>cookie</code> header string. The HTTP authentication middleware benefits from <code>cookie-parser</code> preprocessing, which converts the cookie header into a <code>req.cookies</code> object.</p>"},{"location":"WebSocket-Authentication.html#integration-with-connection-handler","title":"Integration with Connection Handler","text":"<p>Once authentication succeeds, the connection handler accesses the authenticated user information:</p> <pre><code>io.on(\"connection\", (socket) =&gt; {\n    const { user, name, rol } = socket.request.user;\n    console.log(`\ud83d\udfe2 Usuario conectado: ${user} (${rol})`);\n\n    socket.join(`user:${user}`);\n    if (rol === \"admin\") socket.join(\"admins\");\n    // ... event handlers\n});\n</code></pre> <p>The <code>socket.request.user</code> object contains the decoded JWT payload, enabling role-based room assignment and personalized message routing.</p> <p>Sources: src/sockets/socketHandler.js L36-L43</p>"},{"location":"WebSocket-Authentication.html#authentication-code-map","title":"Authentication Code Map","text":"<pre><code>flowchart TD\n\nConnectionEvent[\"io.on('connection')\"]\nIoUse[\"io.use((socket, next))\"]\nGetRequest[\"socket.request\"]\nGetCookies[\"req.headers.cookie\"]\nCheckCookies[\"cookies?\"]\nErrorNoCookies[\"next(Error:&lt;br&gt;'No autenticado'))\"]\nExtractToken[\"cookies.match(/&lt;br&gt;token=([^;]+)/)\"]\nCheckToken[\"token?\"]\nErrorNoToken[\"next(Error:&lt;br&gt;'Token no proporcionado'))\"]\nJwtVerify[\"jwt.verify(token,&lt;br&gt;JWT_SECRET)\"]\nTryCatch[\"try/catch\"]\nErrorInvalid[\"next(Error:&lt;br&gt;'Token inv\u00e1lido'))\"]\nAttachUser[\"req.user = decoded\"]\nNextSuccess[\"next()\"]\nDestructure[\"{ user, name, rol } =&lt;br&gt;socket.request.user\"]\nJoinRooms[\"socket.join() calls\"]\n\nsubgraph subGraph2 [\"setupSocket Function\"]\n    IoUse\n    IoUse --&gt; GetRequest\n    NextSuccess --&gt; ConnectionEvent\n\nsubgraph subGraph1 [\"Connection Handler\"]\n    ConnectionEvent\n    Destructure\n    JoinRooms\n    ConnectionEvent --&gt; Destructure\n    Destructure --&gt; JoinRooms\nend\n\nsubgraph subGraph0 [\"Authentication Middleware\"]\n    GetRequest\n    GetCookies\n    CheckCookies\n    ErrorNoCookies\n    ExtractToken\n    CheckToken\n    ErrorNoToken\n    JwtVerify\n    TryCatch\n    ErrorInvalid\n    AttachUser\n    NextSuccess\n    GetRequest --&gt; GetCookies\n    GetCookies --&gt; CheckCookies\n    CheckCookies --&gt; ErrorNoCookies\n    CheckCookies --&gt; ExtractToken\n    ExtractToken --&gt; CheckToken\n    CheckToken --&gt; ErrorNoToken\n    CheckToken --&gt; JwtVerify\n    JwtVerify --&gt; TryCatch\n    TryCatch --&gt; ErrorInvalid\n    TryCatch --&gt; AttachUser\n    AttachUser --&gt; NextSuccess\nend\nend</code></pre> <p>Sources: src/sockets/socketHandler.js L4-L69</p>"},{"location":"WebSocket-Authentication.html#security-considerations","title":"Security Considerations","text":""},{"location":"WebSocket-Authentication.html#token-validation-timing","title":"Token Validation Timing","text":"<p>Authentication occurs only at connection establishment. If a token expires during an active connection, the user remains connected until they disconnect and attempt to reconnect. This design choice prioritizes connection stability over immediate token expiration enforcement.</p>"},{"location":"WebSocket-Authentication.html#environment-variable-dependency","title":"Environment Variable Dependency","text":"<p>The JWT secret key (<code>process.env.JWT_SECRET</code>) must be identical for both HTTP and WebSocket authentication. Mismatched secrets will cause WebSocket authentication failures even with valid HTTP session tokens.</p>"},{"location":"WebSocket-Authentication.html#no-automatic-retry","title":"No Automatic Retry","text":"<p>Socket.IO does not automatically retry authentication on failure. Clients must handle authentication errors and potentially redirect to login pages or display error messages.</p> <p>Sources: src/sockets/socketHandler.js L25</p> <p>src/middlewares/verifyToken.js L9</p>"},{"location":"WebSocket-Events.html","title":"WebSocket Events","text":"<p>Relevant source files * src/sockets/socketHandler.js * views/soporte.ejs</p>"},{"location":"WebSocket-Events.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides a complete reference for all Socket.IO events used in the real-time communication system. It documents the event names, payload structures, expected behaviors, and the flow of messages between clients and the server.</p> <p>For information about HTTP API endpoints used to retrieve message history, see HTTP Endpoints. For architectural details about the real-time communication system, including room management and authentication flow, see Real-time Communication System.</p> <p>Sources: src/sockets/socketHandler.js L1-L71</p>"},{"location":"WebSocket-Events.html#authentication","title":"Authentication","text":"<p>All WebSocket connections must be authenticated before any events can be exchanged. Authentication occurs automatically when a client establishes a connection, using JWT tokens stored in HTTP-only cookies.</p>"},{"location":"WebSocket-Events.html#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n  participant Socket.IO Client\n  participant io.use() Middleware\n  participant jwt.verify()\n  participant Connection Handler\n\n  Socket.IO Client-&gt;&gt;io.use() Middleware: \"Connect with cookies\"\n  io.use() Middleware-&gt;&gt;io.use() Middleware: \"Extract token from cookie\"\n  loop [No cookies]\n    io.use() Middleware--&gt;&gt;Socket.IO Client: \"Error: No autenticado\"\n    io.use() Middleware--&gt;&gt;Socket.IO Client: \"Error: Token no proporcionado\"\n    io.use() Middleware-&gt;&gt;jwt.verify(): \"verify(token, JWT_SECRET)\"\n    jwt.verify()--&gt;&gt;io.use() Middleware: \"throw Error\"\n    io.use() Middleware--&gt;&gt;Socket.IO Client: \"Error: Token inv\u00e1lido\"\n  end\n  jwt.verify()--&gt;&gt;io.use() Middleware: \"decoded user data\"\n  io.use() Middleware-&gt;&gt;io.use() Middleware: \"Attach user to socket.request.user\"\n  io.use() Middleware-&gt;&gt;Connection Handler: \"next()\"\n  Connection Handler-&gt;&gt;Connection Handler: \"socket.join() rooms\"\n  Connection Handler--&gt;&gt;Socket.IO Client: \"Connection established\"</code></pre> <p>The middleware extracts the JWT from the <code>token</code> cookie using a regex pattern: <code>/token=([^;]+)/</code>. The decoded token contains <code>user</code>, <code>name</code>, and <code>rol</code> fields, which are attached to <code>socket.request.user</code> for use in subsequent event handlers.</p> <p>Sources: src/sockets/socketHandler.js L6-L32</p>"},{"location":"WebSocket-Events.html#connection-event","title":"Connection Event","text":"<p>The <code>connection</code> event fires when a client successfully authenticates and establishes a WebSocket connection.</p>"},{"location":"WebSocket-Events.html#server-side-handler","title":"Server-Side Handler","text":"<p>Event Name: <code>connection</code> (Socket.IO reserved event)</p> <p>Payload: Socket object with authenticated user data in <code>socket.request.user</code></p> <p>Behavior:</p> <ol> <li>Extracts user information from <code>socket.request.user</code>: <code>user</code> (username), <code>name</code>, <code>rol</code> (role)</li> <li>Logs the connection with user and role information</li> <li>Joins the socket to rooms based on user identity and role: * Personal room: <code>user:{username}</code> - Every user gets their own room * Admin room: <code>admins</code> - Only users with <code>rol === \"admin\"</code> join this room</li> </ol> <p>Room Assignment Logic:</p> User Role Personal Room Admin Room <code>user</code> <code>user:{username}</code> No <code>admin</code> <code>user:{username}</code> <code>admins</code> <p>Code Reference: src/sockets/socketHandler.js L36-L43</p> <p>Sources: src/sockets/socketHandler.js L36-L43</p>"},{"location":"WebSocket-Events.html#client-to-server-events","title":"Client-to-Server Events","text":""},{"location":"WebSocket-Events.html#mensaje_privado","title":"mensaje_privado","text":"<p>The client emits this event to send a message to another user.</p> <p>Event Name: <code>mensaje_privado</code></p> <p>Direction: Client \u2192 Server</p> <p>Payload Structure:</p> <pre><code>{\n  para: string,    // Recipient username\n  mensaje: string  // Message content\n}\n</code></pre> <p>Payload Fields:</p> Field Type Required Description <code>para</code> string Yes Username of the intended recipient <code>mensaje</code> string Yes The message text to send <p>Server Behavior:</p> <ol> <li>Extracts sender username from authenticated user: <code>const de = user;</code></li> <li>Emits <code>mensaje_recibido</code> to recipient's personal room: <code>io.to('user:${para}').emit(...)</code></li> <li>If sender is NOT an admin (<code>rol !== \"admin\"</code>), also broadcasts to all admins: <code>io.to(\"admins\").emit(...)</code></li> <li>Persists message to database using INSERT query to <code>mensajes</code> table with fields <code>(de_usuario, para_usuario, mensaje)</code></li> </ol> <p>Message Routing Logic:</p> <pre><code>flowchart TD\n\nClient[\"Client emits&lt;br&gt;mensaje_privado\"]\nCheckRole[\"Sender&lt;br&gt;role?\"]\nSendToRecipient[\"Emit to&lt;br&gt;user:{para}\"]\nSendToAdmins[\"Emit to&lt;br&gt;admins room\"]\nSaveDB[\"INSERT INTO mensajes\"]\n\nClient --&gt; CheckRole\nCheckRole --&gt; SendToRecipient\nCheckRole --&gt; SendToRecipient\nCheckRole --&gt; SendToAdmins\nSendToRecipient --&gt; SaveDB\nSendToAdmins --&gt; SaveDB</code></pre> <p>Client Implementation Examples:</p> <p>Admin sending a message:</p> <pre><code>// From views/soporte.ejs:156\nsocket.emit(\"mensaje_privado\", { para, mensaje });\n</code></pre> <p>Regular user sending to admin:</p> <pre><code>// From views/soporte.ejs:184\nsocket.emit(\"mensaje_privado\", { para: \"admin\", mensaje });\n</code></pre> <p>Sources: src/sockets/socketHandler.js L45-L63</p> <p>views/soporte.ejs L150-L162</p> <p>views/soporte.ejs L180-L187</p>"},{"location":"WebSocket-Events.html#server-to-client-events","title":"Server-to-Client Events","text":""},{"location":"WebSocket-Events.html#mensaje_recibido","title":"mensaje_recibido","text":"<p>The server emits this event to deliver a message to connected clients.</p> <p>Event Name: <code>mensaje_recibido</code></p> <p>Direction: Server \u2192 Client</p> <p>Payload Structure:</p> <pre><code>{\n  de: string,      // Sender username\n  mensaje: string  // Message content\n}\n</code></pre> <p>Payload Fields:</p> Field Type Description <code>de</code> string Username of the message sender <code>mensaje</code> string The message text <p>Emitted To:</p> <p>This event is emitted to specific Socket.IO rooms depending on the sender's role:</p> <ol> <li>Always: Recipient's personal room <code>user:{para}</code></li> <li>Conditionally: <code>admins</code> room (only if sender is not an admin)</li> </ol> <p>Client-Side Handlers:</p> <p>Admin Client:</p> <pre><code>// From views/soporte.ejs:128-147\nsocket.on(\"mensaje_recibido\", ({ de, mensaje }) =&gt; {\n    const fecha = new Date();\n    conversaciones[de] = conversaciones[de] || [];\n    conversaciones[de].push({ de, mensaje, fecha });\n\n    agregarUsuarioLista(de);\n\n    // Visual notification if not active conversation\n    if (usuarioActual.value !== de) {\n        const li = document.getElementById(\"user-\" + de);\n        if (li &amp;&amp; li.dataset.nuevo !== \"true\") {\n            li.classList.remove(\"text-success\");\n            li.classList.add(\"fw-bold\", \"text-danger\");\n            li.dataset.nuevo = \"true\";\n        }\n    } else {\n        renderConversacion(de); // Already viewing, mark as seen\n    }\n});\n</code></pre> <p>Regular User Client:</p> <pre><code>// From views/soporte.ejs:174-177\nsocket.on(\"mensaje_recibido\", ({ de, mensaje }) =&gt; {\n    const fecha = new Date();\n    agregarMensaje(de, mensaje, fecha);\n});\n</code></pre> <p>Behavior Differences by Role:</p> Client Role Behavior <code>admin</code> Stores message in conversation map, adds sender to user list if needed, shows notification badge if not viewing that conversation <code>user</code> Appends message directly to chat display <p>Sources: src/sockets/socketHandler.js L48-L52</p> <p>views/soporte.ejs L128-L147</p> <p>views/soporte.ejs L174-L177</p>"},{"location":"WebSocket-Events.html#disconnect-event","title":"Disconnect Event","text":"<p>The <code>disconnect</code> event fires when a client's WebSocket connection is closed.</p> <p>Event Name: <code>disconnect</code> (Socket.IO reserved event)</p> <p>Direction: Client \u2192 Server (automatic)</p> <p>Payload: None</p> <p>Server Behavior:</p> <p>Logs the disconnection with the username of the disconnected user. No additional cleanup is performed as Socket.IO automatically removes the socket from all rooms.</p> <p>Code Reference: src/sockets/socketHandler.js L65-L67</p> <p>Sources: src/sockets/socketHandler.js L65-L67</p>"},{"location":"WebSocket-Events.html#complete-event-flow","title":"Complete Event Flow","text":""},{"location":"WebSocket-Events.html#user-to-admin-message-flow","title":"User-to-Admin Message Flow","text":"<pre><code>sequenceDiagram\n  participant User Client\n  participant (role=user)\n  participant Socket.IO Server\n  participant socketHandler.js\n  participant MySQL\n  participant mensajes table\n  participant Admin Client\n  participant (role=admin)\n\n  User Client-&gt;&gt;Socket.IO Server: \"emit('mensaje_privado',\n  Socket.IO Server-&gt;&gt;Socket.IO Server: {para:'admin', mensaje})\"\n  Socket.IO Server-&gt;&gt;Admin Client: \"Extract de from\n  Socket.IO Server-&gt;&gt;Admin Client: socket.request.user\"\n  Socket.IO Server-&gt;&gt;MySQL: \"to('user:admin').emit(\n  MySQL--&gt;&gt;Socket.IO Server: 'mensaje_recibido', {de, mensaje})\"\n  Admin Client-&gt;&gt;Admin Client: \"to('admins').emit(\n  Admin Client-&gt;&gt;Admin Client: 'mensaje_recibido', {de, mensaje})\"</code></pre>"},{"location":"WebSocket-Events.html#admin-to-user-message-flow","title":"Admin-to-User Message Flow","text":"<pre><code>sequenceDiagram\n  participant Admin Client\n  participant (role=admin)\n  participant Socket.IO Server\n  participant socketHandler.js\n  participant MySQL\n  participant mensajes table\n  participant User Client\n  participant (role=user)\n\n  Admin Client-&gt;&gt;Socket.IO Server: \"emit('mensaje_privado',\n  Socket.IO Server-&gt;&gt;Socket.IO Server: {para:username, mensaje})\"\n  Socket.IO Server-&gt;&gt;User Client: \"Extract de from\n  note over Socket.IO Server,(role=user): \"No broadcast to admins\n  Socket.IO Server-&gt;&gt;MySQL: socket.request.user\"\n  MySQL--&gt;&gt;Socket.IO Server: \"to('user:username').emit(\n  User Client-&gt;&gt;User Client: 'mensaje_recibido', {de, mensaje})\"</code></pre> <p>Sources: src/sockets/socketHandler.js L45-L63</p> <p>views/soporte.ejs L1-L191</p>"},{"location":"WebSocket-Events.html#event-summary-table","title":"Event Summary Table","text":"Event Name Direction Emitter Handler Location Persisted to DB <code>connection</code> Server Socket.IO socketHandler.js L36 No <code>mensaje_privado</code> Client\u2192Server Client code socketHandler.js L45 Yes <code>mensaje_recibido</code> Server\u2192Client Server code soporte.ejs L128-L174 No (payload only) <code>disconnect</code> Client\u2192Server Socket.IO socketHandler.js L65 No <p>Sources: src/sockets/socketHandler.js L1-L71</p> <p>views/soporte.ejs L1-L191</p>"},{"location":"WebSocket-Events.html#code-entity-reference","title":"Code Entity Reference","text":""},{"location":"WebSocket-Events.html#server-side-entities","title":"Server-Side Entities","text":"Entity Type Location Purpose <code>setupSocket</code> Function socketHandler.js L4 Initializes Socket.IO server and event handlers <code>io.use()</code> Middleware socketHandler.js L6 Authenticates WebSocket connections via JWT <code>io.on(\"connection\")</code> Event Handler socketHandler.js L36 Handles new client connections and room assignments <code>socket.on(\"mensaje_privado\")</code> Event Handler socketHandler.js L45 Processes incoming messages and routes to recipients <code>socket.on(\"disconnect\")</code> Event Handler socketHandler.js L65 Handles client disconnections <code>socket.join()</code> Method socketHandler.js L42-L43 Adds socket to room(s) <code>io.to()</code> Method socketHandler.js L48-L51 Targets message emission to specific room"},{"location":"WebSocket-Events.html#client-side-entities","title":"Client-Side Entities","text":"Entity Type Location Purpose <code>io()</code> Constructor soporte.ejs L39 Creates Socket.IO client instance <code>socket.emit()</code> Method soporte.ejs L156-L184 Sends events to server <code>socket.on()</code> Method soporte.ejs L128-L174 Registers event listeners <code>agregarMensaje()</code> Function soporte.ejs L54 Renders message in chat UI <code>renderConversacion()</code> Function soporte.ejs L69 Displays full conversation for selected user (admin only) <code>conversaciones</code> Object soporte.ejs L65 Stores message history by user (admin only) <p>Sources: src/sockets/socketHandler.js L1-L71</p> <p>views/soporte.ejs L1-L191</p>"},{"location":"WebSocket-Events.html#database-persistence","title":"Database Persistence","text":"<p>Messages sent via <code>mensaje_privado</code> are persisted to the <code>mensajes</code> table using the following SQL query:</p> <pre><code>INSERT INTO mensajes (de_usuario, para_usuario, mensaje) VALUES (?, ?, ?)\n</code></pre> <p>Parameters:</p> <ol> <li><code>de_usuario</code> - Sender username (from <code>socket.request.user.user</code>)</li> <li><code>para_usuario</code> - Recipient username (from event payload <code>para</code> field)</li> <li><code>mensaje</code> - Message content (from event payload <code>mensaje</code> field)</li> </ol> <p>The <code>fecha</code> column is automatically set to the current timestamp via database defaults. Error handling logs failures but does not notify the client.</p> <p>For retrieving message history, clients use HTTP GET endpoints documented in HTTP Endpoints.</p> <p>Sources: src/sockets/socketHandler.js L55-L62</p>"},{"location":"mensajes-Table.html","title":"mensajes Table","text":"<p>Relevant source files * src/router.js * src/sockets/socketHandler.js</p>"},{"location":"mensajes-Table.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>The <code>mensajes</code> table stores all chat messages exchanged in the support chat system between users and administrators. This table serves as the persistence layer for the real-time messaging functionality, recording every message sent through Socket.IO WebSocket connections and providing historical message retrieval through HTTP API endpoints.</p> <p>For information about the real-time WebSocket layer that writes to this table, see Real-time Communication System. For details about the HTTP endpoints that query this table, see API Endpoints. For the related user authentication table, see usuarios Table.</p> <p>Sources: src/router.js L229-L315</p> <p>src/sockets/socketHandler.js L55-L62</p>"},{"location":"mensajes-Table.html#table-schema","title":"Table Schema","text":"<p>The <code>mensajes</code> table has the following structure:</p> Column Type Constraints Description <code>de_usuario</code> VARCHAR NOT NULL, FK \u2192 <code>usuarios.usuario</code> Username of the message sender <code>para_usuario</code> VARCHAR NOT NULL, FK \u2192 <code>usuarios.usuario</code> Username of the message recipient <code>mensaje</code> TEXT NOT NULL Message content <code>fecha</code> DATETIME DEFAULT CURRENT_TIMESTAMP Timestamp when message was created <p>Note: The table does not have an explicit primary key defined in the queries, though it likely has an auto-increment ID column for internal indexing.</p> <p>Sources: src/router.js L237-L269</p> <p>src/sockets/socketHandler.js L55</p>"},{"location":"mensajes-Table.html#entity-relationship-diagram","title":"Entity Relationship Diagram","text":"<pre><code>#mermaid-1rs7o028btr{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-1rs7o028btr .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-1rs7o028btr .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-1rs7o028btr .error-icon{fill:#dddddd;}#mermaid-1rs7o028btr .error-text{fill:#222222;stroke:#222222;}#mermaid-1rs7o028btr .edge-thickness-normal{stroke-width:1px;}#mermaid-1rs7o028btr .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1rs7o028btr .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1rs7o028btr .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-1rs7o028btr .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1rs7o028btr .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1rs7o028btr .marker{fill:#999;stroke:#999;}#mermaid-1rs7o028btr .marker.cross{stroke:#999;}#mermaid-1rs7o028btr svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-1rs7o028btr p{margin:0;}#mermaid-1rs7o028btr .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-1rs7o028btr .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-1rs7o028btr .relationshipLabelBox rect{opacity:0.5;}#mermaid-1rs7o028btr .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-1rs7o028btr .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-1rs7o028btr .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-1rs7o028btr .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-1rs7o028btr .node rect,#mermaid-1rs7o028btr .node circle,#mermaid-1rs7o028btr .node ellipse,#mermaid-1rs7o028btr .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-1rs7o028btr .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-1rs7o028btr .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-1rs7o028btr :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}sends (de_usuario)receives (para_usuario)usuariosvarcharusuarioPKvarcharnombrevarcharrolvarcharpassvarcharimagenmensajesvarcharde_usuarioFKvarcharpara_usuarioFKtextmensajedatetimefecha\n</code></pre> <p>Diagram: Relationship between <code>usuarios</code> and <code>mensajes</code> tables. Each message has two foreign key relationships to the <code>usuarios</code> table: one for the sender (<code>de_usuario</code>) and one for the recipient (<code>para_usuario</code>).</p> <p>Sources: src/router.js L237-L242</p> <p>src/sockets/socketHandler.js L55</p>"},{"location":"mensajes-Table.html#column-descriptions","title":"Column Descriptions","text":""},{"location":"mensajes-Table.html#de_usuario","title":"de_usuario","text":"<p>The <code>de_usuario</code> column stores the username of the message sender. This is a foreign key reference to <code>usuarios.usuario</code>. The value is extracted from the authenticated JWT token in WebSocket connections.</p> <p>Populated by: src/sockets/socketHandler.js L46-L56</p>"},{"location":"mensajes-Table.html#para_usuario","title":"para_usuario","text":"<p>The <code>para_usuario</code> column stores the username of the message recipient. This is a foreign key reference to <code>usuarios.usuario</code>. In the WebSocket handler, this value comes from the <code>para</code> field of the <code>mensaje_privado</code> event payload.</p> <p>Populated by: src/sockets/socketHandler.js L45-L56</p>"},{"location":"mensajes-Table.html#mensaje","title":"mensaje","text":"<p>The <code>mensaje</code> column stores the actual text content of the message as a TEXT field, allowing for messages of arbitrary length. This content is passed directly from the client through the WebSocket <code>mensaje_privado</code> event.</p> <p>Populated by: src/sockets/socketHandler.js L45-L56</p>"},{"location":"mensajes-Table.html#fecha","title":"fecha","text":"<p>The <code>fecha</code> column is a DATETIME field that records when the message was created. This column likely uses <code>DEFAULT CURRENT_TIMESTAMP</code> to automatically set the timestamp during insertion, though it is not explicitly set in the INSERT query.</p> <p>Implicitly set by: src/sockets/socketHandler.js L55-L56</p> <p>Sources: src/sockets/socketHandler.js L45-L62</p>"},{"location":"mensajes-Table.html#data-operations","title":"Data Operations","text":""},{"location":"mensajes-Table.html#message-insertion-websocket","title":"Message Insertion (WebSocket)","text":"<p>Messages are inserted into the <code>mensajes</code> table when a user sends a message through the Socket.IO WebSocket connection. The insertion occurs in the <code>mensaje_privado</code> event handler.</p> <pre><code>sequenceDiagram\n  participant Client\n  participant Socket.IO Server\n  participant socketHandler.js\n  participant MySQL mensajes table\n\n  Client-&gt;&gt;Socket.IO Server: \"emit mensaje_privado {para, mensaje}\"\n  Socket.IO Server-&gt;&gt;socketHandler.js: \"mensaje_privado event\"\n  note over socketHandler.js: \"Extract 'de' from JWT\n  socketHandler.js-&gt;&gt;MySQL mensajes table: \"INSERT INTO mensajes\n  socketHandler.js-&gt;&gt;Socket.IO Server: (de_usuario, para_usuario, mensaje)\"\n  socketHandler.js-&gt;&gt;Socket.IO Server: \"emit mensaje_recibido to recipient\"\n  MySQL mensajes table--&gt;&gt;socketHandler.js: \"emit mensaje_recibido to admins (if sender not admin)\"\n  note over socketHandler.js: \"Log: \ud83d\udcbe Mensaje guardado\"</code></pre> <p>Diagram: Message insertion flow through WebSocket connection</p> <p>The actual SQL insertion code:</p> <pre><code>INSERT INTO mensajes (de_usuario, para_usuario, mensaje) VALUES (?, ?, ?)\n</code></pre> <p>Sources: src/sockets/socketHandler.js L45-L63</p>"},{"location":"mensajes-Table.html#message-retrieval-http-api","title":"Message Retrieval (HTTP API)","text":"<p>Three HTTP API endpoints query the <code>mensajes</code> table to retrieve historical messages:</p>"},{"location":"mensajes-Table.html#1-get-apimensajes-admin-only","title":"1. GET /api/mensajes (Admin Only)","text":"<p>This endpoint retrieves all messages for a specific user conversation. It requires the <code>verifyAdmin</code> middleware and accepts a query parameter <code>?con=username</code>.</p> <pre><code>SELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE \n  (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <p>Sources: src/router.js L229-L253</p>"},{"location":"mensajes-Table.html#2-get-apimensajesmios-authenticated-users","title":"2. GET /api/mensajes/mios (Authenticated Users)","text":"<p>This endpoint retrieves all messages for the currently authenticated user. The username is extracted from the JWT token via the <code>verifyToken</code> middleware.</p> <pre><code>SELECT de_usuario, para_usuario, mensaje, fecha\nFROM mensajes\nWHERE \n  (de_usuario = ? OR para_usuario = ?)\nORDER BY fecha ASC\n</code></pre> <p>Sources: src/router.js L256-L280</p>"},{"location":"mensajes-Table.html#3-get-apiusuarios-conversaciones-admin-only","title":"3. GET /api/usuarios-conversaciones (Admin Only)","text":"<p>This endpoint retrieves a list of all users who have had conversations with administrators. It uses a complex UNION query to find all non-admin users who have either sent messages to admins or received messages from admins.</p> <pre><code>SELECT DISTINCT usuario\nFROM (\n  SELECT de_usuario AS usuario FROM mensajes\n  WHERE para_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n\n  UNION\n\n  SELECT para_usuario AS usuario FROM mensajes\n  WHERE de_usuario IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n) AS conversaciones\nWHERE usuario NOT IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n</code></pre> <p>This query:</p> <ol> <li>Finds all non-admin senders who sent to admins (<code>de_usuario</code>)</li> <li>Finds all non-admin recipients who received from admins (<code>para_usuario</code>)</li> <li>Combines results with UNION to eliminate duplicates</li> <li>Filters out any admin users from the final list</li> </ol> <p>Sources: src/router.js L283-L315</p>"},{"location":"mensajes-Table.html#data-access-patterns","title":"Data Access Patterns","text":"<pre><code>flowchart TD\n\nWS[\"Socket.IO WebSocket&lt;br&gt;mensaje_privado event\"]\nWSHandler[\"socketHandler.js:45-63\"]\nAPI1[\"GET /api/mensajes?con=user&lt;br&gt;verifyAdmin\"]\nAPI2[\"GET /api/mensajes/mios&lt;br&gt;verifyToken\"]\nAPI3[\"GET /api/usuarios-conversaciones&lt;br&gt;verifyAdmin\"]\nRouter[\"router.js:229-315\"]\nMensajesTable[\"mensajes table&lt;br&gt;de_usuario, para_usuario,&lt;br&gt;mensaje, fecha\"]\n\nWSHandler --&gt; MensajesTable\nRouter --&gt; MensajesTable\n\nsubgraph Database [\"Database\"]\n    MensajesTable\nend\n\nsubgraph subGraph1 [\"Read Operations\"]\n    API1\n    API2\n    API3\n    Router\n    API1 --&gt; Router\n    API2 --&gt; Router\n    API3 --&gt; Router\nend\n\nsubgraph subGraph0 [\"Write Operations\"]\n    WS\n    WSHandler\n    WS --&gt; WSHandler\nend</code></pre> <p>Diagram: Write and read access patterns for the <code>mensajes</code> table</p> <p>Sources: src/router.js L229-L315</p> <p>src/sockets/socketHandler.js L45-L63</p>"},{"location":"mensajes-Table.html#query-patterns-and-performance-considerations","title":"Query Patterns and Performance Considerations","text":""},{"location":"mensajes-Table.html#bidirectional-message-queries","title":"Bidirectional Message Queries","text":"<p>Both <code>/api/mensajes</code> and <code>/api/mensajes/mios</code> endpoints use the same query pattern to retrieve bidirectional conversations:</p> <pre><code>WHERE (de_usuario = ? OR para_usuario = ?)\n</code></pre> <p>This pattern matches messages where the user is either the sender or recipient, enabling a complete conversation view. For optimal performance, the table should have composite indexes on:</p> <ul> <li><code>(de_usuario, fecha)</code></li> <li><code>(para_usuario, fecha)</code></li> </ul> <p>This allows efficient retrieval of chronologically ordered messages for any user.</p>"},{"location":"mensajes-Table.html#chronological-ordering","title":"Chronological Ordering","text":"<p>All message retrieval queries use <code>ORDER BY fecha ASC</code> to return messages in chronological order, which is essential for displaying conversation history correctly.</p> <p>Sources: src/router.js L241-L268</p>"},{"location":"mensajes-Table.html#admin-conversation-discovery","title":"Admin Conversation Discovery","text":"<p>The <code>/api/usuarios-conversaciones</code> endpoint uses a complex subquery pattern to discover all users who have communicated with administrators. This query performs multiple table scans and subqueries, making it potentially expensive for large datasets. Consider caching this result or maintaining a denormalized table if performance becomes an issue.</p> <p>Sources: src/router.js L292-L304</p>"},{"location":"mensajes-Table.html#usage-in-real-time-messaging-flow","title":"Usage in Real-time Messaging Flow","text":"<pre><code>sequenceDiagram\n  participant User Client\n  participant Admin Client\n  participant Socket.IO Server\n  participant socketHandler.js\n  participant mensajes table\n  participant router.js API\n\n  note over User Client,Admin Client: \"Initial page load\"\n  User Client-&gt;&gt;router.js API: \"GET /api/mensajes/mios\"\n  Admin Client-&gt;&gt;router.js API: \"GET /api/usuarios-conversaciones\"\n  router.js API-&gt;&gt;mensajes table: \"SELECT historical messages\"\n  mensajes table--&gt;&gt;router.js API: \"Previous messages\"\n  router.js API--&gt;&gt;User Client: \"JSON: message history\"\n  router.js API--&gt;&gt;Admin Client: \"JSON: user list\"\n  note over User Client,Admin Client: \"Real-time messaging\"\n  User Client-&gt;&gt;Socket.IO Server: \"mensaje_privado {para: 'admin1', mensaje: '...'}\"\n  Socket.IO Server-&gt;&gt;socketHandler.js: \"Event received\"\n  socketHandler.js-&gt;&gt;mensajes table: \"INSERT INTO mensajes\"\n  socketHandler.js-&gt;&gt;User Client: \"mensaje_recibido (confirmation)\"\n  socketHandler.js-&gt;&gt;Admin Client: \"mensaje_recibido (to admins room)\"\n  Admin Client-&gt;&gt;Socket.IO Server: \"mensaje_privado {para: 'user1', mensaje: '...'}\"\n  Socket.IO Server-&gt;&gt;socketHandler.js: \"Event received\"\n  socketHandler.js-&gt;&gt;mensajes table: \"INSERT INTO mensajes\"\n  socketHandler.js-&gt;&gt;Admin Client: \"mensaje_recibido (confirmation)\"\n  socketHandler.js-&gt;&gt;User Client: \"mensaje_recibido (to user:user1 room)\"</code></pre> <p>Diagram: Complete message flow showing both historical retrieval (HTTP) and real-time messaging (WebSocket) interactions with the <code>mensajes</code> table</p> <p>Sources: src/router.js L256-L315</p> <p>src/sockets/socketHandler.js L45-L63</p>"},{"location":"mensajes-Table.html#error-handling","title":"Error Handling","text":""},{"location":"mensajes-Table.html#insertion-errors","title":"Insertion Errors","text":"<p>When message insertion fails in the WebSocket handler, an error is logged to the console but the client is not explicitly notified. The message delivery to recipients proceeds regardless of database persistence success.</p> <p>Sources: src/sockets/socketHandler.js L57-L61</p>"},{"location":"mensajes-Table.html#query-errors","title":"Query Errors","text":"<p>All HTTP API endpoints that query the <code>mensajes</code> table implement error handling:</p> <ul> <li>Return HTTP 500 status code with JSON error message</li> <li>Log errors to console with \"\u274c\" prefix</li> <li>Generic error messages to avoid leaking database information</li> </ul> <p>Sources: src/router.js L245-L310</p>"},{"location":"mensajes-Table.html#security-considerations","title":"Security Considerations","text":""},{"location":"mensajes-Table.html#authorization-enforcement","title":"Authorization Enforcement","text":"<p>Access to message data is protected by middleware:</p> <ul> <li><code>/api/mensajes</code> requires <code>verifyAdmin</code> middleware - only administrators can query other users' messages</li> <li><code>/api/mensajes/mios</code> requires <code>verifyToken</code> middleware - users can only access their own messages</li> <li>WebSocket insertions require JWT authentication via Socket.IO middleware</li> </ul> <p>Sources: src/router.js L229-L283</p> <p>src/sockets/socketHandler.js L6-L32</p>"},{"location":"mensajes-Table.html#sql-injection-prevention","title":"SQL Injection Prevention","text":"<p>All database queries use parameterized queries with <code>?</code> placeholders, preventing SQL injection attacks:</p> <pre><code>db.query(sql, [usuario, usuario], (err, results) =&gt; { ... })\ndb.query(sql, [de, para, mensaje], (err) =&gt; { ... })\n</code></pre> <p>Sources: src/router.js L244-L271</p> <p>src/sockets/socketHandler.js L56</p>"},{"location":"mensajes-Table.html#data-exposure","title":"Data Exposure","text":"<p>The queries select only necessary columns (<code>de_usuario</code>, <code>para_usuario</code>, <code>mensaje</code>, <code>fecha</code>) and do not expose internal IDs or other sensitive metadata.</p> <p>Sources: src/router.js L237-L264</p>"},{"location":"productos-Table.html","title":"productos Table","text":"<p>Relevant source files * proyecto.zip * src/router.js</p>"},{"location":"productos-Table.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This page documents the <code>productos</code> table in the MySQL database, which stores product information for the inventory management system. This page covers the table schema, column definitions, database operations, and how the table integrates with the application's CRUD functionality and PDF generation features.</p> <p>For information about user authentication and roles that control access to product data, see Authentication &amp; Authorization. For details on the admin interface that displays product data, see Product Management. For information on other database tables, see usuarios Table and mensajes Table.</p>"},{"location":"productos-Table.html#table-schema","title":"Table Schema","text":"<p>The <code>productos</code> table is the core data structure for product inventory management. It stores product references, names, pricing, and stock quantities.</p> <pre><code>#mermaid-w3zvld4dov{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-w3zvld4dov .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-w3zvld4dov .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-w3zvld4dov .error-icon{fill:#dddddd;}#mermaid-w3zvld4dov .error-text{fill:#222222;stroke:#222222;}#mermaid-w3zvld4dov .edge-thickness-normal{stroke-width:1px;}#mermaid-w3zvld4dov .edge-thickness-thick{stroke-width:3.5px;}#mermaid-w3zvld4dov .edge-pattern-solid{stroke-dasharray:0;}#mermaid-w3zvld4dov .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-w3zvld4dov .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-w3zvld4dov .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-w3zvld4dov .marker{fill:#999;stroke:#999;}#mermaid-w3zvld4dov .marker.cross{stroke:#999;}#mermaid-w3zvld4dov svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-w3zvld4dov p{margin:0;}#mermaid-w3zvld4dov .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-w3zvld4dov .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-w3zvld4dov .relationshipLabelBox rect{opacity:0.5;}#mermaid-w3zvld4dov .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-w3zvld4dov .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-w3zvld4dov .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-w3zvld4dov .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-w3zvld4dov .node rect,#mermaid-w3zvld4dov .node circle,#mermaid-w3zvld4dov .node ellipse,#mermaid-w3zvld4dov .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-w3zvld4dov .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-w3zvld4dov .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-w3zvld4dov :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}productosintrefPKAUTO_INCREMENT, Primary KeyvarcharnombreNOT NULL, max 30 charsdecimalprecioNOT NULL, (10,2)intstockNULL\n</code></pre> <p>Sources:</p> <ul> <li>src/router.js L105-L109</li> </ul>"},{"location":"productos-Table.html#column-definitions","title":"Column Definitions","text":"Column Name Data Type Constraints Description <code>ref</code> <code>int(11)</code> <code>NOT NULL AUTO_INCREMENT PRIMARY KEY</code> Unique product reference number, automatically generated <code>nombre</code> <code>varchar(30)</code> <code>NOT NULL</code> Product name, maximum 30 characters <code>precio</code> <code>decimal(10,2)</code> <code>NOT NULL</code> Product price with 2 decimal places for currency precision <code>stock</code> <code>int(11)</code> <code>NULL</code> Available stock quantity, nullable to allow products without inventory tracking"},{"location":"productos-Table.html#column-details","title":"Column Details","text":"<p><code>ref</code> (Reference)</p> <ul> <li>Primary key that uniquely identifies each product</li> <li>Auto-incremented by MySQL on insertion</li> <li>Used in URLs for product operations (e.g., <code>/edit/:id</code>, <code>/delete/:id</code>)</li> <li>Immutable once created</li> </ul> <p><code>nombre</code> (Name)</p> <ul> <li>Product display name shown in admin interface and PDF reports</li> <li>Limited to 30 characters to ensure consistent UI display</li> <li>Required field enforced at database level</li> </ul> <p><code>precio</code> (Price)</p> <ul> <li>Stored as <code>DECIMAL(10,2)</code> for exact currency representation</li> <li>Supports up to 8 digits before decimal point and 2 after</li> <li>Required field; products must have a price</li> </ul> <p><code>stock</code> (Stock Quantity)</p> <ul> <li>Nullable integer allowing products to exist without inventory tracking</li> <li>Can be negative (e.g., for backorders) since no constraint enforces positivity</li> <li>Displayed and editable through admin interface</li> </ul> <p>Sources:</p> <ul> <li>src/router.js L105-L109</li> </ul>"},{"location":"productos-Table.html#database-operations-map","title":"Database Operations Map","text":"<p>The following diagram shows how different routes and controllers interact with the <code>productos</code> table:</p> <pre><code>flowchart TD\n\nGetAdmin[\"GET /admin&lt;br&gt;verifyToken\"]\nGetPdfAdmin[\"GET /pdfAdmin&lt;br&gt;verifyToken\"]\nGetEdit[\"GET /edit/:id\"]\nGetDelete[\"GET /delete/:id\"]\nGetPdfDescargar[\"GET /pdf/descargar&lt;br&gt;verifyToken\"]\nGetPdfkitDescargar[\"GET /pdfkit/descargar&lt;br&gt;verifyToken\"]\nPostSave[\"POST /save\"]\nPostUpdate[\"POST /update\"]\nSelectAll[\"SELECT * FROM productos\"]\nSelectById[\"SELECT * FROM productos&lt;br&gt;WHERE ref = ?\"]\nDeleteById[\"DELETE FROM productos&lt;br&gt;WHERE ref = ?\"]\nInsert[\"INSERT INTO productos\"]\nUpdate[\"UPDATE productos\"]\nCrudSave[\"crud.save&lt;br&gt;src/controllers.js\"]\nCrudUpdate[\"crud.update&lt;br&gt;src/controllers.js\"]\nProductosTable[\"productos&lt;br&gt;ref, nombre, precio, stock\"]\n\nGetAdmin --&gt; SelectAll\nGetPdfAdmin --&gt; SelectAll\nGetPdfDescargar --&gt; SelectAll\nGetPdfkitDescargar --&gt; SelectAll\nGetEdit --&gt; SelectById\nGetDelete --&gt; DeleteById\nPostSave --&gt; CrudSave\nPostUpdate --&gt; CrudUpdate\nCrudSave --&gt; Insert\nCrudUpdate --&gt; Update\nSelectAll --&gt; ProductosTable\nSelectById --&gt; ProductosTable\nDeleteById --&gt; ProductosTable\nInsert --&gt; ProductosTable\nUpdate --&gt; ProductosTable\n\nsubgraph subGraph3 [\"productos Table\"]\n    ProductosTable\nend\n\nsubgraph Controllers [\"Controllers\"]\n    CrudSave\n    CrudUpdate\nend\n\nsubgraph subGraph1 [\"Database Queries\"]\n    SelectAll\n    SelectById\n    DeleteById\n    Insert\n    Update\nend\n\nsubgraph subGraph0 [\"HTTP Routes\"]\n    GetAdmin\n    GetPdfAdmin\n    GetEdit\n    GetDelete\n    GetPdfDescargar\n    GetPdfkitDescargar\n    PostSave\n    PostUpdate\nend</code></pre> <p>Sources:</p> <ul> <li>src/router.js L119-L134</li> <li>src/router.js L136-L151</li> <li>src/router.js L186-L196</li> <li>src/router.js L198-L208</li> <li>src/router.js L317-L353</li> <li>src/router.js L355-L396</li> <li>src/router.js L603-L604</li> </ul>"},{"location":"productos-Table.html#crud-operations","title":"CRUD Operations","text":""},{"location":"productos-Table.html#create-insert","title":"Create (INSERT)","text":"<p>Route: <code>POST /save</code> Handler: src/controllers.js</p> <ul> <li><code>crud.save</code> function Authentication: Public (no middleware specified)</li> </ul> <p>The creation operation is handled by the <code>crud.save</code> controller function, invoked when submitting the create form.</p> <pre><code>sequenceDiagram\n  participant User Browser\n  participant GET /create\n  participant create.ejs\n  participant POST /save\n  participant crud.save\n  participant productos Table\n  participant GET /admin\n\n  User Browser-&gt;&gt;GET /create: Navigate to create form\n  GET /create--&gt;&gt;User Browser: Display form (nombre, precio, stock)\n  User Browser-&gt;&gt;POST /save: Submit product data\n  POST /save-&gt;&gt;productos Table: INSERT INTO productos SET ?\n  productos Table--&gt;&gt;POST /save: Success\n  POST /save-&gt;&gt;GET /admin: Redirect to /admin\n  GET /admin--&gt;&gt;User Browser: Show updated product list</code></pre> <p>Sources:</p> <ul> <li>src/router.js L153-L155</li> <li>src/router.js L603</li> <li>src/controllers.js</li> </ul>"},{"location":"productos-Table.html#read-select","title":"Read (SELECT)","text":""},{"location":"productos-Table.html#read-all-products","title":"Read All Products","text":"<p>Route: <code>GET /admin</code> Query: <code>SELECT * FROM productos</code> Authentication: <code>verifyToken</code> middleware required</p> <pre><code>// src/router.js:121\ndb.query(\"SELECT * FROM productos\", (error, results) =&gt; {\n    if (error) {\n        throw error;\n    } else {\n        res.render(\"admin\", {\n            productos: results,\n            user: req.user,\n            login: true,\n            rol: req.user.rol,\n        });\n    }\n});\n</code></pre> <p>This query retrieves all products and passes them to the <code>admin.ejs</code> view for display in a table format.</p> <p>Sources:</p> <ul> <li>src/router.js L119-L134</li> </ul>"},{"location":"productos-Table.html#read-single-product-by-id","title":"Read Single Product by ID","text":"<p>Route: <code>GET /edit/:id</code> Query: <code>SELECT * FROM productos WHERE ref = ?</code> Authentication: None specified (publicly accessible)</p> <pre><code>// src/router.js:188\nconst ref = req.params.id;\ndb.query(\"SELECT * FROM productos WHERE ref = ?\", [ref], (error, results) =&gt; {\n    if (error) {\n        throw error;\n    } else {\n        res.render(\"edit\", { producto: results[0] });\n    }\n});\n</code></pre> <p>The <code>:id</code> parameter is the product's <code>ref</code> value. The query returns a single product (accessed as <code>results[0]</code>) for editing.</p> <p>Sources:</p> <ul> <li>src/router.js L186-L196</li> </ul>"},{"location":"productos-Table.html#update-update","title":"Update (UPDATE)","text":"<p>Route: <code>POST /update</code> Handler: src/controllers.js</p> <ul> <li><code>crud.update</code> function Authentication: None specified</li> </ul> <p>The update operation is handled by the <code>crud.update</code> controller function, invoked when submitting the edit form.</p> <pre><code>sequenceDiagram\n  participant User Browser\n  participant GET /edit/:id\n  participant edit.ejs\n  participant POST /update\n  participant crud.update\n  participant productos Table\n  participant GET /admin\n\n  User Browser-&gt;&gt;GET /edit/:id: Navigate with product ref\n  GET /edit/:id-&gt;&gt;productos Table: SELECT WHERE ref = ?\n  productos Table--&gt;&gt;GET /edit/:id: Return product data\n  GET /edit/:id--&gt;&gt;User Browser: Display pre-filled form\n  User Browser-&gt;&gt;POST /update: Submit updated data\n  POST /update-&gt;&gt;productos Table: UPDATE productos\n  productos Table--&gt;&gt;POST /update: SET ... WHERE ref = ?\n  POST /update-&gt;&gt;GET /admin: Success\n  GET /admin--&gt;&gt;User Browser: Redirect to /admin</code></pre> <p>Sources:</p> <ul> <li>src/router.js L186-L196</li> <li>src/router.js L604</li> <li>src/controllers.js</li> </ul>"},{"location":"productos-Table.html#delete-delete","title":"Delete (DELETE)","text":"<p>Route: <code>GET /delete/:id</code> Query: <code>DELETE FROM productos WHERE ref = ?</code> Authentication: None specified (publicly accessible)</p> <pre><code>// src/router.js:200\nconst ref = req.params.id;\ndb.query(\"DELETE FROM productos WHERE ref = ?\", [ref], (error, results) =&gt; {\n    if (error) {\n        throw error;\n    } else {\n        res.redirect(\"/admin\");\n    }\n});\n</code></pre> <p>This route performs a hard delete, permanently removing the product from the database. After successful deletion, the user is redirected to the admin page.</p> <p>Sources:</p> <ul> <li>src/router.js L198-L208</li> </ul>"},{"location":"productos-Table.html#pdf-generation-usage","title":"PDF Generation Usage","text":"<p>The <code>productos</code> table is queried for PDF report generation through two different approaches:</p>"},{"location":"productos-Table.html#puppeteer-based-pdf","title":"Puppeteer-based PDF","text":"<p>Route: <code>GET /pdf/descargar</code> Authentication: <code>verifyToken</code> middleware required</p> <pre><code>// src/router.js:318-326\ndb.query(\"SELECT * FROM productos\", async (error, results) =&gt; {\n    if (error) {\n        return res.status(500).send(\"Error al obtener productos\");\n    }\n\n    const html = await ejs.renderFile(\n        path.join(__dirname, \"../views/pdfTabla.ejs\"), \n        { productos: results }\n    );\n    // ... Puppeteer renders HTML to PDF\n});\n</code></pre> <p>This approach:</p> <ol> <li>Fetches all products from the database</li> <li>Renders the <code>pdfTabla.ejs</code> template with product data</li> <li>Uses Puppeteer to convert the HTML to PDF format</li> <li>Sends the PDF as a downloadable file named \"productos.pdf\"</li> </ol> <p>Sources:</p> <ul> <li>src/router.js L317-L353</li> </ul>"},{"location":"productos-Table.html#pdfkit-based-pdf","title":"PDFKit-based PDF","text":"<p>Route: <code>GET /pdfkit/descargar</code> Authentication: <code>verifyToken</code> middleware required</p> <pre><code>// src/router.js:356-395\ndb.query(\"SELECT * FROM productos\", (error, results) =&gt; {\n    if (error) {\n        return res.status(500).send(\"Error al obtener productos\");\n    }\n\n    const doc = new PDFDocument({ margin: 40, size: 'A4' });\n    // ... Programmatically build PDF with product data\n\n    results.forEach((p) =&gt; {\n        doc.text(p.ref.toString(), 50, y);\n        doc.text(p.nombre, 150, y);\n        doc.text(Number(p.precio).toFixed(2), 300, y);\n        doc.text(p.stock.toString(), 380, y);\n        y += 20;\n    });\n});\n</code></pre> <p>This approach:</p> <ol> <li>Fetches all products from the database</li> <li>Programmatically generates a PDF using PDFKit library</li> <li>Formats product data (ref, nombre, precio, stock) in a table layout</li> <li>Sends the PDF as \"productos_desde_cero.pdf\"</li> </ol> <p>Sources:</p> <ul> <li>src/router.js L355-L396</li> </ul>"},{"location":"productos-Table.html#data-flow-architecture","title":"Data Flow Architecture","text":"<p>Sources:</p> <ul> <li>src/router.js L119-L134</li> <li>src/router.js L153-L155</li> <li>src/router.js L186-L196</li> <li>src/router.js L198-L208</li> <li>src/router.js L317-L353</li> <li>src/router.js L355-L396</li> <li>src/router.js L603-L604</li> </ul>"},{"location":"productos-Table.html#security-considerations","title":"Security Considerations","text":""},{"location":"productos-Table.html#authentication-requirements","title":"Authentication Requirements","text":"Route Middleware Access Level <code>GET /admin</code> <code>verifyToken</code> Authenticated users only <code>GET /pdfAdmin</code> <code>verifyToken</code> Authenticated users only <code>GET /create</code> None Public <code>GET /edit/:id</code> None Public <code>GET /delete/:id</code> None Public <code>POST /save</code> None Public <code>POST /update</code> None Public <code>GET /pdf/descargar</code> <code>verifyToken</code> Authenticated users only <code>GET /pdfkit/descargar</code> <code>verifyToken</code> Authenticated users only <p>Security Note: Several product management routes lack authentication middleware, making them publicly accessible. This represents a potential security vulnerability where unauthenticated users can:</p> <ul> <li>View the create product form</li> <li>View the edit form for any product</li> <li>Create new products</li> <li>Update existing products</li> <li>Delete products</li> </ul> <p>In a production environment, routes for product creation, editing, and deletion should be protected with <code>verifyToken</code> and <code>verifyAdmin</code> middleware to restrict access to authenticated administrators only.</p> <p>Sources:</p> <ul> <li>src/router.js L119-L134</li> <li>src/router.js L153-L155</li> <li>src/router.js L186-L196</li> <li>src/router.js L198-L208</li> <li>src/router.js L603-L604</li> </ul>"},{"location":"productos-Table.html#sql-query-reference","title":"SQL Query Reference","text":""},{"location":"productos-Table.html#complete-query-list","title":"Complete Query List","text":"Query Type SQL Statement Location Select All <code>SELECT * FROM productos</code> src/router.js L121 Select All (PDF) <code>SELECT * FROM productos</code> src/router.js L138 Select All (PDF Download) <code>SELECT * FROM productos</code> src/router.js L318 Select All (PDFKit) <code>SELECT * FROM productos</code> src/router.js L356 Select By ID <code>SELECT * FROM productos WHERE ref = ?</code> src/router.js L188 Delete By ID <code>DELETE FROM productos WHERE ref = ?</code> src/router.js L200 Insert Handled by <code>crud.save</code> controller src/controllers.js Update Handled by <code>crud.update</code> controller src/controllers.js <p>Sources:</p> <ul> <li>src/router.js L121</li> <li>src/router.js L138</li> <li>src/router.js L188</li> <li>src/router.js L200</li> <li>src/router.js L318</li> <li>src/router.js L356</li> <li>src/controllers.js</li> </ul>"},{"location":"productos-Table.html#related-database-components","title":"Related Database Components","text":"<p>The <code>productos</code> table operates independently without foreign key relationships to other tables in the system. It is part of a three-table schema:</p> <ul> <li>usuarios - Stores user authentication and profile data (see usuarios Table)</li> <li>productos - Stores product inventory data (this page)</li> <li>mensajes - Stores chat messages with foreign keys to usuarios (see mensajes Table)</li> </ul> <p>The separation of products from users reflects the application's dual purpose: user session management and product inventory management.</p> <p>Sources:</p> <ul> <li>src/router.js L121-L134</li> <li>proyecto.zip</li> </ul>"},{"location":"usuarios-Table.html","title":"usuarios Table","text":"<p>Relevant source files * proyecto.zip * src/router.js</p>"},{"location":"usuarios-Table.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the structure, purpose, and usage of the <code>usuarios</code> table in the MySQL database. The <code>usuarios</code> table is the authoritative source for user authentication credentials, role-based access control, and user profile information. It serves as the foundation for the authentication system and is referenced throughout the application for login, registration, authorization, and user identification.</p> <p>For information about the complete database architecture, see Database Schema. For details on authentication flows that use this table, see Authentication &amp; Authorization.</p>"},{"location":"usuarios-Table.html#table-overview","title":"Table Overview","text":"<p>The <code>usuarios</code> table stores all registered user accounts in the system. Each record represents a unique user and contains their authentication credentials, role assignment, display name, and optional profile image reference. The table supports two user roles: <code>admin</code> and <code>user</code>, which determine access permissions throughout the application.</p> <p>Primary Functions:</p> <ul> <li>Store user credentials for authentication</li> <li>Maintain role assignments for authorization</li> <li>Store user profile information (name, profile image)</li> <li>Serve as the primary key reference for the <code>mensajes</code> table</li> </ul> <p>Sources:</p> <ul> <li>src/router.js L456-L465</li> <li>src/router.js L537-L556</li> </ul>"},{"location":"usuarios-Table.html#schema-definition","title":"Schema Definition","text":"<p>The <code>usuarios</code> table contains the following columns:</p> Column Name Data Type Constraints Description <code>usuario</code> VARCHAR PRIMARY KEY, NOT NULL Unique username identifier. Used as the primary authentication identifier and as the key for JWT tokens. <code>nombre</code> VARCHAR NOT NULL User's display name. Stored during registration and included in JWT payload for display purposes. <code>rol</code> VARCHAR/ENUM NOT NULL User role, either <code>'admin'</code> or <code>'user'</code>. Determines access permissions throughout the application. <code>pass</code> VARCHAR NOT NULL bcrypt-hashed password. Stored with a salt factor of 8. Never returned in queries to clients. <code>imagen</code> VARCHAR NULL Filename of user's profile image stored in <code>public/resources/uploads/</code>. Optional field that may be NULL if no image uploaded."},{"location":"usuarios-Table.html#column-details","title":"Column Details","text":""},{"location":"usuarios-Table.html#usuario-primary-key","title":"usuario (Primary Key)","text":"<ul> <li>Acts as the unique identifier for users across the system</li> <li>Must be at least 4 characters during registration validation</li> <li>Used in JWT tokens as the <code>user</code> field</li> <li>Referenced by foreign keys in the <code>mensajes</code> table for <code>de_usuario</code> and <code>para_usuario</code> columns</li> </ul>"},{"location":"usuarios-Table.html#nombre","title":"nombre","text":"<ul> <li>Display name shown in the UI</li> <li>Included in JWT payload as <code>name</code> field</li> <li>Must be at least 4 characters during registration validation</li> <li>Displayed in headers, chat interfaces, and admin panels</li> </ul>"},{"location":"usuarios-Table.html#rol","title":"rol","text":"<ul> <li>Determines authorization level via <code>verifyAdmin</code> middleware</li> <li>Two valid values: <code>'admin'</code> and <code>'user'</code></li> <li>Admin users have access to product management, support chat monitoring, and administrative APIs</li> <li>Regular users have access to their own profile and support chat features</li> </ul>"},{"location":"usuarios-Table.html#pass","title":"pass","text":"<ul> <li>Stored as a bcrypt hash with salt factor of 8</li> <li>Never transmitted to client or included in JWT tokens</li> <li>Compared using <code>bcrypt.compare()</code> during authentication</li> <li>Hash generated during registration using <code>bcrypt.hash(pass, 8)</code></li> </ul>"},{"location":"usuarios-Table.html#imagen","title":"imagen","text":"<ul> <li>Stores only the filename, not the full path</li> <li>Full path is <code>public/resources/uploads/{imagen}</code></li> <li>Uploaded via multer middleware during registration</li> <li>Included in JWT payload and displayed in UI headers</li> </ul> <p>Sources:</p> <ul> <li>src/router.js L414-L484</li> <li>src/router.js L532-L601</li> </ul>"},{"location":"usuarios-Table.html#entity-relationship-diagram","title":"Entity-Relationship Diagram","text":"<pre><code>#mermaid-dsy4fbyhham{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-dsy4fbyhham .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-dsy4fbyhham .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-dsy4fbyhham .error-icon{fill:#dddddd;}#mermaid-dsy4fbyhham .error-text{fill:#222222;stroke:#222222;}#mermaid-dsy4fbyhham .edge-thickness-normal{stroke-width:1px;}#mermaid-dsy4fbyhham .edge-thickness-thick{stroke-width:3.5px;}#mermaid-dsy4fbyhham .edge-pattern-solid{stroke-dasharray:0;}#mermaid-dsy4fbyhham .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-dsy4fbyhham .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-dsy4fbyhham .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-dsy4fbyhham .marker{fill:#999;stroke:#999;}#mermaid-dsy4fbyhham .marker.cross{stroke:#999;}#mermaid-dsy4fbyhham svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-dsy4fbyhham p{margin:0;}#mermaid-dsy4fbyhham .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-dsy4fbyhham .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-dsy4fbyhham .relationshipLabelBox rect{opacity:0.5;}#mermaid-dsy4fbyhham .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-dsy4fbyhham .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-dsy4fbyhham .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-dsy4fbyhham .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-dsy4fbyhham .node rect,#mermaid-dsy4fbyhham .node circle,#mermaid-dsy4fbyhham .node ellipse,#mermaid-dsy4fbyhham .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-dsy4fbyhham .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-dsy4fbyhham .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-dsy4fbyhham :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}de_usuario (sender)para_usuario (recipient)usuariosVARCHARusuarioPKUsername (Primary Key)VARCHARnombreDisplay nameVARCHARroladmin or userVARCHARpassbcrypt hashVARCHARimagenProfile image filenamemensajesVARCHARde_usuarioFKVARCHARpara_usuarioFKTEXTmensajeDATETIMEfecha\n</code></pre> <p>Diagram: usuarios Table Relationships</p> <p>The <code>usuarios</code> table has a one-to-many relationship with the <code>mensajes</code> table through two foreign key columns:</p> <ul> <li><code>mensajes.de_usuario</code> references <code>usuarios.usuario</code> (message sender)</li> <li><code>mensajes.para_usuario</code> references <code>usuarios.usuario</code> (message recipient)</li> </ul> <p>This design allows tracking of all messages sent and received by each user.</p> <p>Sources:</p> <ul> <li>src/router.js L236-L253</li> <li>src/router.js L263-L280</li> <li>src/router.js L292-L315</li> </ul>"},{"location":"usuarios-Table.html#data-operations","title":"Data Operations","text":""},{"location":"usuarios-Table.html#registration-flow","title":"Registration Flow","text":"<pre><code>flowchart TD\n\nRegForm[\"POST /register&lt;br&gt;Registration Form\"]\nValidation[\"express-validator&lt;br&gt;Validate Input\"]\nFileUpload[\"multer middleware&lt;br&gt;Upload profile image\"]\nHash[\"bcrypt.hash(pass, 8)&lt;br&gt;Hash Password\"]\nInsert[\"INSERT INTO usuarios&lt;br&gt;usuario, nombre, rol,&lt;br&gt;pass, imagen\"]\nSuccess[\"Registration Success&lt;br&gt;Redirect to Login\"]\nErrorPage[\"Re-render register.ejs&lt;br&gt;with errors\"]\n\nRegForm --&gt; Validation\nValidation --&gt; FileUpload\nFileUpload --&gt; Hash\nHash --&gt; Insert\nInsert --&gt; Success\nValidation --&gt; ErrorPage</code></pre> <p>Diagram: User Registration Data Flow</p> <p>During registration, the following INSERT statement is executed:</p> <pre><code>INSERT INTO usuarios SET ?\n</code></pre> <p>With values:</p> <ul> <li><code>usuario</code>: req.body.user (validated, minimum 4 characters)</li> <li><code>nombre</code>: req.body.name (validated, minimum 4 characters)</li> <li><code>rol</code>: req.body.rol (from form selection)</li> <li><code>pass</code>: bcrypt hash of req.body.pass</li> <li><code>imagen</code>: req.file.filename (if uploaded) or NULL</li> </ul> <p>Sources:</p> <ul> <li>src/router.js L414-L484</li> <li>src/router.js L446-L453</li> <li>src/router.js L456-L481</li> </ul>"},{"location":"usuarios-Table.html#authentication-flow","title":"Authentication Flow","text":"<pre><code>flowchart TD\n\nLoginForm[\"POST /auth&lt;br&gt;Login Request\"]\nRateLimit[\"authLimiter&lt;br&gt;Rate Limiting\"]\nQuery[\"SELECT * FROM usuarios&lt;br&gt;WHERE usuario = ?\"]\nUserExists[\"User Exists?\"]\nLoginFail[\"Return Error&lt;br&gt;Incorrect credentials\"]\nComparePass[\"bcrypt.compare()&lt;br&gt;Verify Password\"]\nBuildPayload[\"Build JWT Payload&lt;br&gt;user, name, rol, imagen\"]\nSignJWT[\"jwt.sign(payload)&lt;br&gt;Create Token\"]\nSetCookie[\"Set HTTP-only Cookie&lt;br&gt;token = JWT\"]\nSuccess[\"Login Success&lt;br&gt;Redirect to /\"]\n\nLoginForm --&gt; RateLimit\nRateLimit --&gt; Query\nQuery --&gt; UserExists\nUserExists --&gt; LoginFail\nUserExists --&gt; ComparePass\nComparePass --&gt; LoginFail\nComparePass --&gt; BuildPayload\nBuildPayload --&gt; SignJWT\nSignJWT --&gt; SetCookie\nSetCookie --&gt; Success</code></pre> <p>Diagram: Authentication Query Flow</p> <p>The authentication query retrieves the complete user record:</p> <pre><code>SELECT * FROM usuarios WHERE usuario = ?\n</code></pre> <p>The result is used to:</p> <ol> <li>Verify password with <code>bcrypt.compare(pass, results[0].pass)</code></li> <li>Build JWT payload with <code>usuario</code>, <code>nombre</code>, <code>rol</code>, <code>imagen</code></li> <li>Generate signed token valid for 1 hour</li> </ol> <p>Sources:</p> <ul> <li>src/router.js L532-L601</li> <li>src/router.js L537-L556</li> <li>src/router.js L559-L574</li> </ul>"},{"location":"usuarios-Table.html#authorization-queries","title":"Authorization Queries","text":"<pre><code>flowchart TD\n\nRequest[\"HTTP Request with&lt;br&gt;JWT Cookie\"]\nVerifyToken[\"verifyToken middleware&lt;br&gt;Decode JWT\"]\nAttachUser[\"Attach req.user&lt;br&gt;user, name, rol, imagen\"]\nCheckRole[\"Role Check?\"]\nVerifyAdmin[\"verifyAdmin middleware&lt;br&gt;Check rol === 'admin'\"]\nHandler[\"Route Handler\"]\nReject[\"403 Forbidden\"]\n\nRequest --&gt; VerifyToken\nVerifyToken --&gt; AttachUser\nAttachUser --&gt; CheckRole\nCheckRole --&gt; VerifyAdmin\nCheckRole --&gt; Handler\nVerifyAdmin --&gt; Reject\nVerifyAdmin --&gt; Handler</code></pre> <p>Diagram: Authorization Using usuarios Data</p> <p>Authorization does not query the database on each request. Instead, the <code>rol</code> field from the <code>usuarios</code> table is:</p> <ol> <li>Encoded into the JWT during login</li> <li>Decoded by <code>verifyToken</code> middleware</li> <li>Checked by <code>verifyAdmin</code> middleware for admin-only routes</li> </ol> <p>Admin User Identification Query:</p> <p>Several queries identify admin users for features like the support chat system:</p> <pre><code>SELECT usuario FROM usuarios WHERE rol = 'admin'\n</code></pre> <p>This is used in the admin conversation list to exclude admin users from the user list:</p> <pre><code>WHERE usuario NOT IN (SELECT usuario FROM usuarios WHERE rol = 'admin')\n</code></pre> <p>Sources:</p> <ul> <li>src/router.js L292-L315</li> <li>src/middlewares/verifyToken.js</li> <li>src/middlewares/verifyAdmin.js</li> </ul>"},{"location":"usuarios-Table.html#usage-patterns","title":"Usage Patterns","text":""},{"location":"usuarios-Table.html#jwt-payload-structure","title":"JWT Payload Structure","text":"<p>When a user successfully authenticates, data from the <code>usuarios</code> table populates the JWT payload:</p> <pre><code>const payload = {\n    user: results[0].usuario,      // from usuarios.usuario\n    name: results[0].nombre,       // from usuarios.nombre\n    rol: results[0].rol,           // from usuarios.rol\n    imagen: results[0].imagen      // from usuarios.imagen\n};\n</code></pre> <p>This payload is:</p> <ul> <li>Signed with <code>JWT_SECRET</code></li> <li>Stored in an HTTP-only cookie named <code>token</code></li> <li>Valid for 1 hour (<code>expiresIn: \"1h\"</code>)</li> <li>Decoded by <code>verifyToken</code> middleware on subsequent requests</li> </ul> <p>Sources:</p> <ul> <li>src/router.js L559-L567</li> <li>src/router.js L570-L574</li> </ul>"},{"location":"usuarios-Table.html#profile-image-storage","title":"Profile Image Storage","text":"<p>Profile images are stored using a two-part approach:</p> <ol> <li>File System: Actual image file in <code>public/resources/uploads/</code></li> <li>Database: Filename only in <code>usuarios.imagen</code></li> </ol> <p>During registration with file upload:</p> <ul> <li>Multer saves file to <code>public/resources/uploads/</code> with generated filename</li> <li>Filename (not path) stored in <code>usuarios.imagen</code> column</li> <li>Retrieved filename used to construct image URL in views</li> </ul> <p>Sources:</p> <ul> <li>src/router.js L414</li> <li>src/router.js L450</li> <li>src/router.js L463</li> </ul>"},{"location":"usuarios-Table.html#role-based-access-control","title":"Role-Based Access Control","text":"<p>The <code>rol</code> column drives all authorization decisions:</p> <p>Admin-Only Routes:</p> <ul> <li><code>/admin</code> - Product management dashboard</li> <li><code>/api/mensajes?con=usuario</code> - View any user's messages</li> <li><code>/api/usuarios-conversaciones</code> - List all conversations</li> </ul> <p>User Routes:</p> <ul> <li><code>/soporte</code> - Support chat interface</li> <li><code>/api/mensajes/mios</code> - View own messages only</li> </ul> <p>Verification Pattern:</p> <pre><code>HTTP Request \u2192 verifyToken \u2192 (if admin required) \u2192 verifyAdmin \u2192 Route Handler\n</code></pre> <p>The middleware stack checks <code>req.user.rol === 'admin'</code> for admin routes.</p> <p>Sources:</p> <ul> <li>src/router.js L119-L134</li> <li>src/router.js L229-L253</li> <li>src/router.js L283-L315</li> </ul>"},{"location":"usuarios-Table.html#security-considerations","title":"Security Considerations","text":""},{"location":"usuarios-Table.html#password-hashing","title":"Password Hashing","text":"<p>All passwords are hashed using bcrypt with a salt factor of 8 before storage:</p> <pre><code>const passwordHash = await bcrypt.hash(pass, 8);\n</code></pre> <p>The hash:</p> <ul> <li>Is one-way (cannot be reversed to plaintext)</li> <li>Includes salt to prevent rainbow table attacks</li> <li>Is verified using <code>bcrypt.compare()</code> which handles salt extraction</li> </ul> <p>The plaintext password is never stored or transmitted after hashing.</p> <p>Sources:</p> <ul> <li>src/router.js L453</li> <li>src/router.js L541-L543</li> </ul>"},{"location":"usuarios-Table.html#sql-injection-prevention","title":"SQL Injection Prevention","text":"<p>All queries use parameterized statements with placeholders (<code>?</code>):</p> <pre><code>SELECT * FROM usuarios WHERE usuario = ?\nINSERT INTO usuarios SET ?\n</code></pre> <p>The database driver handles escaping, preventing SQL injection attacks.</p> <p>Sources:</p> <ul> <li>src/router.js L537-L556</li> <li>src/router.js L456-L481</li> </ul>"},{"location":"usuarios-Table.html#credential-validation","title":"Credential Validation","text":"<p>Registration enforces minimum security requirements via <code>express-validator</code>:</p> <ul> <li>Username: Minimum 4 characters</li> <li>Name: Minimum 4 characters</li> <li>Password: Minimum 4 characters</li> <li>Email: Valid email format validation</li> </ul> <p>Sources:</p> <ul> <li>src/router.js L416-L427</li> </ul>"},{"location":"usuarios-Table.html#rate-limiting","title":"Rate Limiting","text":"<p>The <code>/auth</code> endpoint uses <code>authLimiter</code> middleware to prevent brute-force attacks. This limits authentication attempts per IP address.</p> <p>Sources:</p> <ul> <li>src/router.js L532</li> </ul>"},{"location":"usuarios-Table.html#related-tables","title":"Related Tables","text":""},{"location":"usuarios-Table.html#mensajes-table","title":"mensajes Table","text":"<p>The <code>mensajes</code> table references <code>usuarios</code> through two foreign keys:</p> <ul> <li><code>de_usuario</code> (sender): References <code>usuarios.usuario</code></li> <li><code>para_usuario</code> (recipient): References <code>usuarios.usuario</code></li> </ul> <p>For complete details on message storage and retrieval, see mensajes Table.</p>"},{"location":"usuarios-Table.html#productos-table","title":"productos Table","text":"<p>The <code>productos</code> table is not directly related to <code>usuarios</code> but admin access is controlled by the <code>usuarios.rol</code> field. Only users with <code>rol = 'admin'</code> can create, update, or delete products.</p> <p>For product management details, see productos Table.</p> <p>Sources:</p> <ul> <li>src/router.js L236-L253</li> <li>src/router.js L292-L315</li> </ul>"},{"location":"usuarios-Table.html#database-connection","title":"Database Connection","text":"<p>The <code>usuarios</code> table is accessed through the MySQL connection pool configured in <code>database/db.js</code>. All queries use this connection:</p> <pre><code>const db = require(\"../database/db\");\ndb.query(\"SELECT * FROM usuarios WHERE usuario = ?\", [user], callback);\n</code></pre> <p>Sources:</p> <ul> <li>src/router.js L5</li> <li>database/db.js</li> </ul>"},{"location":"verifyAdmin-Middleware.html","title":"verifyAdmin Middleware","text":"<p>Relevant source files * src/middlewares/verifyAdmin.js * src/router.js</p>"},{"location":"verifyAdmin-Middleware.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>The <code>verifyAdmin</code> middleware provides role-based authorization for administrative routes and API endpoints. It ensures that only authenticated users with the <code>admin</code> role can access protected resources. This middleware builds upon JWT token validation to enforce administrative access control.</p> <p>For general authentication without role requirements, see verifyToken Middleware. For the complete authentication system architecture, see Authentication &amp; Authorization.</p> <p>Sources: src/middlewares/verifyAdmin.js L1-L45</p>"},{"location":"verifyAdmin-Middleware.html#middleware-function-overview","title":"Middleware Function Overview","text":"<p>The <code>verifyAdmin</code> middleware is implemented in src/middlewares/verifyAdmin.js L24-L42</p> <p>as a single exported function. It performs two critical checks:</p> <ol> <li>Authentication Check: Validates the JWT token from the request cookies</li> <li>Authorization Check: Verifies that the authenticated user has the <code>admin</code> role</li> </ol> <p>The middleware follows the standard Express middleware signature <code>(req, res, next)</code> and either passes control to the next handler or returns an HTTP 403 error response.</p> <p>Sources: src/middlewares/verifyAdmin.js L1-L45</p>"},{"location":"verifyAdmin-Middleware.html#middleware-execution-flow","title":"Middleware Execution Flow","text":"<pre><code>flowchart TD\n\nStart[\"Request reaches verifyAdmin middleware\"]\nExtractToken[\"Extract token from req.cookies.token\"]\nCheckToken[\"Token exists?\"]\nReturn403A[\"Return 403: Acceso denegado\"]\nVerifyJWT[\"jwt.verify(token, JWT_SECRET)\"]\nTryBlock[\"Verification result\"]\nCatchBlock[\"Catch block: Token invalid\"]\nCheckRole[\"Check decoded.rol\"]\nReturn403B[\"Return 403: Token inv\u00e1lido\"]\nRoleMatch[\"decoded.rol === 'admin'?\"]\nReturn403C[\"Return 403: Acceso solo para administradores\"]\nSetUser[\"Set req.user = decoded\"]\nCallNext[\"Call next()\"]\nEnd[\"Continue to route handler\"]\n\nStart --&gt; ExtractToken\nExtractToken --&gt; CheckToken\nCheckToken --&gt; Return403A\nCheckToken --&gt; VerifyJWT\nVerifyJWT --&gt; TryBlock\nTryBlock --&gt; CatchBlock\nTryBlock --&gt; CheckRole\nCatchBlock --&gt; Return403B\nCheckRole --&gt; RoleMatch\nRoleMatch --&gt; Return403C\nRoleMatch --&gt; SetUser\nSetUser --&gt; CallNext\nReturn403A --&gt; End\nReturn403B --&gt; End\nReturn403C --&gt; End\nCallNext --&gt; End</code></pre> <p>Diagram: verifyAdmin Middleware Execution Flow</p> <p>This diagram shows the complete decision tree executed by the <code>verifyAdmin</code> function, with three distinct failure paths and one success path.</p> <p>Sources: src/middlewares/verifyAdmin.js L24-L42</p>"},{"location":"verifyAdmin-Middleware.html#token-extraction-and-verification","title":"Token Extraction and Verification","text":"<p>The middleware accesses the JWT token from the HTTP-only cookie named <code>token</code>:</p> <pre><code>const token = req.cookies.token;\n</code></pre> <p>Token Source: The token is extracted from src/middlewares/verifyAdmin.js L25</p> <p>relying on the <code>cookie-parser</code> middleware to populate <code>req.cookies</code>.</p> <p>Verification Process: The token is verified using src/middlewares/verifyAdmin.js L32</p> <p>:</p> <ul> <li>Uses <code>jwt.verify()</code> from the <code>jsonwebtoken</code> library</li> <li>Validates against <code>process.env.JWT_SECRET</code> from environment configuration</li> <li>Decodes the payload containing user information (<code>user</code>, <code>name</code>, <code>rol</code>, <code>imagen</code>)</li> <li>Throws an exception if the token is expired, malformed, or has an invalid signature</li> </ul> <p>Sources: src/middlewares/verifyAdmin.js L24-L42</p>"},{"location":"verifyAdmin-Middleware.html#role-based-authorization-check","title":"Role-Based Authorization Check","text":"<p>After successful token verification, the middleware performs role validation:</p> Step Code Location Logic Outcome Extract role src/middlewares/verifyAdmin.js L33 <code>decoded.rol</code> String value: <code>\"admin\"</code> or <code>\"user\"</code> Compare role src/middlewares/verifyAdmin.js L33 <code>decoded.rol !== \"admin\"</code> Boolean check Authorize src/middlewares/verifyAdmin.js L34 If true, return 403 error Access denied Grant access src/middlewares/verifyAdmin.js L36-L37 If false, attach user and continue Handler executes <p>The <code>rol</code> field in the decoded JWT payload must exactly match the string <code>\"admin\"</code>. Any other value, including <code>\"user\"</code>, results in authorization failure.</p> <p>Sources: src/middlewares/verifyAdmin.js L33-L37</p>"},{"location":"verifyAdmin-Middleware.html#application-routes-protected-by-verifyadmin","title":"Application Routes Protected by verifyAdmin","text":"<pre><code>flowchart TD\n\nRouter[\"Express Router\"]\nRoute1[\"GET /api/mensajes&lt;br&gt;Line 229\"]\nRoute2[\"GET /api/usuarios-conversaciones&lt;br&gt;Line 283\"]\nVerifyAdminMW[\"verifyAdmin&lt;br&gt;src/middlewares/verifyAdmin.js\"]\nHandler1[\"Query messages for specific user&lt;br&gt;Used by admin chat interface\"]\nHandler2[\"List all users with conversations&lt;br&gt;Admin conversation list\"]\n\nRouter --&gt; Route1\nRouter --&gt; Route2\nRoute1 --&gt; VerifyAdminMW\nRoute2 --&gt; VerifyAdminMW\nVerifyAdminMW --&gt; Handler1\nVerifyAdminMW --&gt; Handler2\n\nsubgraph subGraph3 [\"Route Handlers\"]\n    Handler1\n    Handler2\nend\n\nsubgraph subGraph2 [\"verifyAdmin Middleware\"]\n    VerifyAdminMW\nend\n\nsubgraph subGraph1 [\"verifyAdmin Protected Routes\"]\n    Route1\n    Route2\nend\n\nsubgraph subGraph0 [\"Router Layer - src/router.js\"]\n    Router\nend</code></pre> <p>Diagram: Routes Protected by verifyAdmin Middleware</p>"},{"location":"verifyAdmin-Middleware.html#protected-endpoints","title":"Protected Endpoints","text":"<p>1. GET /api/mensajes src/router.js L229</p> <ul> <li>Purpose: Retrieve message history for a specific user conversation</li> <li>Query Parameter: <code>?con=username</code> - specifies which user's conversation to retrieve</li> <li>Usage: Called by the admin chat interface to load conversation history when switching between users</li> <li>Middleware Chain: <code>verifyAdmin</code> \u2192 handler</li> </ul> <p>2. GET /api/usuarios-conversaciones src/router.js L283</p> <ul> <li>Purpose: List all non-admin users who have active conversations with administrators</li> <li>Returns: JSON array of usernames</li> <li>Usage: Populates the user list in the admin chat interface</li> <li>Middleware Chain: <code>verifyAdmin</code> \u2192 handler</li> </ul> <p>Both endpoints are essential for the administrative support chat functionality documented in Admin Chat Interface.</p> <p>Sources: src/router.js L17</p> <p>src/router.js L229-L253</p> <p>src/router.js L283-L315</p>"},{"location":"verifyAdmin-Middleware.html#error-response-specifications","title":"Error Response Specifications","text":"<p>The middleware returns HTTP 403 (Forbidden) responses with JSON error messages in three scenarios:</p>"},{"location":"verifyAdmin-Middleware.html#error-response-matrix","title":"Error Response Matrix","text":"Condition HTTP Status Response Body Code Location No token in cookies 403 <code>{ error: \"Acceso denegado\" }</code> src/middlewares/verifyAdmin.js L28 Invalid/expired token 403 <code>{ error: \"Token inv\u00e1lido\" }</code> src/middlewares/verifyAdmin.js L40 Valid token, non-admin role 403 <code>{ error: \"Acceso solo para administradores\" }</code> src/middlewares/verifyAdmin.js L34 <p>Console Logging: When token verification fails due to an exception, the error message is logged to the console via src/middlewares/verifyAdmin.js L39</p> <p>before the response is sent.</p> <p>HTTP Status Rationale: All error conditions return 403 (Forbidden) rather than 401 (Unauthorized) because:</p> <ul> <li>Missing tokens indicate denied access to a protected resource</li> <li>Invalid tokens suggest authentication cannot be verified</li> <li>Non-admin roles represent insufficient permissions for the resource</li> </ul> <p>Sources: src/middlewares/verifyAdmin.js L28-L41</p>"},{"location":"verifyAdmin-Middleware.html#middleware-registration-and-import","title":"Middleware Registration and Import","text":"<p>The middleware is imported into the router module:</p> <pre><code>const verifyAdmin = require(\"./middlewares/verifyAdmin\");\n</code></pre> <p>Import Location: src/router.js L17</p> <p>Module Export: The middleware function is exported as the default module export at src/middlewares/verifyAdmin.js L44</p> <p>Usage Pattern: Applied directly to route definitions as a middleware parameter:</p> <pre><code>router.get(\"/api/mensajes\", verifyAdmin, (req, res) =&gt; { ... });\n</code></pre> <p>Sources: src/router.js L17</p> <p>src/middlewares/verifyAdmin.js L44</p>"},{"location":"verifyAdmin-Middleware.html#comparison-with-verifytoken-middleware","title":"Comparison with verifyToken Middleware","text":"<pre><code>flowchart TD\n\nVT_Start[\"Check token exists\"]\nVT_Verify[\"Verify JWT\"]\nVT_Success[\"Set req.user&lt;br&gt;Call next()\"]\nVT_Fail[\"Return 401\"]\nVA_Start[\"Check token exists\"]\nVA_Verify[\"Verify JWT\"]\nVA_CheckRole[\"Check rol === 'admin'\"]\nVA_Success[\"Set req.user&lt;br&gt;Call next()\"]\nVA_Fail403[\"Return 403&lt;br&gt;Admin only\"]\nVA_FailInvalid[\"Return 403&lt;br&gt;Invalid token\"]\nRequest[\"Incoming Request\"]\nChoice[\"Route requires&lt;br&gt;admin access?\"]\n\nRequest --&gt; Choice\nChoice --&gt; VT_Start\nChoice --&gt; VA_Start\n\nsubgraph subGraph1 [\"verifyAdmin Middleware\"]\n    VA_Start\n    VA_Verify\n    VA_CheckRole\n    VA_Success\n    VA_Fail403\n    VA_FailInvalid\n    VA_Start --&gt; VA_Verify\n    VA_Verify --&gt; VA_CheckRole\n    VA_CheckRole --&gt; VA_Success\n    VA_CheckRole --&gt; VA_Fail403\n    VA_Verify --&gt; VA_FailInvalid\nend\n\nsubgraph subGraph0 [\"verifyToken Middleware\"]\n    VT_Start\n    VT_Verify\n    VT_Success\n    VT_Fail\n    VT_Start --&gt; VT_Verify\n    VT_Verify --&gt; VT_Success\n    VT_Verify --&gt; VT_Fail\nend</code></pre> <p>Diagram: Comparison of verifyToken and verifyAdmin Middleware</p>"},{"location":"verifyAdmin-Middleware.html#key-differences","title":"Key Differences","text":"Aspect verifyToken verifyAdmin Purpose Authenticate any logged-in user Authenticate and authorize admin users Role Check None Required: <code>decoded.rol === \"admin\"</code> Error Status 401 Unauthorized 403 Forbidden Usage Count Multiple routes (/admin, /soporte) Two API endpoints only File Location <code>src/middlewares/verifyToken.js</code> <code>src/middlewares/verifyAdmin.js</code> Standalone Use Yes Yes (includes token verification)"},{"location":"verifyAdmin-Middleware.html#middleware-composition","title":"Middleware Composition","text":"<p><code>verifyAdmin</code> does not depend on <code>verifyToken</code>. It implements its own complete token verification logic. Both middlewares can be used independently:</p> <ul> <li>verifyToken only: Used for routes like <code>/admin</code> src/router.js L119 <code>/soporte</code> src/router.js L220  and PDF generation endpoints</li> <li>verifyAdmin only: Used for admin-specific API endpoints src/router.js L229 src/router.js L283</li> </ul> <p>Design Note: The system does not chain these middlewares (e.g., <code>verifyToken, verifyAdmin</code>). The <code>verifyAdmin</code> middleware is self-contained with complete authentication and authorization logic.</p> <p>Sources: src/middlewares/verifyAdmin.js L1-L45</p> <p>src/router.js L119</p> <p>src/router.js L220</p> <p>src/router.js L229</p> <p>src/router.js L283</p>"},{"location":"verifyAdmin-Middleware.html#request-user-object-attachment","title":"Request User Object Attachment","text":"<p>Upon successful authorization, the middleware attaches the decoded JWT payload to the request object:</p> <pre><code>req.user = decoded;\n</code></pre> <p>Code Location: src/middlewares/verifyAdmin.js L36</p> <p>Payload Structure: The <code>req.user</code> object contains the following fields (set during token creation at src/router.js L559-L564</p> <p>):</p> Field Type Description Example <code>user</code> String Username from <code>usuarios.usuario</code> <code>\"admin1\"</code> <code>name</code> String Display name from <code>usuarios.nombre</code> <code>\"Administrator\"</code> <code>rol</code> String User role from <code>usuarios.rol</code> <code>\"admin\"</code> <code>imagen</code> String Profile image filename <code>\"profile123.jpg\"</code> <p>Downstream Access: Route handlers can access this user information via <code>req.user.user</code>, <code>req.user.rol</code>, etc., without additional database queries.</p> <p>Example Usage: In the <code>/api/mensajes</code> endpoint src/router.js L229-L253</p> <p>the admin's identity is available through <code>req.user</code> if needed for logging or audit purposes.</p> <p>Sources: src/middlewares/verifyAdmin.js L36</p> <p>src/router.js L559-L564</p>"},{"location":"verifyAdmin-Middleware.html#security-considerations","title":"Security Considerations","text":""},{"location":"verifyAdmin-Middleware.html#jwt-secret-protection","title":"JWT Secret Protection","text":"<p>The middleware verifies tokens using <code>process.env.JWT_SECRET</code> src/middlewares/verifyAdmin.js L32</p> <p>This secret must be:</p> <ul> <li>Stored securely in environment variables (never in code)</li> <li>Sufficiently long and random to prevent brute-force attacks</li> <li>Same secret used by token generation at src/router.js L567</li> </ul>"},{"location":"verifyAdmin-Middleware.html#cookie-security-attributes","title":"Cookie Security Attributes","text":"<p>The JWT token is stored in an HTTP-only cookie (set at src/router.js L570-L574</p> <p>):</p> <ul> <li><code>httpOnly: true</code> - Prevents client-side JavaScript access, mitigating XSS attacks</li> <li><code>secure: false</code> - Should be set to <code>true</code> in production with HTTPS</li> <li><code>maxAge: 3600000</code> - 1-hour expiration reduces exposure window</li> </ul>"},{"location":"verifyAdmin-Middleware.html#role-verification-timing","title":"Role Verification Timing","text":"<p>The role check occurs after token verification src/middlewares/verifyAdmin.js L33</p> <p>This ensures:</p> <ol> <li>Token signature is validated before processing payload</li> <li>Expired tokens are rejected before role checks</li> <li>Malicious clients cannot bypass verification by manipulating cookies</li> </ol>"},{"location":"verifyAdmin-Middleware.html#error-information-disclosure","title":"Error Information Disclosure","text":"<p>The middleware provides specific error messages:</p> <ul> <li><code>\"Acceso denegado\"</code> - Generic access denial</li> <li><code>\"Token inv\u00e1lido\"</code> - Indicates verification failure</li> <li><code>\"Acceso solo para administradores\"</code> - Reveals role requirement</li> </ul> <p>These messages aid legitimate users but may inform attackers about the authentication scheme. For higher security, consider using a single generic error message.</p> <p>Sources: src/middlewares/verifyAdmin.js L24-L42</p> <p>src/router.js L567</p> <p>src/router.js L570-L574</p>"},{"location":"verifyAdmin-Middleware.html#integration-with-admin-chat-system","title":"Integration with Admin Chat System","text":"<p>The <code>verifyAdmin</code> middleware is critical to the administrative support chat functionality:</p>"},{"location":"verifyAdmin-Middleware.html#admin-only-api-access","title":"Admin-Only API Access","text":"<pre><code>flowchart TD\n\nAdminUI[\"Admin Chat Interface&lt;br&gt;views/soporte.ejs&lt;br&gt;role=admin\"]\nLoadUsers[\"Fetch user list on load\"]\nSwitchConv[\"Switch conversation\"]\nAPI1[\"GET /api/usuarios-conversaciones&lt;br&gt;verifyAdmin protected\"]\nAPI2[\"GET /api/mensajes?con=user&lt;br&gt;verifyAdmin protected\"]\nVerifyAdmin1[\"verifyAdmin middleware\"]\nVerifyAdmin2[\"verifyAdmin middleware\"]\nDB1[\"Query mensajes + usuarios tables\"]\nDB2[\"Query mensajes table\"]\nReturn1[\"Return JSON array of usernames\"]\nReturn2[\"Return JSON array of messages\"]\nRender1[\"Populate user list in UI\"]\nRender2[\"Display conversation history\"]\n\nAdminUI --&gt; LoadUsers\nAdminUI --&gt; SwitchConv\nLoadUsers --&gt; API1\nSwitchConv --&gt; API2\nAPI1 --&gt; VerifyAdmin1\nAPI2 --&gt; VerifyAdmin2\nVerifyAdmin1 --&gt; DB1\nVerifyAdmin2 --&gt; DB2\nDB1 --&gt; Return1\nDB2 --&gt; Return2\nReturn1 --&gt; Render1\nReturn2 --&gt; Render2</code></pre> <p>Diagram: verifyAdmin Protection of Admin Chat APIs</p>"},{"location":"verifyAdmin-Middleware.html#endpoint-purposes","title":"Endpoint Purposes","text":"<ol> <li>User List Endpoint src/router.js L283-L315 : * Returns all non-admin users with message history * Enables admin to see which users need support * SQL query uses role filtering to exclude other admins</li> <li>Conversation History Endpoint src/router.js L229-L253 : * Requires <code>?con=username</code> query parameter * Returns bidirectional messages between admin and specified user * Sorted chronologically by <code>fecha</code> field</li> </ol>"},{"location":"verifyAdmin-Middleware.html#why-admin-only-access","title":"Why Admin-Only Access","text":"<p>These endpoints expose potentially sensitive information:</p> <ul> <li>List of all users engaging with support system</li> <li>Complete message history across all user conversations</li> <li>Patterns in support requests and response times</li> </ul> <p>Regular users access their own messages via <code>/api/mensajes/mios</code> src/router.js L256</p> <p>which is protected by <code>verifyToken</code> instead, limiting visibility to their own conversation only.</p> <p>Sources: src/router.js L229-L253</p> <p>src/router.js L256-L280</p> <p>src/router.js L283-L315</p>"},{"location":"verifyAdmin-Middleware.html#dependencies","title":"Dependencies","text":"<p>The <code>verifyAdmin</code> middleware requires the following npm packages:</p> Package Import Statement Usage Version Requirement <code>jsonwebtoken</code> src/middlewares/verifyAdmin.js L1 <code>jwt.verify()</code> for token validation Compatible with JWT signing in router <code>cookie-parser</code> (implicit) Via <code>req.cookies</code> Parses cookies from request headers Must be registered before this middleware <p>Environment Variables:</p> <ul> <li><code>JWT_SECRET</code> - Required for token verification. Must match the secret used for token signing.</li> </ul> <p>Express Middleware Dependencies: The middleware assumes the following Express middleware are already registered (in index.js</p> <p>):</p> <ol> <li><code>cookie-parser</code> - Populates <code>req.cookies</code></li> <li>JSON/urlencoded body parsers - Not directly used but part of request pipeline</li> </ol> <p>Sources: src/middlewares/verifyAdmin.js L1</p>"},{"location":"verifyToken-Middleware.html","title":"verifyToken Middleware","text":"<p>Relevant source files * src/middlewares/verifyToken.js * src/router.js</p>"},{"location":"verifyToken-Middleware.html#purpose-and-scope","title":"Purpose and Scope","text":"<p>The <code>verifyToken</code> middleware is a critical authentication component that validates JSON Web Tokens (JWT) from HTTP cookies and attaches authenticated user information to incoming requests. This middleware serves as the primary gatekeeper for protected routes, ensuring that only authenticated users can access specific endpoints.</p> <p>This page documents the middleware implementation, verification flow, integration with the routing system, and error handling. For information about JWT token generation and storage during login, see JWT Token Management. For role-based authorization that builds on top of token verification, see verifyAdmin Middleware.</p> <p>Sources: src/middlewares/verifyToken.js L1-L17</p>"},{"location":"verifyToken-Middleware.html#middleware-implementation","title":"Middleware Implementation","text":"<p>The <code>verifyToken</code> middleware is implemented in a single, focused function that performs JWT validation. The complete implementation is located at src/middlewares/verifyToken.js L1-L17</p>"},{"location":"verifyToken-Middleware.html#core-function-structure","title":"Core Function Structure","text":"<pre><code>verifyToken(req, res, next)\n</code></pre> <p>The middleware follows the standard Express middleware signature, accepting the request object, response object, and next function.</p> Step Action Code Reference 1 Extract token from cookies src/middlewares/verifyToken.js L4 2 Check token existence src/middlewares/verifyToken.js L6 3 Verify token with JWT secret src/middlewares/verifyToken.js L9 4 Attach payload to request src/middlewares/verifyToken.js L10 5 Pass control to next middleware src/middlewares/verifyToken.js L11"},{"location":"verifyToken-Middleware.html#token-extraction","title":"Token Extraction","text":"<p>The middleware extracts the JWT token from the <code>token</code> cookie using the <code>cookie-parser</code> middleware that runs earlier in the request pipeline:</p> <pre><code>const token = req.cookies.token;\n</code></pre> <p>This assumes that <code>cookie-parser</code> has already processed the request and populated <code>req.cookies</code>. The token itself was set during the login process at src/router.js L570-L574</p> <p>Sources: src/middlewares/verifyToken.js L3-L6</p>"},{"location":"verifyToken-Middleware.html#token-verification-flow","title":"Token Verification Flow","text":"<p>The following diagram illustrates the complete verification flow when a request encounters the <code>verifyToken</code> middleware:</p> <pre><code>flowchart TD\n\nRequest[\"Incoming Request\"]\nExtractToken[\"Extract token from req.cookies.token\"]\nCheckExists[\"Token exists?\"]\nVerifyToken[\"jwt.verify(token, JWT_SECRET)\"]\nVerifySuccess[\"Verification&lt;br&gt;successful?\"]\nAttachPayload[\"req.user = payload\"]\nCallNext[\"next()\"]\nReturn401[\"return res.status(401)&lt;br&gt;.send('No autenticado')\"]\nReturn403[\"return res.status(403)&lt;br&gt;.send('Token inv\u00e1lido')\"]\nRouteHandler[\"Route Handler Executes\"]\nEnd[\"Response Sent\"]\n\nRequest --&gt; ExtractToken\nExtractToken --&gt; CheckExists\nCheckExists --&gt; Return401\nCheckExists --&gt; VerifyToken\nVerifyToken --&gt; VerifySuccess\nVerifySuccess --&gt; AttachPayload\nVerifySuccess --&gt; Return403\nAttachPayload --&gt; CallNext\nCallNext --&gt; RouteHandler\nReturn401 --&gt; End\nReturn403 --&gt; End</code></pre> <p>Token Verification Process:</p>"},{"location":"verifyToken-Middleware.html#jwt-payload-structure","title":"JWT Payload Structure","text":"<p>Upon successful verification, the middleware attaches the decoded JWT payload to <code>req.user</code>. The payload structure matches what was created during login at src/router.js L559-L564</p> <p>:</p> Field Description Example <code>user</code> Username from <code>usuarios.usuario</code> <code>\"john_doe\"</code> <code>name</code> Display name from <code>usuarios.nombre</code> <code>\"John Doe\"</code> <code>rol</code> User role from <code>usuarios.rol</code> <code>\"admin\"</code> or <code>\"user\"</code> <code>imagen</code> Profile image filename <code>\"profile_123.jpg\"</code> or <code>null</code> <p>Sources: src/middlewares/verifyToken.js L8-L14</p> <p>src/router.js L559-L564</p>"},{"location":"verifyToken-Middleware.html#integration-with-routes","title":"Integration with Routes","text":"<p>The <code>verifyToken</code> middleware is imported into the router module and applied to protected routes requiring authentication. The following diagram shows the relationship between the middleware, routes, and route handlers:</p> <pre><code>flowchart TD\n\nImport[\"require('./middlewares/verifyToken')\"]\nAdminRoute[\"GET /admin\"]\nPdfAdminRoute[\"GET /pdfAdmin\"]\nSoporteRoute[\"GET /soporte\"]\nMensajesMiosRoute[\"GET /api/mensajes/mios\"]\nPdfDescargarRoute[\"GET /pdf/descargar\"]\nPdfkitDescargarRoute[\"GET /pdfkit/descargar\"]\nAdminHandler[\"Render admin view&lt;br&gt;with productos\"]\nPdfAdminHandler[\"Render pdfTabla view\"]\nSoporteHandler[\"Render soporte view\"]\nMensajesHandler[\"Query mensajes table\"]\nPdfHandler[\"Generate PDF&lt;br&gt;with Puppeteer\"]\nPdfkitHandler[\"Generate PDF&lt;br&gt;with PDFKit\"]\nVerifyToken[\"verifyToken middleware\"]\nIncomingRequest[\"HTTP Request\"]\n\nImport --&gt; VerifyToken\nIncomingRequest --&gt; AdminRoute\nIncomingRequest --&gt; PdfAdminRoute\nIncomingRequest --&gt; SoporteRoute\nIncomingRequest --&gt; MensajesMiosRoute\nIncomingRequest --&gt; PdfDescargarRoute\nIncomingRequest --&gt; PdfkitDescargarRoute\nAdminRoute --&gt; VerifyToken\nPdfAdminRoute --&gt; VerifyToken\nSoporteRoute --&gt; VerifyToken\nMensajesMiosRoute --&gt; VerifyToken\nPdfDescargarRoute --&gt; VerifyToken\nPdfkitDescargarRoute --&gt; VerifyToken\nVerifyToken --&gt; AdminHandler\nVerifyToken --&gt; PdfAdminHandler\nVerifyToken --&gt; SoporteHandler\nVerifyToken --&gt; MensajesHandler\nVerifyToken --&gt; PdfHandler\nVerifyToken --&gt; PdfkitHandler\n\nsubgraph subGraph4 [\"Request Flow\"]\n    IncomingRequest\nend\n\nsubgraph src/middlewares/verifyToken.js [\"src/middlewares/verifyToken.js\"]\n    VerifyToken\nend\n\nsubgraph src/router.js [\"src/router.js\"]\n    Import\n\nsubgraph subGraph1 [\"Route Handlers\"]\n    AdminHandler\n    PdfAdminHandler\n    SoporteHandler\n    MensajesHandler\n    PdfHandler\n    PdfkitHandler\nend\n\nsubgraph subGraph0 [\"Protected Routes\"]\n    AdminRoute\n    PdfAdminRoute\n    SoporteRoute\n    MensajesMiosRoute\n    PdfDescargarRoute\n    PdfkitDescargarRoute\nend\nend</code></pre>"},{"location":"verifyToken-Middleware.html#protected-routes-summary","title":"Protected Routes Summary","text":"<p>The following table lists all routes protected by <code>verifyToken</code>:</p> Route HTTP Method Purpose Line Reference <code>/admin</code> GET Admin dashboard with product list src/router.js L119 <code>/pdfAdmin</code> GET PDF preview of products src/router.js L136 <code>/soporte</code> GET Support chat interface src/router.js L220 <code>/api/mensajes/mios</code> GET Retrieve user's own messages src/router.js L256 <code>/pdf/descargar</code> GET Generate and download PDF (Puppeteer) src/router.js L317 <code>/pdfkit/descargar</code> GET Generate and download PDF (PDFKit) src/router.js L355 <p>Sources: src/router.js L16</p> <p>src/router.js L119</p> <p>src/router.js L136</p> <p>src/router.js L220</p> <p>src/router.js L256</p> <p>src/router.js L317</p> <p>src/router.js L355</p>"},{"location":"verifyToken-Middleware.html#request-processing-pipeline","title":"Request Processing Pipeline","text":"<p>The following diagram illustrates how <code>verifyToken</code> fits into the complete request processing pipeline, showing the middleware stack and the order of execution:</p> <pre><code>sequenceDiagram\n  participant Client\n  participant Express\n  participant cookie-parser\n  participant verifyToken\n  participant Route Handler\n  participant MySQL DB\n\n  Client-&gt;&gt;Express: GET /admin with Cookie: token=xyz\n  Express-&gt;&gt;cookie-parser: Process request\n  cookie-parser-&gt;&gt;cookie-parser: Parse cookies into req.cookies\n  cookie-parser-&gt;&gt;verifyToken: next()\n  verifyToken-&gt;&gt;verifyToken: Extract req.cookies.token\n  loop [Verification fails]\n    verifyToken--&gt;&gt;Client: 401 No autenticado\n    verifyToken-&gt;&gt;verifyToken: jwt.verify(token, JWT_SECRET)\n    verifyToken--&gt;&gt;Client: 403 Token inv\u00e1lido\n    verifyToken-&gt;&gt;verifyToken: req.user = payload\n    verifyToken-&gt;&gt;Route Handler: next()\n    Route Handler-&gt;&gt;MySQL DB: Query data\n    MySQL DB--&gt;&gt;Route Handler: Results\n    Route Handler--&gt;&gt;Client: 200 Response with data\n  end</code></pre> <p>Sources: src/middlewares/verifyToken.js L3-L14</p> <p>src/router.js L119-L134</p>"},{"location":"verifyToken-Middleware.html#error-handling","title":"Error Handling","text":"<p>The <code>verifyToken</code> middleware implements two distinct error conditions with different HTTP status codes:</p>"},{"location":"verifyToken-Middleware.html#401-unauthorized-missing-token","title":"401 Unauthorized - Missing Token","text":"<p>Returned when the <code>token</code> cookie is not present in the request. This occurs when:</p> <ul> <li>User has not logged in</li> <li>Token cookie has expired</li> <li>Cookie was manually deleted</li> <li>Request is made without cookies</li> </ul> <p>Implementation: src/middlewares/verifyToken.js L6</p> <pre><code>if (!token) return res.status(401).send(\"No autenticado\");\n</code></pre>"},{"location":"verifyToken-Middleware.html#403-forbidden-invalid-token","title":"403 Forbidden - Invalid Token","text":"<p>Returned when JWT verification fails inside the try-catch block. This occurs when:</p> <ul> <li>Token has been tampered with</li> <li>Token signature is invalid</li> <li>Token has expired (JWT expiration is 1 hour from src/router.js L567 )</li> <li>Token was signed with a different secret</li> </ul> <p>Implementation: src/middlewares/verifyToken.js L12-L13</p> <pre><code>catch (err) {\n    return res.status(403).send(\"Token inv\u00e1lido\");\n}\n</code></pre>"},{"location":"verifyToken-Middleware.html#error-response-flow","title":"Error Response Flow","text":"<pre><code>flowchart TD\n\nRequest[\"Request with&lt;br&gt;Cookie Header\"]\nNoCookie[\"No token cookie\"]\nInvalidSignature[\"Invalid signature\"]\nExpired[\"Token expired\"]\nTampered[\"Token tampered\"]\nRes401[\"HTTP 401&lt;br&gt;No autenticado\"]\nRes403[\"HTTP 403&lt;br&gt;Token inv\u00e1lido\"]\n\nRequest --&gt; NoCookie\nRequest --&gt; InvalidSignature\nRequest --&gt; Expired\nRequest --&gt; Tampered\nNoCookie --&gt; Res401\nInvalidSignature --&gt; Res403\nExpired --&gt; Res403\nTampered --&gt; Res403\n\nsubgraph subGraph1 [\"HTTP Responses\"]\n    Res401\n    Res403\nend\n\nsubgraph subGraph0 [\"Error Cases\"]\n    NoCookie\n    InvalidSignature\n    Expired\n    Tampered\nend</code></pre> <p>Sources: src/middlewares/verifyToken.js L6-L14</p>"},{"location":"verifyToken-Middleware.html#security-considerations","title":"Security Considerations","text":"<p>The <code>verifyToken</code> middleware implements several security best practices:</p>"},{"location":"verifyToken-Middleware.html#http-only-cookies","title":"HTTP-Only Cookies","text":"<p>The JWT token is stored in an HTTP-only cookie (set at src/router.js L570-L574</p> <p>), which prevents JavaScript access to the token, mitigating XSS attacks. The middleware reads from <code>req.cookies.token</code>, which is only accessible server-side.</p>"},{"location":"verifyToken-Middleware.html#secret-key-verification","title":"Secret Key Verification","text":"<p>The middleware uses <code>process.env.JWT_SECRET</code> to verify token signatures. This secret is:</p> <ul> <li>Stored in environment variables (not in code)</li> <li>Used for both signing (during login) and verification</li> <li>Required for the <code>jwt.verify()</code> call to succeed</li> </ul>"},{"location":"verifyToken-Middleware.html#token-expiration","title":"Token Expiration","text":"<p>While the middleware itself doesn't check expiration explicitly, the <code>jwt.verify()</code> function automatically validates the <code>exp</code> claim in the token. Tokens are created with a 1-hour expiration at src/router.js L567</p>"},{"location":"verifyToken-Middleware.html#synchronous-verification","title":"Synchronous Verification","text":"<p>The <code>jwt.verify()</code> call at src/middlewares/verifyToken.js L9</p> <p>is synchronous, which is appropriate for the verification use case and prevents timing attacks that could occur with asynchronous operations.</p> <p>Sources: src/middlewares/verifyToken.js L9</p> <p>src/router.js L567</p> <p>src/router.js L570-L574</p>"},{"location":"verifyToken-Middleware.html#usage-in-route-definitions","title":"Usage in Route Definitions","text":"<p>The middleware is applied to routes using Express's standard middleware pattern. Here are concrete examples from the codebase:</p>"},{"location":"verifyToken-Middleware.html#single-middleware-application","title":"Single Middleware Application","text":"<pre><code>router.get(\"/admin\", verifyToken, (req, res) =&gt; {\n    // req.user is now available\n    db.query(\"SELECT * FROM productos\", (error, results) =&gt; {\n        res.render(\"admin\", {\n            productos: results,\n            user: req.user,  // Access authenticated user\n            login: true,\n            rol: req.user.rol\n        });\n    });\n});\n</code></pre> <p>Location: src/router.js L119-L134</p>"},{"location":"verifyToken-Middleware.html#chained-middleware-application","title":"Chained Middleware Application","text":"<p>For admin-only routes, <code>verifyToken</code> is chained with <code>verifyAdmin</code>:</p> <pre><code>router.get(\"/api/mensajes\", verifyAdmin, (req, res) =&gt; {\n    // verifyAdmin internally ensures verifyToken runs first\n    // Both req.user and admin role are validated\n});\n</code></pre> <p>Location: src/router.js L229</p>"},{"location":"verifyToken-Middleware.html#accessing-user-information","title":"Accessing User Information","text":"<p>After successful verification, route handlers access the authenticated user through <code>req.user</code>:</p> Property Access Pattern Example Username <code>req.user.user</code> Used at src/router.js L223 Display Name <code>req.user.name</code> Used at src/router.js L65 Role <code>req.user.rol</code> Used at src/router.js L130 Profile Image <code>req.user.imagen</code> Included in payload <p>Sources: src/router.js L119-L134</p> <p>src/router.js L220-L227</p> <p>src/router.js L229</p> <p>src/router.js L256-L280</p>"},{"location":"verifyToken-Middleware.html#relationship-with-authentication-flow","title":"Relationship with Authentication Flow","text":"<p>The <code>verifyToken</code> middleware is the validation counterpart to the token generation that occurs during login:</p> <pre><code>flowchart TD\n\nLoginForm[\"POST /auth\"]\nValidateCredentials[\"Validate credentials&lt;br&gt;bcrypt.compare()\"]\nCreatePayload[\"Create JWT payload&lt;br&gt;{user, name, rol, imagen}\"]\nSignToken[\"jwt.sign()&lt;br&gt;with JWT_SECRET&lt;br&gt;expiresIn: 1h\"]\nSetCookie[\"res.cookie('token')&lt;br&gt;httpOnly: true\"]\nProtectedRoute[\"GET /admin\"]\nVerifyTokenMW[\"verifyToken middleware\"]\nExtractCookie[\"Extract req.cookies.token\"]\nVerifyJWT[\"jwt.verify()&lt;br&gt;with JWT_SECRET\"]\nAttachUser[\"req.user = payload\"]\nRouteHandler[\"Route handler&lt;br&gt;accesses req.user\"]\n\nSetCookie --&gt; ProtectedRoute\n\nsubgraph subGraph1 [\"Protected Route - Token Verification\"]\n    ProtectedRoute\n    VerifyTokenMW\n    ExtractCookie\n    VerifyJWT\n    AttachUser\n    RouteHandler\n    ProtectedRoute --&gt; VerifyTokenMW\n    VerifyTokenMW --&gt; ExtractCookie\n    ExtractCookie --&gt; VerifyJWT\n    VerifyJWT --&gt; AttachUser\n    AttachUser --&gt; RouteHandler\nend\n\nsubgraph subGraph0 [\"Login Flow - Token Generation\"]\n    LoginForm\n    ValidateCredentials\n    CreatePayload\n    SignToken\n    SetCookie\n    LoginForm --&gt; ValidateCredentials\n    ValidateCredentials --&gt; CreatePayload\n    CreatePayload --&gt; SignToken\n    SignToken --&gt; SetCookie\nend</code></pre> <p>Sources: src/router.js L532-L601</p> <p>src/middlewares/verifyToken.js L1-L17</p>"}]}